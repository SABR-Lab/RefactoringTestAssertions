{
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-log4j/src/test/java/org/apache/ambari/TestJobHistoryParsing.java": {
    "test1": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "ff096b56b547df4a43f57045d1e501ba4976adb3",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "test1[]",
        "body": "public void test1() {\n    java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adj \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String[]\u003e();\n    adj.put(\"10\", new java.lang.String[]{ \"20\", \"30\" });\n    adj.put(\"20\", new java.lang.String[]{ \"30\" });\n    adj.put(\"30\", new java.lang.String[]{  });\n    test(\"id_0-1\", \"something.name\", \"10\", adj);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "36d646ee25536c2584f7e5e94fdaf8637b7066d3",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "test1[]",
        "body": "public void test1() {\n    java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adj \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String[]\u003e();\n    adj.put(\"10\", new java.lang.String[]{ \"20\", \"30\" });\n    adj.put(\"20\", new java.lang.String[]{ \"30\" });\n    adj.put(\"30\", new java.lang.String[]{  });\n    test(\"id_0-1\", \"something.name\", \"10\", adj);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "test2": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "ff096b56b547df4a43f57045d1e501ba4976adb3",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "test2[]",
        "body": "public void test2() {\n    java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adj \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String[]\u003e();\n    adj.put(\"1\u003d0\", new java.lang.String[]{ \"2 0\", \"3\\\"0.\" });\n    adj.put(\"2 0\", new java.lang.String[]{ \"3\\\"0.\" });\n    adj.put(\"3\\\"0.\", new java.lang.String[]{  });\n    test(\"id_\u003d 0-1\", \"something.name\", \"1\u003d0\", adj);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "36d646ee25536c2584f7e5e94fdaf8637b7066d3",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "test2[]",
        "body": "public void test2() {\n    java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adj \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String[]\u003e();\n    adj.put(\"1\u003d0\", new java.lang.String[]{ \"2 0\", \"3\\\"0.\" });\n    adj.put(\"2 0\", new java.lang.String[]{ \"3\\\"0.\" });\n    adj.put(\"3\\\"0.\", new java.lang.String[]{  });\n    test(\"id_\u003d 0-1\", \"something.name\", \"1\u003d0\", adj);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "test3": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "ff096b56b547df4a43f57045d1e501ba4976adb3",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "test3[]",
        "body": "public void test3() {\n    java.lang.String s \u003d \"`~!@#$%^\u0026*()-_\u003d+[]{}|,.\u003c\u003e/?;:\u0027\\\"\";\n    test(s, s, s, new java.util.HashMap\u003cjava.lang.String, java.lang.String[]\u003e());\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "test4": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "ff096b56b547df4a43f57045d1e501ba4976adb3",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "test4[]",
        "body": "public void test4() {\n    java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adj \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String[]\u003e();\n    adj.put(\"X\", new java.lang.String[]{  });\n    test(\"\", \"jobName\", \"X\", adj);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "test": [
      {
        "has_assertions": true,
        "assertion_lines": [
          93,
          94,
          95,
          102,
          103
        ],
        "commit": "ff096b56b547df4a43f57045d1e501ba4976adb3",
        "annotations": "No Annotations",
        "assertion_amount": 5,
        "method_signature": "test[java.lang.String workflowId, java.lang.String workflowName, java.lang.String workflowNodeName, java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adjacencies]",
        "body": "public void test(java.lang.String workflowId, java.lang.String workflowName, java.lang.String workflowNodeName, java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adjacencies) {\n    org.apache.hadoop.conf.Configuration conf \u003d new org.apache.hadoop.conf.Configuration();\n    org.apache.ambari.TestJobHistoryParsing.setProperties(conf, workflowId, workflowName, workflowNodeName, adjacencies);\n    java.lang.String log \u003d org.apache.ambari.TestJobHistoryParsing.log(\"JOB\", new java.lang.String[]{ org.apache.ambari.TestJobHistoryParsing.ID, org.apache.ambari.TestJobHistoryParsing.NAME, org.apache.ambari.TestJobHistoryParsing.NODE, org.apache.ambari.TestJobHistoryParsing.ADJ }, new java.lang.String[]{ conf.get(org.apache.ambari.TestJobHistoryParsing.ID_PROP), conf.get(org.apache.ambari.TestJobHistoryParsing.NAME_PROP), conf.get(org.apache.ambari.TestJobHistoryParsing.NODE_PROP), org.apache.hadoop.mapred.JobHistory.JobInfo.getWorkflowAdjacencies(conf) });\n    org.apache.ambari.TestJobHistoryParsing.ParsedLine line \u003d new org.apache.ambari.TestJobHistoryParsing.ParsedLine(log);\n    org.apache.hadoop.mapreduce.JobID jobid \u003d new org.apache.hadoop.mapreduce.JobID(\"id\", 1);\n    org.apache.hadoop.tools.rumen.JobSubmittedEvent event \u003d new org.apache.hadoop.tools.rumen.JobSubmittedEvent(jobid, workflowName, \"\", 0L, \"\", null, \"\", line.get(org.apache.ambari.TestJobHistoryParsing.ID), line.get(org.apache.ambari.TestJobHistoryParsing.NAME), line.get(org.apache.ambari.TestJobHistoryParsing.NODE), line.get(org.apache.ambari.TestJobHistoryParsing.ADJ));\n    org.apache.ambari.eventdb.model.WorkflowContext context \u003d org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.buildWorkflowContext(event);\n    java.lang.String resultingWorkflowId \u003d workflowId;\n    if (workflowId.isEmpty()) {\n        resultingWorkflowId \u003d jobid.toString().replace(\"job_\", \"mr_\");\n    }\n    junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowId\", resultingWorkflowId, context.getWorkflowId());\n    junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowName\", workflowName, context.getWorkflowName());\n    junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowNodeName\", workflowNodeName, context.getWorkflowEntityName());\n    java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e resultingAdjacencies \u003d adjacencies;\n    if (resultingAdjacencies.size() \u003d\u003d 0) {\n        resultingAdjacencies \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String[]\u003e();\n        resultingAdjacencies.put(workflowNodeName, new java.lang.String[]{  });\n    }\n    junit.framework.Assert.assertEquals(\"Got incorrect number of adjacencies\", resultingAdjacencies.size(), context.getWorkflowDag().getEntries().size());\n    for (org.apache.ambari.eventdb.model.WorkflowDag.WorkflowDagEntry entry : context.getWorkflowDag().getEntries()) {\n        java.lang.String[] sTargets \u003d resultingAdjacencies.get(entry.getSource());\n        junit.framework.Assert.assertNotNull(\"No original targets for \" + entry.getSource(), sTargets);\n        java.util.List\u003cjava.lang.String\u003e dTargets \u003d entry.getTargets();\n        junit.framework.Assert.assertEquals(\"Got incorrect number of targets for \" + entry.getSource(), sTargets.length, dTargets.size());\n        for (int i \u003d 0; i \u003c sTargets.length; i++) {\n            junit.framework.Assert.assertEquals(\"Got incorrect target for \" + entry.getSource(), sTargets[i], dTargets.get(i));\n        }\n    }\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowId\", resultingWorkflowId, context.getWorkflowId()), junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowName\", workflowName, context.getWorkflowName()), junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowNodeName\", workflowNodeName, context.getWorkflowEntityName()), junit.framework.Assert.assertEquals(\"Got incorrect number of adjacencies\", resultingAdjacencies.size(), context.getWorkflowDag().getEntries().size()), for (org.apache.ambari.eventdb.model.WorkflowDag.WorkflowDagEntry entry : context.getWorkflowDag().getEntries()) {\n    java.lang.String[] sTargets \u003d resultingAdjacencies.get(entry.getSource());\n    junit.framework.Assert.assertNotNull(\"No original targets for \" + entry.getSource(), sTargets);\n    java.util.List\u003cjava.lang.String\u003e dTargets \u003d entry.getTargets();\n    junit.framework.Assert.assertEquals(\"Got incorrect number of targets for \" + entry.getSource(), sTargets.length, dTargets.size());\n    for (int i \u003d 0; i \u003c sTargets.length; i++) {\n        junit.framework.Assert.assertEquals(\"Got incorrect target for \" + entry.getSource(), sTargets[i], dTargets.get(i));\n    }\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          76,
          77,
          78,
          79,
          80
        ],
        "commit": "36d646ee25536c2584f7e5e94fdaf8637b7066d3",
        "annotations": "No Annotations",
        "assertion_amount": 5,
        "method_signature": "test[java.lang.String workflowId, java.lang.String workflowName, java.lang.String workflowNodeName, java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adjacencies]",
        "body": "public void test(java.lang.String workflowId, java.lang.String workflowName, java.lang.String workflowNodeName, java.util.Map\u003cjava.lang.String, java.lang.String[]\u003e adjacencies) {\n    org.apache.hadoop.conf.Configuration conf \u003d new org.apache.hadoop.conf.Configuration();\n    org.apache.ambari.TestJobHistoryParsing.setProperties(conf, workflowId, workflowName, workflowNodeName, adjacencies);\n    java.lang.String log \u003d org.apache.ambari.TestJobHistoryParsing.log(\"JOB\", new java.lang.String[]{ org.apache.ambari.TestJobHistoryParsing.ID, org.apache.ambari.TestJobHistoryParsing.NAME, org.apache.ambari.TestJobHistoryParsing.NODE, org.apache.ambari.TestJobHistoryParsing.ADJ }, new java.lang.String[]{ conf.get(org.apache.ambari.TestJobHistoryParsing.ID_PROP), conf.get(org.apache.ambari.TestJobHistoryParsing.NAME_PROP), conf.get(org.apache.ambari.TestJobHistoryParsing.NODE_PROP), org.apache.hadoop.mapred.JobHistory.JobInfo.getWorkflowAdjacencies(conf) });\n    org.apache.ambari.TestJobHistoryParsing.ParsedLine line \u003d new org.apache.ambari.TestJobHistoryParsing.ParsedLine(log);\n    org.apache.hadoop.tools.rumen.JobSubmittedEvent event \u003d new org.apache.hadoop.tools.rumen.JobSubmittedEvent(null, \"\", \"\", 0L, \"\", null, \"\", line.get(org.apache.ambari.TestJobHistoryParsing.ID), line.get(org.apache.ambari.TestJobHistoryParsing.NAME), line.get(org.apache.ambari.TestJobHistoryParsing.NODE), line.get(org.apache.ambari.TestJobHistoryParsing.ADJ));\n    org.apache.ambari.eventdb.model.WorkflowContext context \u003d org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.buildWorkflowContext(event);\n    junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowId\", workflowId, context.getWorkflowId());\n    junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowName\", workflowName, context.getWorkflowName());\n    junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowNodeName\", workflowNodeName, context.getWorkflowEntityName());\n    junit.framework.Assert.assertEquals(\"Got incorrect number of adjacencies\", adjacencies.size(), context.getWorkflowDag().getEntries().size());\n    for (org.apache.ambari.eventdb.model.WorkflowDag.WorkflowDagEntry entry : context.getWorkflowDag().getEntries()) {\n        java.lang.String[] sTargets \u003d adjacencies.get(entry.getSource());\n        junit.framework.Assert.assertNotNull(\"No original targets for \" + entry.getSource(), sTargets);\n        java.util.List\u003cjava.lang.String\u003e dTargets \u003d entry.getTargets();\n        junit.framework.Assert.assertEquals(\"Got incorrect number of targets for \" + entry.getSource(), sTargets.length, dTargets.size());\n        for (int i \u003d 0; i \u003c sTargets.length; i++) {\n            junit.framework.Assert.assertEquals(\"Got incorrect target for \" + entry.getSource(), sTargets[i], dTargets.get(i));\n        }\n    }\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowId\", workflowId, context.getWorkflowId()), junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowName\", workflowName, context.getWorkflowName()), junit.framework.Assert.assertEquals(\"Didn\u0027t recover workflowNodeName\", workflowNodeName, context.getWorkflowEntityName()), junit.framework.Assert.assertEquals(\"Got incorrect number of adjacencies\", adjacencies.size(), context.getWorkflowDag().getEntries().size()), for (org.apache.ambari.eventdb.model.WorkflowDag.WorkflowDagEntry entry : context.getWorkflowDag().getEntries()) {\n    java.lang.String[] sTargets \u003d adjacencies.get(entry.getSource());\n    junit.framework.Assert.assertNotNull(\"No original targets for \" + entry.getSource(), sTargets);\n    java.util.List\u003cjava.lang.String\u003e dTargets \u003d entry.getTargets();\n    junit.framework.Assert.assertEquals(\"Got incorrect number of targets for \" + entry.getSource(), sTargets.length, dTargets.size());\n    for (int i \u003d 0; i \u003c sTargets.length; i++) {\n        junit.framework.Assert.assertEquals(\"Got incorrect target for \" + entry.getSource(), sTargets[i], dTargets.get(i));\n    }\n}"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/DeleteServiceTest.java": {
    "testDeleteService": [
      {
        "has_assertions": true,
        "assertion_lines": [
          91,
          94,
          97,
          119,
          120,
          130,
          132,
          133,
          140,
          141,
          150,
          157,
          165,
          171,
          180,
          186,
          192,
          199
        ],
        "commit": "3c28378fa4e6f4299e7df01c47359b4c8643ef63",
        "annotations": "@org.junit.Test",
        "assertion_amount": 18,
        "method_signature": "testDeleteService[]",
        "body": "/**\n * Set up a test cluster with a service, a host and a few components.\n * Attempt to delete the service. Verify the state of the DB.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testDeleteService() throws java.lang.Exception {\n    java.lang.String clusterName \u003d \"c1\";\n    java.lang.String serviceName \u003d \"HDFS\";\n    org.apache.ambari.funtest.server.ConnectionParams params \u003d new org.apache.ambari.funtest.server.ConnectionParams();\n    params.setServerName(\"localhost\");\n    params.setServerApiPort(serverPort);\n    params.setServerAgentPort(serverAgentPort);\n    params.setUserName(\"admin\");\n    params.setPassword(\"admin\");\n    org.apache.ambari.funtest.server.utils.ClusterUtils clusterUtils \u003d injector.getInstance(org.apache.ambari.funtest.server.utils.ClusterUtils.class);\n    clusterUtils.createSampleCluster(params);\n    /**\n     * Verify the status of the service\n     */\n    com.google.gson.JsonElement jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.GetServiceWebRequest(params, clusterName, serviceName));\n    org.junit.Assert.assertTrue(!jsonResponse.isJsonNull());\n    com.google.gson.JsonObject jsonServiceInfoObj \u003d jsonResponse.getAsJsonObject().get(\"ServiceInfo\").getAsJsonObject();\n    java.lang.String cluster_name \u003d jsonServiceInfoObj.get(\"cluster_name\").getAsString();\n    org.junit.Assert.assertEquals(cluster_name, clusterName);\n    java.lang.String service_name \u003d jsonServiceInfoObj.get(\"service_name\").getAsString();\n    org.junit.Assert.assertEquals(service_name, serviceName);\n    /**\n     * Check the following:\n     * ClusterServiceDAO\n     * ServiceDesiredStateDAO\n     * ServiceComponentDesiredStateDAO\n     * HostComponentStateDAO\n     * HostComponentDesiredStateDAO\n     */\n    /**\n     * Stop the service\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.StopServiceWebRequest(params, clusterName, serviceName));\n    /**\n     * clusterservice table\n     */\n    org.apache.ambari.server.orm.dao.ClusterServiceDAO clusterServiceDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ClusterServiceDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ClusterServiceEntity\u003e clusterServiceEntities \u003d clusterServiceDAO.findAll();\n    org.junit.Assert.assertEquals(clusterServiceEntities.size(), 1);// Only one service in the sample cluster (HDFS)\n\n    org.junit.Assert.assertEquals(clusterServiceEntities.get(0).getServiceName(), serviceName);// Verify the only service name\n\n    org.apache.ambari.server.orm.entities.ClusterServiceEntity clusterServiceEntity \u003d clusterServiceEntities.get(0);\n    long clusterId \u003d clusterServiceEntity.getClusterId();\n    /**\n     * servicedesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO serviceDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ServiceDesiredStateEntity\u003e serviceDesiredStateEntities \u003d serviceDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(serviceDesiredStateEntities.size(), 1);\n    org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity serviceDesiredStateEntity \u003d serviceDesiredStateEntities.get(0);\n    org.junit.Assert.assertEquals(serviceDesiredStateEntity.getServiceName(), serviceName);\n    org.junit.Assert.assertEquals(serviceDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n    /**\n     * servicecomponentdesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity\u003e serviceComponentDesiredStateEntities \u003d serviceComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(serviceComponentDesiredStateEntities.size(), 3);// NAMENODE, SECONDARY_NAMENODE, DATANODE.\n\n    for (org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {\n        org.junit.Assert.assertEquals(serviceComponentDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n    }\n    /**\n     * hostcomponentstate table\n     */\n    org.apache.ambari.server.orm.dao.HostComponentStateDAO hostComponentStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.HostComponentStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.HostComponentStateEntity\u003e hostComponentStateEntities \u003d hostComponentStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 3);\n    /**\n     * hostcomponentdesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO hostComponentDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity\u003e hostComponentDesiredStateEntities \u003d hostComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 3);\n    /**\n     * Delete the service\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.DeleteServiceWebRequest(params, clusterName, serviceName));\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d new org.apache.ambari.funtest.server.api.service.GetServiceWebRequest(params, clusterName, serviceName).getResponse();\n    org.junit.Assert.assertEquals(webResponse.getStatusCode(), org.apache.http.HttpStatus.SC_NOT_FOUND);\n    /**\n     * ClusterServiceDAO - the service entry should have been removed.\n     */\n    clusterServiceEntity \u003d clusterServiceDAO.findByClusterAndServiceNames(clusterName, serviceName);\n    org.junit.Assert.assertTrue(clusterServiceEntity \u003d\u003d null);\n    /**\n     * ServiceDesiredStateDAO - the service entry should have been removed.\n     */\n    org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK serviceDesiredStateEntityPK \u003d injector.getInstance(org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK.class);\n    serviceDesiredStateEntityPK.setClusterId(clusterId);\n    serviceDesiredStateEntityPK.setServiceName(serviceName);\n    serviceDesiredStateEntity \u003d serviceDesiredStateDAO.findByPK(serviceDesiredStateEntityPK);\n    org.junit.Assert.assertTrue(serviceDesiredStateEntity \u003d\u003d null);\n    /**\n     * ServiceComponentDesiredStateDAO\n     */\n    org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity \u003d serviceComponentDesiredStateDAO.findById(0L);\n    org.junit.Assert.assertTrue(serviceComponentDesiredStateEntity \u003d\u003d null);\n    /**\n     * HostComponentStateDAO\n     */\n    hostComponentStateEntities \u003d hostComponentStateDAO.findByService(serviceName);\n    org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 0);\n    /**\n     * HostComponentDesiredStateDAO\n     */\n    hostComponentDesiredStateEntities \u003d hostComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 0);\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.cluster.DeleteClusterWebRequest(params, clusterName));\n    org.apache.ambari.funtest.server.tests.DeleteServiceTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertTrue(!jsonResponse.isJsonNull()), org.junit.Assert.assertEquals(cluster_name, clusterName), org.junit.Assert.assertEquals(service_name, serviceName), org.junit.Assert.assertEquals(clusterServiceEntities.size(), 1)// Only one service in the sample cluster (HDFS), org.junit.Assert.assertEquals(clusterServiceEntities.get(0).getServiceName(), serviceName)// Verify the only service name, org.junit.Assert.assertEquals(serviceDesiredStateEntities.size(), 1), org.junit.Assert.assertEquals(serviceDesiredStateEntity.getServiceName(), serviceName), org.junit.Assert.assertEquals(serviceDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED), org.junit.Assert.assertEquals(serviceComponentDesiredStateEntities.size(), 3)// NAMENODE, SECONDARY_NAMENODE, DATANODE., for (org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {\n    org.junit.Assert.assertEquals(serviceComponentDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n}, org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 3), org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 3), org.junit.Assert.assertEquals(webResponse.getStatusCode(), org.apache.http.HttpStatus.SC_NOT_FOUND), org.junit.Assert.assertTrue(clusterServiceEntity \u003d\u003d null), org.junit.Assert.assertTrue(serviceDesiredStateEntity \u003d\u003d null), org.junit.Assert.assertTrue(serviceComponentDesiredStateEntity \u003d\u003d null), org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 0), org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 0)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          90,
          93,
          96,
          118,
          119,
          129,
          131,
          132,
          139,
          140,
          149,
          156,
          164,
          170,
          179,
          185,
          191,
          198
        ],
        "commit": "b38cdb9b77e489f28f656e89964c04e65f9b326f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 18,
        "method_signature": "testDeleteService[]",
        "body": "/**\n * Set up a test cluster with a service, a host and a few components.\n * Attempt to delete the service. Verify the state of the DB.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testDeleteService() throws java.lang.Exception {\n    java.lang.String clusterName \u003d \"c1\";\n    java.lang.String serviceName \u003d \"HDFS\";\n    org.apache.ambari.funtest.server.ConnectionParams params \u003d new org.apache.ambari.funtest.server.ConnectionParams();\n    params.setServerName(\"localhost\");\n    params.setServerApiPort(serverPort);\n    params.setServerAgentPort(serverAgentPort);\n    params.setUserName(\"admin\");\n    params.setPassword(\"admin\");\n    org.apache.ambari.funtest.server.utils.ClusterUtils clusterUtils \u003d injector.getInstance(org.apache.ambari.funtest.server.utils.ClusterUtils.class);\n    clusterUtils.createSampleCluster(params);\n    /**\n     * Verify the status of the service\n     */\n    com.google.gson.JsonElement jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.GetServiceWebRequest(params, clusterName, serviceName));\n    org.junit.Assert.assertTrue(!jsonResponse.isJsonNull());\n    com.google.gson.JsonObject jsonServiceInfoObj \u003d jsonResponse.getAsJsonObject().get(\"ServiceInfo\").getAsJsonObject();\n    java.lang.String cluster_name \u003d jsonServiceInfoObj.get(\"cluster_name\").getAsString();\n    org.junit.Assert.assertEquals(cluster_name, clusterName);\n    java.lang.String service_name \u003d jsonServiceInfoObj.get(\"service_name\").getAsString();\n    org.junit.Assert.assertEquals(service_name, serviceName);\n    /**\n     * Check the following:\n     * ClusterServiceDAO\n     * ServiceDesiredStateDAO\n     * ServiceComponentDesiredStateDAO\n     * HostComponentStateDAO\n     * HostComponentDesiredStateDAO\n     */\n    /**\n     * Stop the service\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.StopServiceWebRequest(params, clusterName, serviceName));\n    /**\n     * clusterservice table\n     */\n    org.apache.ambari.server.orm.dao.ClusterServiceDAO clusterServiceDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ClusterServiceDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ClusterServiceEntity\u003e clusterServiceEntities \u003d clusterServiceDAO.findAll();\n    org.junit.Assert.assertEquals(clusterServiceEntities.size(), 1);// Only one service in the sample cluster (HDFS)\n\n    org.junit.Assert.assertEquals(clusterServiceEntities.get(0).getServiceName(), serviceName);// Verify the only service name\n\n    org.apache.ambari.server.orm.entities.ClusterServiceEntity clusterServiceEntity \u003d clusterServiceEntities.get(0);\n    long clusterId \u003d clusterServiceEntity.getClusterId();\n    /**\n     * servicedesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO serviceDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ServiceDesiredStateEntity\u003e serviceDesiredStateEntities \u003d serviceDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(serviceDesiredStateEntities.size(), 1);\n    org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity serviceDesiredStateEntity \u003d serviceDesiredStateEntities.get(0);\n    org.junit.Assert.assertEquals(serviceDesiredStateEntity.getServiceName(), serviceName);\n    org.junit.Assert.assertEquals(serviceDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n    /**\n     * servicecomponentdesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity\u003e serviceComponentDesiredStateEntities \u003d serviceComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(serviceComponentDesiredStateEntities.size(), 3);// NAMENODE, SECONDARY_NAMENODE, DATANODE.\n\n    for (org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {\n        org.junit.Assert.assertEquals(serviceComponentDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n    }\n    /**\n     * hostcomponentstate table\n     */\n    org.apache.ambari.server.orm.dao.HostComponentStateDAO hostComponentStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.HostComponentStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.HostComponentStateEntity\u003e hostComponentStateEntities \u003d hostComponentStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 3);\n    /**\n     * hostcomponentdesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO hostComponentDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity\u003e hostComponentDesiredStateEntities \u003d hostComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 3);\n    /**\n     * Delete the service\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.DeleteServiceWebRequest(params, clusterName, serviceName));\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d new org.apache.ambari.funtest.server.api.service.GetServiceWebRequest(params, clusterName, serviceName).getResponse();\n    org.junit.Assert.assertEquals(webResponse.getStatusCode(), org.apache.http.HttpStatus.SC_NOT_FOUND);\n    /**\n     * ClusterServiceDAO - the service entry should have been removed.\n     */\n    clusterServiceEntity \u003d clusterServiceDAO.findByClusterAndServiceNames(clusterName, serviceName);\n    org.junit.Assert.assertTrue(clusterServiceEntity \u003d\u003d null);\n    /**\n     * ServiceDesiredStateDAO - the service entry should have been removed.\n     */\n    org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK serviceDesiredStateEntityPK \u003d injector.getInstance(org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK.class);\n    serviceDesiredStateEntityPK.setClusterId(clusterId);\n    serviceDesiredStateEntityPK.setServiceName(serviceName);\n    serviceDesiredStateEntity \u003d serviceDesiredStateDAO.findByPK(serviceDesiredStateEntityPK);\n    org.junit.Assert.assertTrue(serviceDesiredStateEntity \u003d\u003d null);\n    /**\n     * ServiceComponentDesiredStateDAO\n     */\n    org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity \u003d serviceComponentDesiredStateDAO.findById(0L);\n    org.junit.Assert.assertTrue(serviceComponentDesiredStateEntity \u003d\u003d null);\n    /**\n     * HostComponentStateDAO\n     */\n    hostComponentStateEntities \u003d hostComponentStateDAO.findByService(serviceName);\n    org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 0);\n    /**\n     * HostComponentDesiredStateDAO\n     */\n    hostComponentDesiredStateEntities \u003d hostComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 0);\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.cluster.DeleteClusterWebRequest(params, clusterName));\n    org.apache.ambari.funtest.server.tests.DeleteServiceTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertTrue(!jsonResponse.isJsonNull()), org.junit.Assert.assertEquals(cluster_name, clusterName), org.junit.Assert.assertEquals(service_name, serviceName), org.junit.Assert.assertEquals(clusterServiceEntities.size(), 1)// Only one service in the sample cluster (HDFS), org.junit.Assert.assertEquals(clusterServiceEntities.get(0).getServiceName(), serviceName)// Verify the only service name, org.junit.Assert.assertEquals(serviceDesiredStateEntities.size(), 1), org.junit.Assert.assertEquals(serviceDesiredStateEntity.getServiceName(), serviceName), org.junit.Assert.assertEquals(serviceDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED), org.junit.Assert.assertEquals(serviceComponentDesiredStateEntities.size(), 3)// NAMENODE, SECONDARY_NAMENODE, DATANODE., for (org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {\n    org.junit.Assert.assertEquals(serviceComponentDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n}, org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 3), org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 3), org.junit.Assert.assertEquals(webResponse.getStatusCode(), org.apache.http.HttpStatus.SC_NOT_FOUND), org.junit.Assert.assertTrue(clusterServiceEntity \u003d\u003d null), org.junit.Assert.assertTrue(serviceDesiredStateEntity \u003d\u003d null), org.junit.Assert.assertTrue(serviceComponentDesiredStateEntity \u003d\u003d null), org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 0), org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 0)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          90,
          93,
          96,
          118,
          119,
          129,
          131,
          132,
          139,
          140,
          149,
          156,
          164,
          170,
          179,
          185,
          191,
          198
        ],
        "commit": "2a9f49c0e3a1839076fd271cb7caf09b3fc897f4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 18,
        "method_signature": "testDeleteService[]",
        "body": "/**\n * Set up a test cluster with a service, a host and a few components.\n * Attempt to delete the service. Verify the state of the DB.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testDeleteService() throws java.lang.Exception {\n    java.lang.String clusterName \u003d \"c1\";\n    java.lang.String serviceName \u003d \"HDFS\";\n    org.apache.ambari.funtest.server.ConnectionParams params \u003d new org.apache.ambari.funtest.server.ConnectionParams();\n    params.setServerName(\"localhost\");\n    params.setServerApiPort(serverPort);\n    params.setServerAgentPort(serverAgentPort);\n    params.setUserName(\"admin\");\n    params.setPassword(\"admin\");\n    org.apache.ambari.funtest.server.utils.ClusterUtils clusterUtils \u003d injector.getInstance(org.apache.ambari.funtest.server.utils.ClusterUtils.class);\n    clusterUtils.createSampleCluster(params);\n    /**\n     * Verify the status of the service\n     */\n    com.google.gson.JsonElement jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.GetServiceWebRequest(params, clusterName, serviceName));\n    org.junit.Assert.assertTrue(!jsonResponse.isJsonNull());\n    com.google.gson.JsonObject jsonServiceInfoObj \u003d jsonResponse.getAsJsonObject().get(\"ServiceInfo\").getAsJsonObject();\n    java.lang.String cluster_name \u003d jsonServiceInfoObj.get(\"cluster_name\").getAsString();\n    org.junit.Assert.assertEquals(cluster_name, clusterName);\n    java.lang.String service_name \u003d jsonServiceInfoObj.get(\"service_name\").getAsString();\n    org.junit.Assert.assertEquals(service_name, serviceName);\n    /**\n     * Check the following:\n     * ClusterServiceDAO\n     * ServiceDesiredStateDAO\n     * ServiceComponentDesiredStateDAO\n     * HostComponentStateDAO\n     * HostComponentDesiredStateDAO\n     */\n    /**\n     * Stop the service\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.StopServiceWebRequest(params, clusterName, serviceName));\n    /**\n     * clusterservice table\n     */\n    org.apache.ambari.server.orm.dao.ClusterServiceDAO clusterServiceDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ClusterServiceDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ClusterServiceEntity\u003e clusterServiceEntities \u003d clusterServiceDAO.findAll();\n    org.junit.Assert.assertEquals(clusterServiceEntities.size(), 1);// Only one service in the sample cluster (HDFS)\n\n    org.junit.Assert.assertEquals(clusterServiceEntities.get(0).getServiceName(), serviceName);// Verify the only service name\n\n    org.apache.ambari.server.orm.entities.ClusterServiceEntity clusterServiceEntity \u003d clusterServiceEntities.get(0);\n    long clusterId \u003d clusterServiceEntity.getClusterId();\n    /**\n     * servicedesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO serviceDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ServiceDesiredStateEntity\u003e serviceDesiredStateEntities \u003d serviceDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(serviceDesiredStateEntities.size(), 1);\n    org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity serviceDesiredStateEntity \u003d serviceDesiredStateEntities.get(0);\n    org.junit.Assert.assertEquals(serviceDesiredStateEntity.getServiceName(), serviceName);\n    org.junit.Assert.assertEquals(serviceDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n    /**\n     * servicecomponentdesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity\u003e serviceComponentDesiredStateEntities \u003d serviceComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(serviceComponentDesiredStateEntities.size(), 3);// NAMENODE, SECONDARY_NAMENODE, DATANODE.\n\n    for (org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {\n        org.junit.Assert.assertEquals(serviceComponentDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n    }\n    /**\n     * hostcomponentstate table\n     */\n    org.apache.ambari.server.orm.dao.HostComponentStateDAO hostComponentStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.HostComponentStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.HostComponentStateEntity\u003e hostComponentStateEntities \u003d hostComponentStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 3);\n    /**\n     * hostcomponentdesiredstate table\n     */\n    org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO hostComponentDesiredStateDAO \u003d injector.getInstance(org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO.class);\n    java.util.List\u003corg.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity\u003e hostComponentDesiredStateEntities \u003d hostComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 3);\n    /**\n     * Delete the service\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.DeleteServiceWebRequest(params, clusterName, serviceName));\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d new org.apache.ambari.funtest.server.api.service.GetServiceWebRequest(params, clusterName, serviceName).getResponse();\n    org.junit.Assert.assertEquals(webResponse.getStatusCode(), org.apache.commons.httpclient.HttpStatus.SC_NOT_FOUND);\n    /**\n     * ClusterServiceDAO - the service entry should have been removed.\n     */\n    clusterServiceEntity \u003d clusterServiceDAO.findByClusterAndServiceNames(clusterName, serviceName);\n    org.junit.Assert.assertTrue(clusterServiceEntity \u003d\u003d null);\n    /**\n     * ServiceDesiredStateDAO - the service entry should have been removed.\n     */\n    org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK serviceDesiredStateEntityPK \u003d injector.getInstance(org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK.class);\n    serviceDesiredStateEntityPK.setClusterId(clusterId);\n    serviceDesiredStateEntityPK.setServiceName(serviceName);\n    serviceDesiredStateEntity \u003d serviceDesiredStateDAO.findByPK(serviceDesiredStateEntityPK);\n    org.junit.Assert.assertTrue(serviceDesiredStateEntity \u003d\u003d null);\n    /**\n     * ServiceComponentDesiredStateDAO\n     */\n    org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity \u003d serviceComponentDesiredStateDAO.findById(0L);\n    org.junit.Assert.assertTrue(serviceComponentDesiredStateEntity \u003d\u003d null);\n    /**\n     * HostComponentStateDAO\n     */\n    hostComponentStateEntities \u003d hostComponentStateDAO.findByService(serviceName);\n    org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 0);\n    /**\n     * HostComponentDesiredStateDAO\n     */\n    hostComponentDesiredStateEntities \u003d hostComponentDesiredStateDAO.findAll();\n    org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 0);\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.cluster.DeleteClusterWebRequest(params, clusterName));\n    org.apache.ambari.funtest.server.tests.DeleteServiceTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertTrue(!jsonResponse.isJsonNull()), org.junit.Assert.assertEquals(cluster_name, clusterName), org.junit.Assert.assertEquals(service_name, serviceName), org.junit.Assert.assertEquals(clusterServiceEntities.size(), 1)// Only one service in the sample cluster (HDFS), org.junit.Assert.assertEquals(clusterServiceEntities.get(0).getServiceName(), serviceName)// Verify the only service name, org.junit.Assert.assertEquals(serviceDesiredStateEntities.size(), 1), org.junit.Assert.assertEquals(serviceDesiredStateEntity.getServiceName(), serviceName), org.junit.Assert.assertEquals(serviceDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED), org.junit.Assert.assertEquals(serviceComponentDesiredStateEntities.size(), 3)// NAMENODE, SECONDARY_NAMENODE, DATANODE., for (org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {\n    org.junit.Assert.assertEquals(serviceComponentDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);\n}, org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 3), org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 3), org.junit.Assert.assertEquals(webResponse.getStatusCode(), org.apache.commons.httpclient.HttpStatus.SC_NOT_FOUND), org.junit.Assert.assertTrue(clusterServiceEntity \u003d\u003d null), org.junit.Assert.assertTrue(serviceDesiredStateEntity \u003d\u003d null), org.junit.Assert.assertTrue(serviceComponentDesiredStateEntity \u003d\u003d null), org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 0), org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 0)"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-utility/src/test/java/org/apache/ambari/swagger/AmbariSwaggerReaderTest.java": {
    "testJoinPaths": [
      {
        "has_assertions": true,
        "assertion_lines": [
          58,
          60
        ],
        "commit": "2aece240fb8d258030e917bdc2db0eee5f6afc0e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testJoinPaths[]",
        "body": "/**\n * Test the {@link AmbariSwaggerReader#joinPaths(String, String...)} method\n */\n@org.junit.Test\npublic void testJoinPaths() {\n    org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"\", \"/\", \"/\", \"\", \"toplevel\", \"/nested/\", \"/{param}\", \"list\"));\n    org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"/\", \"toplevel\", \"\", \"/nested/\", \"/\", \"/{param}\", \"list\", \"\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"\", \"/\", \"/\", \"\", \"toplevel\", \"/nested/\", \"/{param}\", \"list\")), org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"/\", \"toplevel\", \"\", \"/nested/\", \"/\", \"/{param}\", \"list\", \"\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          59,
          61
        ],
        "commit": "86735210772b858654fb47becac5cb99af4c64bc",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testJoinPaths[]",
        "body": "/**\n * Test the {@link AmbariSwaggerReader#joinPaths(String, String...)} method\n */\n@org.junit.Test\npublic void testJoinPaths() {\n    org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"\", \"/\", \"/\", \"\", \"toplevel\", \"/nested/\", \"/{param}\", \"list\"));\n    org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"/\", \"toplevel\", \"\", \"/nested/\", \"/\", \"/{param}\", \"list\", \"\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"\", \"/\", \"/\", \"\", \"toplevel\", \"/nested/\", \"/{param}\", \"list\")), org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"/\", \"toplevel\", \"\", \"/nested/\", \"/\", \"/{param}\", \"list\", \"\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          58,
          60
        ],
        "commit": "5df06c19d6bcb5ceb398d5aa9f040567c466790d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testJoinPaths[]",
        "body": "/**\n * Test the {@link AmbariSwaggerReader#joinPaths(String, String...)} method\n */\n@org.junit.Test\npublic void testJoinPaths() {\n    org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"\", \"/\", \"/\", \"\", \"toplevel\", \"/nested/\", \"/{param}\", \"list\"));\n    org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"/\", \"toplevel\", \"\", \"/nested/\", \"/\", \"/{param}\", \"list\", \"\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"\", \"/\", \"/\", \"\", \"toplevel\", \"/nested/\", \"/{param}\", \"list\")), org.junit.Assert.assertEquals(\"/toplevel/nested/{param}/list\", org.apache.ambari.swagger.AmbariSwaggerReader.joinPaths(\"/\", \"toplevel\", \"\", \"/nested/\", \"/\", \"/{param}\", \"list\", \"\"))"
      }
    ],
    "swaggerBasicCase": [
      {
        "has_assertions": true,
        "assertion_lines": [
          71,
          73
        ],
        "commit": "2aece240fb8d258030e917bdc2db0eee5f6afc0e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerBasicCase[]",
        "body": "/**\n * Test the basic case: one top level API and one nested API, each with one operation\n */\n@org.junit.Test\npublic void swaggerBasicCase() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(com.google.common.collect.ImmutableSet.of(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.NestedAPI.class));\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          72,
          74
        ],
        "commit": "86735210772b858654fb47becac5cb99af4c64bc",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerBasicCase[]",
        "body": "/**\n * Test the basic case: one top level API and one nested API, each with one operation\n */\n@org.junit.Test\npublic void swaggerBasicCase() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(com.google.common.collect.ImmutableSet.of(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.NestedAPI.class));\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          71,
          73
        ],
        "commit": "5df06c19d6bcb5ceb398d5aa9f040567c466790d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerBasicCase[]",
        "body": "/**\n * Test the basic case: one top level API and one nested API, each with one operation\n */\n@org.junit.Test\npublic void swaggerBasicCase() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(com.google.common.collect.ImmutableSet.of(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.NestedAPI.class));\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\")"
      }
    ],
    "swaggerConflictingNestedApis": [
      {
        "has_assertions": true,
        "assertion_lines": [
          86,
          89
        ],
        "commit": "2aece240fb8d258030e917bdc2db0eee5f6afc0e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApis[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s).\n * In this case the nested API should be associated to the first processed top level API.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApis() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          87,
          90
        ],
        "commit": "86735210772b858654fb47becac5cb99af4c64bc",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApis[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s).\n * In this case the nested API should be associated to the first processed top level API.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApis() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          86,
          89
        ],
        "commit": "5df06c19d6bcb5ceb398d5aa9f040567c466790d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApis[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s).\n * In this case the nested API should be associated to the first processed top level API.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApis() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nested/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nested/list\", \"param\")"
      }
    ],
    "swaggerConflictingNestedApisWithPreferredParent": [
      {
        "has_assertions": true,
        "assertion_lines": [
          103,
          107
        ],
        "commit": "2aece240fb8d258030e917bdc2db0eee5f6afc0e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithPreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case the nested API should be associated to the preferred top level API.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithPreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithPreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          104,
          108
        ],
        "commit": "86735210772b858654fb47becac5cb99af4c64bc",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithPreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case the nested API should be associated to the preferred top level API.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithPreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithPreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          103,
          107
        ],
        "commit": "5df06c19d6bcb5ceb398d5aa9f040567c466790d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithPreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case the nested API should be associated to the preferred top level API.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithPreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithPreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithPreferredParent/list\", \"param\")"
      }
    ],
    "swaggerConflictingNestedApisWithSamePreferredParent": [
      {
        "has_assertions": true,
        "assertion_lines": [
          121,
          125
        ],
        "commit": "2aece240fb8d258030e917bdc2db0eee5f6afc0e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithSamePreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case the preferred parent API is the same as the one otherwise would have been set.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithSamePreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithSamePreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          122,
          126
        ],
        "commit": "86735210772b858654fb47becac5cb99af4c64bc",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithSamePreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case the preferred parent API is the same as the one otherwise would have been set.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithSamePreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithSamePreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          121,
          125
        ],
        "commit": "5df06c19d6bcb5ceb398d5aa9f040567c466790d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithSamePreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case the preferred parent API is the same as the one otherwise would have been set.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithSamePreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithSamePreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel/{param}/nestedWithSamePreferredParent/list\", \"param\")"
      }
    ],
    "swaggerConflictingNestedApisWithBadPreferredParent": [
      {
        "has_assertions": true,
        "assertion_lines": [
          140,
          144
        ],
        "commit": "2aece240fb8d258030e917bdc2db0eee5f6afc0e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithBadPreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case we expect an ignore since NestedWithBadPreferredParentAPI set a preferred parent which\n * does not have it as a child.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithBadPreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithBadPreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          141,
          145
        ],
        "commit": "86735210772b858654fb47becac5cb99af4c64bc",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithBadPreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case we expect an ignore since NestedWithBadPreferredParentAPI set a preferred parent which\n * does not have it as a child.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithBadPreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithBadPreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"param\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          140,
          144
        ],
        "commit": "5df06c19d6bcb5ceb398d5aa9f040567c466790d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerConflictingNestedApisWithBadPreferredParent[]",
        "body": "/**\n * Test conflicting nested API\u0027s (the same API\u0027s are returned from different top level API\u0027s) with\n * {@link SwaggerPreferredParent} annotation.\n * In this case we expect an ignore since NestedWithBadPreferredParentAPI set a preferred parent which\n * does not have it as a child.\n */\n@org.junit.Test\npublic void swaggerConflictingNestedApisWithBadPreferredParent() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.TopLevelAPI.class, org.apache.ambari.swagger.AnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedWithBadPreferredParentAPI.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"param\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel/top\", \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"/toplevel2/anotherTop\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel2/{param}/nestedWithBadPreferredParent/list\", \"param\")"
      }
    ],
    "swaggerNestedApisWithOverwrite": [
      {
        "has_assertions": true,
        "assertion_lines": [
          156,
          159
        ],
        "commit": "2aece240fb8d258030e917bdc2db0eee5f6afc0e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerNestedApisWithOverwrite[]",
        "body": "/**\n * Test nested API which uses {@link org.apache.ambari.annotations.SwaggerOverwriteNestedAPI} annotation.\n * In this case we expect default values to be overwritten by the usage of the annotation.\n */\n@org.junit.Test\npublic void swaggerNestedApisWithOverwrite() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.NestedWithOverwrite.class, org.apache.ambari.swagger.TopLevel4API.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/{foo}/bar/list\", \"/toplevel4/top\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel3/{foo}/bar/list\", \"foo\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/{foo}/bar/list\", \"/toplevel4/top\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel3/{foo}/bar/list\", \"foo\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          157,
          160
        ],
        "commit": "86735210772b858654fb47becac5cb99af4c64bc",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "swaggerNestedApisWithOverwrite[]",
        "body": "/**\n * Test nested API which uses {@link org.apache.ambari.annotations.SwaggerOverwriteNestedAPI} annotation.\n * In this case we expect default values to be overwritten by the usage of the annotation.\n */\n@org.junit.Test\npublic void swaggerNestedApisWithOverwrite() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e classes \u003d new java.util.LinkedHashSet\u003c\u003e(java.util.Arrays.asList(org.apache.ambari.swagger.NestedWithOverwrite.class, org.apache.ambari.swagger.TopLevel4API.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(classes);\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/{foo}/bar/list\", \"/toplevel4/top\"), swagger.getPaths().keySet());\n    org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel3/{foo}/bar/list\", \"foo\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/{foo}/bar/list\", \"/toplevel4/top\"), swagger.getPaths().keySet()), org.apache.ambari.swagger.AmbariSwaggerReaderTest.assertPathParamsExist(swagger, \"/toplevel3/{foo}/bar/list\", \"foo\")"
      }
    ],
    "swaggerApiThatIsBothTopLevelAndNestedIsCountedAsTopLevel": [
      {
        "has_assertions": true,
        "assertion_lines": [
          171
        ],
        "commit": "2aece240fb8d258030e917bdc2db0eee5f6afc0e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "swaggerApiThatIsBothTopLevelAndNestedIsCountedAsTopLevel[]",
        "body": "/**\n * If an API is both top level (the class has a @Path annotation) and nested (class is a return type of an\n * API operation) then it should be treated as top level.\n */\n@org.junit.Test\npublic void swaggerApiThatIsBothTopLevelAndNestedIsCountedAsTopLevel() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(com.google.common.collect.ImmutableSet.of(org.apache.ambari.swagger.YetAnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedAndTopLevelAPI.class));\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/yetAnotherTop\", \"/canBeReachedFromTopToo/list\"), swagger.getPaths().keySet());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/yetAnotherTop\", \"/canBeReachedFromTopToo/list\"), swagger.getPaths().keySet())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          172
        ],
        "commit": "86735210772b858654fb47becac5cb99af4c64bc",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "swaggerApiThatIsBothTopLevelAndNestedIsCountedAsTopLevel[]",
        "body": "/**\n * If an API is both top level (the class has a @Path annotation) and nested (class is a return type of an\n * API operation) then it should be treated as top level.\n */\n@org.junit.Test\npublic void swaggerApiThatIsBothTopLevelAndNestedIsCountedAsTopLevel() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(com.google.common.collect.ImmutableSet.of(org.apache.ambari.swagger.YetAnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedAndTopLevelAPI.class));\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/yetAnotherTop\", \"/canBeReachedFromTopToo/list\"), swagger.getPaths().keySet());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/yetAnotherTop\", \"/canBeReachedFromTopToo/list\"), swagger.getPaths().keySet())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          155
        ],
        "commit": "5df06c19d6bcb5ceb398d5aa9f040567c466790d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "swaggerApiThatIsBothTopLevelAndNestedIsCountedAsTopLevel[]",
        "body": "/**\n * If an API is both top level (the class has a @Path annotation) and nested (class is a return type of an\n * API operation) then it should be treated as top level.\n */\n@org.junit.Test\npublic void swaggerApiThatIsBothTopLevelAndNestedIsCountedAsTopLevel() {\n    org.apache.ambari.swagger.AmbariSwaggerReader asr \u003d new org.apache.ambari.swagger.AmbariSwaggerReader(null, org.easymock.EasyMock.createMock(org.apache.maven.plugin.logging.Log.class));\n    io.swagger.models.Swagger swagger \u003d asr.read(com.google.common.collect.ImmutableSet.of(org.apache.ambari.swagger.YetAnotherTopLevelAPI.class, org.apache.ambari.swagger.NestedAndTopLevelAPI.class));\n    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/yetAnotherTop\", \"/canBeReachedFromTopToo/list\"), swagger.getPaths().keySet());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(\"/toplevel3/yetAnotherTop\", \"/canBeReachedFromTopToo/list\"), swagger.getPaths().keySet())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-views/src/test/java/org/apache/ambari/view/UnsupportedPropertyExceptionTest.java": {
    "testGetType": [
      {
        "has_assertions": true,
        "assertion_lines": [
          35
        ],
        "commit": "89af4f19005c2a87561e2279fed8745a6f8a9645",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetType[]",
        "body": "@org.junit.Test\npublic void testGetType() throws java.lang.Exception {\n    org.apache.ambari.view.UnsupportedPropertyException exception \u003d new org.apache.ambari.view.UnsupportedPropertyException(\"type\", java.util.Collections.singleton(\"p1\"));\n    org.junit.Assert.assertEquals(\"type\", exception.getType());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"type\", exception.getType())"
      }
    ],
    "testGetPropertyIds": [
      {
        "has_assertions": true,
        "assertion_lines": [
          45
        ],
        "commit": "89af4f19005c2a87561e2279fed8745a6f8a9645",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetPropertyIds[]",
        "body": "@org.junit.Test\npublic void testGetPropertyIds() throws java.lang.Exception {\n    java.util.Set\u003cjava.lang.String\u003e ids \u003d new java.util.HashSet\u003cjava.lang.String\u003e();\n    ids.add(\"p1\");\n    ids.add(\"p2\");\n    org.apache.ambari.view.UnsupportedPropertyException exception \u003d new org.apache.ambari.view.UnsupportedPropertyException(\"type\", ids);\n    org.junit.Assert.assertEquals(ids, exception.getPropertyIds());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(ids, exception.getPropertyIds())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java": {
    "testGetServices": [
      {
        "has_assertions": true,
        "assertion_lines": [
          41,
          42,
          43,
          44,
          45,
          46,
          47
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 7,
        "method_signature": "testGetServices[]",
        "body": "@org.junit.Test\npublic void testGetServices() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e services \u003d clusterDefinition.getServices();\n    org.junit.Assert.assertTrue(services.contains(\"HDFS\"));\n    org.junit.Assert.assertTrue(services.contains(\"FLUME\"));\n    org.junit.Assert.assertTrue(services.contains(\"OOZIE\"));\n    org.junit.Assert.assertTrue(services.contains(\"MAPREDUCE\"));\n    org.junit.Assert.assertTrue(services.contains(\"HBASE\"));\n    org.junit.Assert.assertTrue(services.contains(\"ZOOKEEPER\"));\n    org.junit.Assert.assertTrue(services.contains(\"HIVE\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(services.contains(\"HDFS\")), org.junit.Assert.assertTrue(services.contains(\"FLUME\")), org.junit.Assert.assertTrue(services.contains(\"OOZIE\")), org.junit.Assert.assertTrue(services.contains(\"MAPREDUCE\")), org.junit.Assert.assertTrue(services.contains(\"HBASE\")), org.junit.Assert.assertTrue(services.contains(\"ZOOKEEPER\")), org.junit.Assert.assertTrue(services.contains(\"HIVE\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 8,
        "method_signature": "testGetServices[]",
        "body": "@org.junit.Test\npublic void testGetServices() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e services \u003d clusterDefinition.getServices();\n    org.junit.Assert.assertTrue(services.contains(\"HDFS\"));\n    org.junit.Assert.assertTrue(services.contains(\"FLUME\"));\n    org.junit.Assert.assertTrue(services.contains(\"OOZIE\"));\n    org.junit.Assert.assertTrue(services.contains(\"MAPREDUCE\"));\n    org.junit.Assert.assertTrue(services.contains(\"HBASE\"));\n    org.junit.Assert.assertTrue(services.contains(\"ZOOKEEPER\"));\n    org.junit.Assert.assertTrue(services.contains(\"HIVE\"));\n    org.junit.Assert.assertTrue(services.contains(\"WEBHCAT\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(services.contains(\"HDFS\")), org.junit.Assert.assertTrue(services.contains(\"FLUME\")), org.junit.Assert.assertTrue(services.contains(\"OOZIE\")), org.junit.Assert.assertTrue(services.contains(\"MAPREDUCE\")), org.junit.Assert.assertTrue(services.contains(\"HBASE\")), org.junit.Assert.assertTrue(services.contains(\"ZOOKEEPER\")), org.junit.Assert.assertTrue(services.contains(\"HIVE\")), org.junit.Assert.assertTrue(services.contains(\"WEBHCAT\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 8,
        "method_signature": "testGetServices[]",
        "body": "@org.junit.Test\npublic void testGetServices() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e services \u003d clusterDefinition.getServices();\n    org.junit.Assert.assertTrue(services.contains(\"HDFS\"));\n    org.junit.Assert.assertTrue(services.contains(\"FLUME\"));\n    org.junit.Assert.assertTrue(services.contains(\"OOZIE\"));\n    org.junit.Assert.assertTrue(services.contains(\"MAPREDUCE\"));\n    org.junit.Assert.assertTrue(services.contains(\"HBASE\"));\n    org.junit.Assert.assertTrue(services.contains(\"ZOOKEEPER\"));\n    org.junit.Assert.assertTrue(services.contains(\"HIVE\"));\n    org.junit.Assert.assertTrue(services.contains(\"WEBHCAT\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(services.contains(\"HDFS\")), org.junit.Assert.assertTrue(services.contains(\"FLUME\")), org.junit.Assert.assertTrue(services.contains(\"OOZIE\")), org.junit.Assert.assertTrue(services.contains(\"MAPREDUCE\")), org.junit.Assert.assertTrue(services.contains(\"HBASE\")), org.junit.Assert.assertTrue(services.contains(\"ZOOKEEPER\")), org.junit.Assert.assertTrue(services.contains(\"HIVE\")), org.junit.Assert.assertTrue(services.contains(\"WEBHCAT\"))"
      }
    ],
    "testGetHosts": [
      {
        "has_assertions": true,
        "assertion_lines": [
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 13,
        "method_signature": "testGetHosts[]",
        "body": "@org.junit.Test\npublic void testGetHosts() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e hosts \u003d clusterDefinition.getHosts();\n    org.junit.Assert.assertTrue(hosts.contains(\"NAMENODE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"SECONDARY_NAMENODE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE1.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE2.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE3.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"HBASE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"HIVE_SERVER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"JOBTRACKER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"OOZIE_SERVER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave1.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave2.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave3.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"WEBHCAT_MASTER.acme.com\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(hosts.contains(\"NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"SECONDARY_NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE1.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE2.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE3.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"HBASE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"HIVE_SERVER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"JOBTRACKER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"OOZIE_SERVER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave1.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave2.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave3.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"WEBHCAT_MASTER.acme.com\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 13,
        "method_signature": "testGetHosts[]",
        "body": "@org.junit.Test\npublic void testGetHosts() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e hosts \u003d clusterDefinition.getHosts();\n    org.junit.Assert.assertTrue(hosts.contains(\"NAMENODE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"SECONDARY_NAMENODE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE1.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE2.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE3.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"HBASE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"HIVE_SERVER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"JOBTRACKER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"OOZIE_SERVER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave1.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave2.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave3.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"WEBHCAT_MASTER.acme.com\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(hosts.contains(\"NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"SECONDARY_NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE1.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE2.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE3.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"HBASE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"HIVE_SERVER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"JOBTRACKER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"OOZIE_SERVER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave1.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave2.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave3.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"WEBHCAT_MASTER.acme.com\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 13,
        "method_signature": "testGetHosts[]",
        "body": "@org.junit.Test\npublic void testGetHosts() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e hosts \u003d clusterDefinition.getHosts();\n    org.junit.Assert.assertTrue(hosts.contains(\"NAMENODE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"SECONDARY_NAMENODE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE1.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE2.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE3.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"HBASE_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"HIVE_SERVER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"JOBTRACKER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"OOZIE_SERVER_MASTER.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave1.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave2.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"slave3.acme.com\"));\n    org.junit.Assert.assertTrue(hosts.contains(\"WEBHCAT_MASTER.acme.com\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(hosts.contains(\"NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"SECONDARY_NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE1.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE2.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"FLUME_SERVICE3.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"HBASE_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"HIVE_SERVER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"JOBTRACKER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"OOZIE_SERVER_MASTER.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave1.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave2.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"slave3.acme.com\")), org.junit.Assert.assertTrue(hosts.contains(\"WEBHCAT_MASTER.acme.com\"))"
      }
    ],
    "testGetComponents": [
      {
        "has_assertions": true,
        "assertion_lines": [
          76,
          77,
          78,
          81,
          82,
          85,
          88,
          91,
          92,
          95,
          98,
          102,
          103,
          104,
          105,
          106,
          110,
          111,
          112,
          115
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 20,
        "method_signature": "testGetComponents[]",
        "body": "@org.junit.Test\npublic void testGetComponents() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e components \u003d clusterDefinition.getComponents(\"HDFS\");\n    org.junit.Assert.assertTrue(components.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"DATANODE\"));\n    components \u003d clusterDefinition.getComponents(\"MAPREDUCE\");\n    org.junit.Assert.assertTrue(components.contains(\"JOBTRACKER\"));\n    org.junit.Assert.assertTrue(components.contains(\"TASKTRACKER\"));\n    components \u003d clusterDefinition.getComponents(\"FLUME\");\n    org.junit.Assert.assertTrue(components.contains(\"FLUME_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"OOZIE\");\n    org.junit.Assert.assertTrue(components.contains(\"OOZIE_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"HBASE\");\n    org.junit.Assert.assertTrue(components.contains(\"HBASE_MASTER\"));\n    org.junit.Assert.assertTrue(components.contains(\"HBASE_REGIONSERVER\"));\n    components \u003d clusterDefinition.getComponents(\"ZOOKEEPER\");\n    org.junit.Assert.assertTrue(components.contains(\"ZOOKEEPER_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"HIVE\");\n    org.junit.Assert.assertTrue(components.contains(\"HIVE_SERVER\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2_HA.txt\", \"myCluster\", \"HDP-2.0.6\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    components \u003d clusterDefinition.getComponents(\"HDFS\");\n    org.junit.Assert.assertTrue(components.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"DATANODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"ZKFC\"));\n    org.junit.Assert.assertTrue(components.contains(\"JOURNALNODE\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP21_HA.txt\", \"myCluster\", \"HDP-2.1.2\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    components \u003d clusterDefinition.getComponents(\"HDFS\");\n    org.junit.Assert.assertTrue(components.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"ZKFC\"));\n    org.junit.Assert.assertTrue(components.contains(\"JOURNALNODE\"));\n    components \u003d clusterDefinition.getComponents(\"YARN\");\n    org.junit.Assert.assertTrue(components.contains(\"RESOURCEMANAGER\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(components.contains(\"NAMENODE\")), org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(components.contains(\"DATANODE\")), org.junit.Assert.assertTrue(components.contains(\"JOBTRACKER\")), org.junit.Assert.assertTrue(components.contains(\"TASKTRACKER\")), org.junit.Assert.assertTrue(components.contains(\"FLUME_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"OOZIE_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"HBASE_MASTER\")), org.junit.Assert.assertTrue(components.contains(\"HBASE_REGIONSERVER\")), org.junit.Assert.assertTrue(components.contains(\"ZOOKEEPER_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"HIVE_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"ZKFC\")), org.junit.Assert.assertTrue(components.contains(\"JOURNALNODE\")), org.junit.Assert.assertTrue(components.contains(\"RESOURCEMANAGER\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          77,
          78,
          79,
          82,
          83,
          86,
          89,
          92,
          95,
          96,
          99,
          102,
          106,
          107,
          108,
          109,
          110,
          114,
          115,
          116,
          119
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 21,
        "method_signature": "testGetComponents[]",
        "body": "@org.junit.Test\npublic void testGetComponents() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e components \u003d clusterDefinition.getComponents(\"HDFS\");\n    org.junit.Assert.assertTrue(components.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"DATANODE\"));\n    components \u003d clusterDefinition.getComponents(\"MAPREDUCE\");\n    org.junit.Assert.assertTrue(components.contains(\"JOBTRACKER\"));\n    org.junit.Assert.assertTrue(components.contains(\"TASKTRACKER\"));\n    components \u003d clusterDefinition.getComponents(\"FLUME\");\n    org.junit.Assert.assertTrue(components.contains(\"FLUME_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"OOZIE\");\n    org.junit.Assert.assertTrue(components.contains(\"OOZIE_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"WEBHCAT\");\n    org.junit.Assert.assertTrue(components.contains(\"WEBHCAT_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"HBASE\");\n    org.junit.Assert.assertTrue(components.contains(\"HBASE_MASTER\"));\n    org.junit.Assert.assertTrue(components.contains(\"HBASE_REGIONSERVER\"));\n    components \u003d clusterDefinition.getComponents(\"ZOOKEEPER\");\n    org.junit.Assert.assertTrue(components.contains(\"ZOOKEEPER_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"HIVE\");\n    org.junit.Assert.assertTrue(components.contains(\"HIVE_SERVER\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2_HA.txt\", \"myCluster\", \"HDP-2.0.6\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    components \u003d clusterDefinition.getComponents(\"HDFS\");\n    org.junit.Assert.assertTrue(components.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"DATANODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"ZKFC\"));\n    org.junit.Assert.assertTrue(components.contains(\"JOURNALNODE\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP21_HA.txt\", \"myCluster\", \"HDP-2.1.2\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    components \u003d clusterDefinition.getComponents(\"HDFS\");\n    org.junit.Assert.assertTrue(components.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"ZKFC\"));\n    org.junit.Assert.assertTrue(components.contains(\"JOURNALNODE\"));\n    components \u003d clusterDefinition.getComponents(\"YARN\");\n    org.junit.Assert.assertTrue(components.contains(\"RESOURCEMANAGER\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(components.contains(\"NAMENODE\")), org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(components.contains(\"DATANODE\")), org.junit.Assert.assertTrue(components.contains(\"JOBTRACKER\")), org.junit.Assert.assertTrue(components.contains(\"TASKTRACKER\")), org.junit.Assert.assertTrue(components.contains(\"FLUME_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"OOZIE_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"WEBHCAT_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"HBASE_MASTER\")), org.junit.Assert.assertTrue(components.contains(\"HBASE_REGIONSERVER\")), org.junit.Assert.assertTrue(components.contains(\"ZOOKEEPER_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"HIVE_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"ZKFC\")), org.junit.Assert.assertTrue(components.contains(\"JOURNALNODE\")), org.junit.Assert.assertTrue(components.contains(\"RESOURCEMANAGER\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          77,
          78,
          79,
          82,
          83,
          86,
          89,
          92,
          95,
          96,
          99,
          102,
          106,
          107,
          108,
          109,
          113
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 17,
        "method_signature": "testGetComponents[]",
        "body": "@org.junit.Test\npublic void testGetComponents() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e components \u003d clusterDefinition.getComponents(\"HDFS\");\n    org.junit.Assert.assertTrue(components.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"DATANODE\"));\n    components \u003d clusterDefinition.getComponents(\"MAPREDUCE\");\n    org.junit.Assert.assertTrue(components.contains(\"JOBTRACKER\"));\n    org.junit.Assert.assertTrue(components.contains(\"TASKTRACKER\"));\n    components \u003d clusterDefinition.getComponents(\"FLUME\");\n    org.junit.Assert.assertTrue(components.contains(\"FLUME_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"OOZIE\");\n    org.junit.Assert.assertTrue(components.contains(\"OOZIE_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"WEBHCAT\");\n    org.junit.Assert.assertTrue(components.contains(\"WEBHCAT_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"HBASE\");\n    org.junit.Assert.assertTrue(components.contains(\"HBASE_MASTER\"));\n    org.junit.Assert.assertTrue(components.contains(\"HBASE_REGIONSERVER\"));\n    components \u003d clusterDefinition.getComponents(\"ZOOKEEPER\");\n    org.junit.Assert.assertTrue(components.contains(\"ZOOKEEPER_SERVER\"));\n    components \u003d clusterDefinition.getComponents(\"HIVE\");\n    org.junit.Assert.assertTrue(components.contains(\"HIVE_SERVER\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2_HA.txt\", \"myCluster\", \"HDP-2.0.6\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    components \u003d clusterDefinition.getComponents(\"HDFS\");\n    org.junit.Assert.assertTrue(components.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"DATANODE\"));\n    org.junit.Assert.assertTrue(components.contains(\"ZKFC\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP21_HA.txt\", \"myCluster\", \"HDP-2.1.2\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    components \u003d clusterDefinition.getComponents(\"YARN\");\n    org.junit.Assert.assertTrue(components.contains(\"RESOURCEMANAGER\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(components.contains(\"NAMENODE\")), org.junit.Assert.assertTrue(components.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(components.contains(\"DATANODE\")), org.junit.Assert.assertTrue(components.contains(\"JOBTRACKER\")), org.junit.Assert.assertTrue(components.contains(\"TASKTRACKER\")), org.junit.Assert.assertTrue(components.contains(\"FLUME_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"OOZIE_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"WEBHCAT_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"HBASE_MASTER\")), org.junit.Assert.assertTrue(components.contains(\"HBASE_REGIONSERVER\")), org.junit.Assert.assertTrue(components.contains(\"ZOOKEEPER_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"HIVE_SERVER\")), org.junit.Assert.assertTrue(components.contains(\"ZKFC\")), org.junit.Assert.assertTrue(components.contains(\"RESOURCEMANAGER\"))"
      }
    ],
    "testGetHostComponents": [
      {
        "has_assertions": true,
        "assertion_lines": [
          124,
          128,
          132,
          136,
          137,
          138,
          139,
          140,
          143,
          144,
          145,
          146,
          147,
          151,
          154,
          155,
          158,
          161,
          162
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 19,
        "method_signature": "testGetHostComponents[]",
        "body": "@org.junit.Test\npublic void testGetHostComponents() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"NAMENODE_MASTER.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"slave1.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"slave2.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2_HA.txt\", \"myCluster\", \"HDP-2.0.6\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\"));\n    org.junit.Assert.assertFalse(hostComponents.contains(\"DATANODE\"));\n    org.junit.Assert.assertFalse(hostComponents.contains(\"SECONDARY_NAMENODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"SECONDARY_NAMENODE\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP21_HA.txt\", \"myCluster\", \"HDP-2.1.2\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    hostComponents \u003d clusterDefinition.getHostComponents(\"YARN\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"YARN\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\")), org.junit.Assert.assertFalse(hostComponents.contains(\"DATANODE\")), org.junit.Assert.assertFalse(hostComponents.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          128,
          132,
          136,
          140,
          141,
          142,
          143,
          144,
          147,
          148,
          149,
          150,
          151,
          155,
          158,
          159,
          162,
          165,
          166
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 19,
        "method_signature": "testGetHostComponents[]",
        "body": "@org.junit.Test\npublic void testGetHostComponents() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"NAMENODE_MASTER.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"slave1.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"slave2.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2_HA.txt\", \"myCluster\", \"HDP-2.0.6\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\"));\n    org.junit.Assert.assertFalse(hostComponents.contains(\"DATANODE\"));\n    org.junit.Assert.assertFalse(hostComponents.contains(\"SECONDARY_NAMENODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"SECONDARY_NAMENODE\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP21_HA.txt\", \"myCluster\", \"HDP-2.1.2\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    hostComponents \u003d clusterDefinition.getHostComponents(\"YARN\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"YARN\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\")), org.junit.Assert.assertFalse(hostComponents.contains(\"DATANODE\")), org.junit.Assert.assertFalse(hostComponents.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          122,
          126,
          130,
          134,
          135,
          136,
          137,
          138,
          141,
          142,
          143,
          144,
          145,
          149,
          152,
          155,
          158
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 17,
        "method_signature": "testGetHostComponents[]",
        "body": "@org.junit.Test\npublic void testGetHostComponents() throws java.lang.Exception {\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    java.util.Set\u003cjava.lang.String\u003e hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"NAMENODE_MASTER.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"slave1.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"slave2.acme.com\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2_HA.txt\", \"myCluster\", \"HDP-2.0.6\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\"));\n    org.junit.Assert.assertFalse(hostComponents.contains(\"DATANODE\"));\n    org.junit.Assert.assertFalse(hostComponents.contains(\"SECONDARY_NAMENODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\"));\n    org.junit.Assert.assertTrue(hostComponents.contains(\"SECONDARY_NAMENODE\"));\n    clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP21_HA.txt\", \"myCluster\", \"HDP-2.1.2\"), new org.apache.ambari.scom.TestHostInfoProvider());\n    hostComponents \u003d clusterDefinition.getHostComponents(\"YARN\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-1\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"YARN\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"));\n    hostComponents \u003d clusterDefinition.getHostComponents(\"HDFS\", \"WINHDP-2\");\n    org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(hostComponents.contains(\"NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"DATANODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"JOURNALNODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"ZKFC\")), org.junit.Assert.assertFalse(hostComponents.contains(\"DATANODE\")), org.junit.Assert.assertFalse(hostComponents.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"SECONDARY_NAMENODE\")), org.junit.Assert.assertTrue(hostComponents.contains(\"RESOURCEMANAGER\"))"
      }
    ],
    "testGetHostState": [
      {
        "has_assertions": true,
        "assertion_lines": [
          172,
          175,
          178,
          181
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetHostState[]",
        "body": "@org.junit.Test\npublic void testGetHostState() throws java.lang.Exception {\n    TestStateProvider stateProvider \u003d new TestStateProvider();\n    org.apache.ambari.scom.TestClusterDefinitionProvider definitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    org.apache.ambari.scom.TestHostInfoProvider hostInfoProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(stateProvider, definitionProvider, hostInfoProvider);\n    org.junit.Assert.assertEquals(\"HEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Stopped);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Paused);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Unknown);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"HEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          176,
          179,
          182,
          185
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetHostState[]",
        "body": "@org.junit.Test\npublic void testGetHostState() throws java.lang.Exception {\n    TestStateProvider stateProvider \u003d new TestStateProvider();\n    org.apache.ambari.scom.TestClusterDefinitionProvider definitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    org.apache.ambari.scom.TestHostInfoProvider hostInfoProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(stateProvider, definitionProvider, hostInfoProvider);\n    org.junit.Assert.assertEquals(\"HEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Stopped);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Paused);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Unknown);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"HEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          168,
          171,
          174,
          177
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetHostState[]",
        "body": "@org.junit.Test\npublic void testGetHostState() throws java.lang.Exception {\n    TestStateProvider stateProvider \u003d new TestStateProvider();\n    org.apache.ambari.scom.TestClusterDefinitionProvider definitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    org.apache.ambari.scom.TestHostInfoProvider hostInfoProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(stateProvider, definitionProvider, hostInfoProvider);\n    org.junit.Assert.assertEquals(\"HEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Stopped);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Paused);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n    stateProvider.setState(StateProvider.State.Unknown);\n    org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"HEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\")), org.junit.Assert.assertEquals(\"UNHEALTHY\", clusterDefinition.getHostState(\"NAMENODE_MASTER.acme.com\"))"
      }
    ],
    "testSetServiceState_IfStateAlreadySetToDesired": [
      {
        "has_assertions": true,
        "assertion_lines": [
          200
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfStateAlreadySetToDesired[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfStateAlreadySetToDesired() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Running).times(5);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          204
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfStateAlreadySetToDesired[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfStateAlreadySetToDesired() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Running).times(5);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          196
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfStateAlreadySetToDesired[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfStateAlreadySetToDesired() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Running).times(5);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      }
    ],
    "testSetServiceState_IfStateUnknown": [
      {
        "has_assertions": true,
        "assertion_lines": [
          220
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfStateUnknown[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfStateUnknown() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"UNKNOWN\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"UNKNOWN\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          224
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfStateUnknown[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfStateUnknown() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"UNKNOWN\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"UNKNOWN\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          216
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfStateUnknown[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfStateUnknown() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"UNKNOWN\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"HDFS\", \"UNKNOWN\"))"
      }
    ],
    "testSetServiceState_FromInstalledToStarted": [
      {
        "has_assertions": true,
        "assertion_lines": [
          253
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_FromInstalledToStarted[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_FromInstalledToStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    // checking if a service state already set\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    // checking if a component state not set yet\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          257
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_FromInstalledToStarted[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_FromInstalledToStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    // checking if a service state already set\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    // checking if a component state not set yet\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          249
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_FromInstalledToStarted[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_FromInstalledToStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    // checking if a service state already set\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    // checking if a component state not set yet\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      }
    ],
    "testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted": [
      {
        "has_assertions": true,
        "assertion_lines": [
          279
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted[]",
        "body": "@org.junit.Test\npublic void testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    // checking if a service state already set\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    // checking if a component state not set yet\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Running).times(4);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          283
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted[]",
        "body": "@org.junit.Test\npublic void testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    // checking if a service state already set\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    // checking if a component state not set yet\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Running).times(4);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          275
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted[]",
        "body": "@org.junit.Test\npublic void testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    // checking if a service state already set\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    // checking if a component state not set yet\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Running).times(4);\n    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(\"HDFS\", \"STARTED\"))"
      }
    ],
    "testSetHostComponentState_IfStateUnknown": [
      {
        "has_assertions": true,
        "assertion_lines": [
          299
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfStateUnknown[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfStateUnknown() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"UNKNOWN\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"UNKNOWN\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          303
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfStateUnknown[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfStateUnknown() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"UNKNOWN\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"UNKNOWN\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          295
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfStateUnknown[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfStateUnknown() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"UNKNOWN\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"UNKNOWN\"))"
      }
    ],
    "testSetHostComponentState_IfStateAlreadySetToDesired": [
      {
        "has_assertions": true,
        "assertion_lines": [
          321
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfStateAlreadySetToDesired[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfStateAlreadySetToDesired() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(isA(java.lang.String.class), isA(java.lang.String.class))).andReturn(StateProvider.State.Running);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          325
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfStateAlreadySetToDesired[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfStateAlreadySetToDesired() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(isA(java.lang.String.class), isA(java.lang.String.class))).andReturn(StateProvider.State.Running);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          317
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfStateAlreadySetToDesired[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfStateAlreadySetToDesired() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(isA(java.lang.String.class), isA(java.lang.String.class))).andReturn(StateProvider.State.Running);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"))"
      }
    ],
    "testSetHostComponentState_FromInstalledToStarted": [
      {
        "has_assertions": true,
        "assertion_lines": [
          344
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_FromInstalledToStarted[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_FromInstalledToStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(isA(java.lang.String.class), isA(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          348
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_FromInstalledToStarted[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_FromInstalledToStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(isA(java.lang.String.class), isA(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          340
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_FromInstalledToStarted[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_FromInstalledToStarted() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockStateProvider.getRunningState(isA(java.lang.String.class), isA(java.lang.String.class))).andReturn(StateProvider.State.Stopped);\n    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(StateProvider.State.Running))).andReturn(null);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, clusterDefinition.setHostComponentState(\"hostName\", \"DATANODE\", \"STARTED\"))"
      }
    ],
    "testHDP2ServicesAndComponents": [
      {
        "has_assertions": true,
        "assertion_lines": [
          364,
          365,
          366,
          367,
          368,
          369,
          370,
          371,
          372
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 9,
        "method_signature": "testHDP2ServicesAndComponents[]",
        "body": "@org.junit.Test\npublic void testHDP2ServicesAndComponents() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2.txt\", \"myCluster\", \"HDP-2.0.6\");\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertFalse(clusterDefinition.getServices().contains(\"MAPREDUCE\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"PIG\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"SQOOP\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"YARN\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"MAPREDUCE2\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"MAPREDUCE2\").contains(\"MAPREDUCE2_CLIENT\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"NODEMANAGER\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"RESOURCEMANAGER\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"YARN_CLIENT\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertFalse(clusterDefinition.getServices().contains(\"MAPREDUCE\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"PIG\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"SQOOP\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"YARN\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"MAPREDUCE2\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"MAPREDUCE2\").contains(\"MAPREDUCE2_CLIENT\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"NODEMANAGER\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"RESOURCEMANAGER\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"YARN_CLIENT\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          368,
          369,
          370,
          371,
          372,
          373,
          374,
          375,
          376
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 9,
        "method_signature": "testHDP2ServicesAndComponents[]",
        "body": "@org.junit.Test\npublic void testHDP2ServicesAndComponents() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2.txt\", \"myCluster\", \"HDP-2.0.6\");\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertFalse(clusterDefinition.getServices().contains(\"MAPREDUCE\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"PIG\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"SQOOP\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"YARN\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"MAPREDUCE2\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"MAPREDUCE2\").contains(\"MAPREDUCE2_CLIENT\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"NODEMANAGER\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"RESOURCEMANAGER\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"YARN_CLIENT\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertFalse(clusterDefinition.getServices().contains(\"MAPREDUCE\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"PIG\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"SQOOP\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"YARN\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"MAPREDUCE2\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"MAPREDUCE2\").contains(\"MAPREDUCE2_CLIENT\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"NODEMANAGER\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"RESOURCEMANAGER\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"YARN_CLIENT\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          360,
          361,
          362,
          363,
          364,
          365,
          366,
          367,
          368
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 9,
        "method_signature": "testHDP2ServicesAndComponents[]",
        "body": "@org.junit.Test\npublic void testHDP2ServicesAndComponents() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2.txt\", \"myCluster\", \"HDP-2.0.6\");\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertFalse(clusterDefinition.getServices().contains(\"MAPREDUCE\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"PIG\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"SQOOP\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"YARN\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"MAPREDUCE2\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"MAPREDUCE2\").contains(\"MAPREDUCE2_CLIENT\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"NODEMANAGER\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"RESOURCEMANAGER\"));\n    org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"YARN_CLIENT\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertFalse(clusterDefinition.getServices().contains(\"MAPREDUCE\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"PIG\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"SQOOP\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"YARN\")), org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(\"MAPREDUCE2\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"MAPREDUCE2\").contains(\"MAPREDUCE2_CLIENT\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"NODEMANAGER\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"RESOURCEMANAGER\")), org.junit.Assert.assertTrue(clusterDefinition.getComponents(\"YARN\").contains(\"YARN_CLIENT\"))"
      }
    ],
    "testSetServiceState_IfServiceIsClientOnly": [
      {
        "has_assertions": true,
        "assertion_lines": [
          392
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfServiceIsClientOnly[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfServiceIsClientOnly() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"PIG\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"PIG\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          396
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfServiceIsClientOnly[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfServiceIsClientOnly() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"PIG\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"PIG\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          388
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetServiceState_IfServiceIsClientOnly[]",
        "body": "@org.junit.Test\npublic void testSetServiceState_IfServiceIsClientOnly() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"PIG\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(\"PIG\", \"STARTED\"))"
      }
    ],
    "testSetHostComponentState_IfHostComponentIsClientOnly": [
      {
        "has_assertions": true,
        "assertion_lines": [
          412
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfHostComponentIsClientOnly[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfHostComponentIsClientOnly() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"SQOOP\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"SQOOP\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          416
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfHostComponentIsClientOnly[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfHostComponentIsClientOnly() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"SQOOP\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"SQOOP\", \"STARTED\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          408
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetHostComponentState_IfHostComponentIsClientOnly[]",
        "body": "@org.junit.Test\npublic void testSetHostComponentState_IfHostComponentIsClientOnly() {\n    StateProvider mockStateProvider \u003d createStrictMock(org.apache.ambari.msi.StateProvider.class);\n    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider \u003d createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);\n    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider \u003d createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider();\n    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);\n    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);\n    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);\n    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"SQOOP\", \"STARTED\"));\n    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(\"hostName\", \"SQOOP\", \"STARTED\"))"
      }
    ],
    "testGetMajorStackVersion": [
      {
        "has_assertions": true,
        "assertion_lines": [
          425,
          426
        ],
        "commit": "601014ed8b047c676ece41016a3278c19703794f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testGetMajorStackVersion[]",
        "body": "@org.junit.Test\npublic void testGetMajorStackVersion() {\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2.txt\", \"myCluster\", \"HDP-2.0.6\");\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), testClusterDefinitionProvider, new org.apache.ambari.scom.TestHostInfoProvider());\n    java.lang.Integer majorVersion \u003d clusterDefinition.getMajorStackVersion();\n    java.lang.Integer minorVersion \u003d clusterDefinition.getMinorStackVersion();\n    org.junit.Assert.assertTrue(2 \u003d\u003d majorVersion);\n    org.junit.Assert.assertTrue(0 \u003d\u003d minorVersion);\n}",
        "assertion_type": "org.junit.Assert.assertTrue(2 \u003d\u003d majorVersion), org.junit.Assert.assertTrue(0 \u003d\u003d minorVersion)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          429,
          430
        ],
        "commit": "dc917a9f275710f458d60f1552a749a3f52db3db",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testGetMajorStackVersion[]",
        "body": "@org.junit.Test\npublic void testGetMajorStackVersion() {\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2.txt\", \"myCluster\", \"HDP-2.0.6\");\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), testClusterDefinitionProvider, new org.apache.ambari.scom.TestHostInfoProvider());\n    java.lang.Integer majorVersion \u003d clusterDefinition.getMajorStackVersion();\n    java.lang.Integer minorVersion \u003d clusterDefinition.getMinorStackVersion();\n    org.junit.Assert.assertTrue(2 \u003d\u003d majorVersion);\n    org.junit.Assert.assertTrue(0 \u003d\u003d minorVersion);\n}",
        "assertion_type": "org.junit.Assert.assertTrue(2 \u003d\u003d majorVersion), org.junit.Assert.assertTrue(0 \u003d\u003d minorVersion)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          421,
          422
        ],
        "commit": "d5453695e19ff8b4aa7e1fd01318b7d8193f9699",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testGetMajorStackVersion[]",
        "body": "@org.junit.Test\npublic void testGetMajorStackVersion() {\n    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider \u003d new org.apache.ambari.scom.TestClusterDefinitionProvider(\"clusterproperties_HDP2.txt\", \"myCluster\", \"HDP-2.0.6\");\n    ClusterDefinition clusterDefinition \u003d new ClusterDefinition(new TestStateProvider(), testClusterDefinitionProvider, new org.apache.ambari.scom.TestHostInfoProvider());\n    java.lang.Integer majorVersion \u003d clusterDefinition.getMajorStackVersion();\n    java.lang.Integer minorVersion \u003d clusterDefinition.getMinorStackVersion();\n    org.junit.Assert.assertTrue(2 \u003d\u003d majorVersion);\n    org.junit.Assert.assertTrue(0 \u003d\u003d minorVersion);\n}",
        "assertion_type": "org.junit.Assert.assertTrue(2 \u003d\u003d majorVersion), org.junit.Assert.assertTrue(0 \u003d\u003d minorVersion)"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLPropertyProviderTest.java": {
    "testPopulateResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          111,
          113,
          117
        ],
        "commit": "848e78742452f5f66c97435035210470ebdf288a",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources[]",
        "body": "@org.junit.Test\npublic void testPopulateResources() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, \"HDFS\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, 20L, 1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);\n    }\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          108,
          110,
          114
        ],
        "commit": "a3403e5d625657fd4494edc66c5cd64f45da5c55",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources[]",
        "body": "@org.junit.Test\npublic void testPopulateResources() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, 20L, 1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n    }\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          107,
          109,
          113
        ],
        "commit": "b84b0732aa09092721a27e9bc701e5926e21a227",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources[]",
        "body": "@org.junit.Test\npublic void testPopulateResources() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.PreparedStatement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.PreparedStatement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.prepareStatement(((java.lang.String) (org.easymock.EasyMock.anyObject())))).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery()).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, 20L, 1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n    }\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n}"
      }
    ],
    "testPopulateResources_temporalStartTimeOnly": [
      {
        "has_assertions": true,
        "assertion_lines": [
          179,
          181,
          185
        ],
        "commit": "848e78742452f5f66c97435035210470ebdf288a",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_temporalStartTimeOnly[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_temporalStartTimeOnly() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, \"HDFS\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);\n    }\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          174,
          176,
          180
        ],
        "commit": "a3403e5d625657fd4494edc66c5cd64f45da5c55",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_temporalStartTimeOnly[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_temporalStartTimeOnly() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n    }\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          173,
          175,
          179
        ],
        "commit": "b84b0732aa09092721a27e9bc701e5926e21a227",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_temporalStartTimeOnly[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_temporalStartTimeOnly() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.PreparedStatement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.PreparedStatement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.prepareStatement(((java.lang.String) (org.easymock.EasyMock.anyObject())))).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery()).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n    }\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n}"
      }
    ],
    "testPopulateResources_hostNameProperty": [
      {
        "has_assertions": true,
        "assertion_lines": [
          249,
          250,
          251
        ],
        "commit": "848e78742452f5f66c97435035210470ebdf288a",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_hostNameProperty[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_hostNameProperty() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, \"HDFS\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    provider.populateResources(java.util.Collections.singleton(resource), request, null);\n    org.junit.Assert.assertEquals(\"domU-12-31-39-0E-34-E1.compute-1.internal\", hostProvider.getHostId());\n    org.junit.Assert.assertNull(hostProvider.getClusterName());\n    org.junit.Assert.assertNull(hostProvider.getComponentName());\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"domU-12-31-39-0E-34-E1.compute-1.internal\", hostProvider.getHostId()), org.junit.Assert.assertNull(hostProvider.getClusterName()), org.junit.Assert.assertNull(hostProvider.getComponentName())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          242,
          243,
          244
        ],
        "commit": "a3403e5d625657fd4494edc66c5cd64f45da5c55",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_hostNameProperty[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_hostNameProperty() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    provider.populateResources(java.util.Collections.singleton(resource), request, null);\n    org.junit.Assert.assertEquals(\"domU-12-31-39-0E-34-E1.compute-1.internal\", hostProvider.getHostId());\n    org.junit.Assert.assertNull(hostProvider.getClusterName());\n    org.junit.Assert.assertNull(hostProvider.getComponentName());\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"domU-12-31-39-0E-34-E1.compute-1.internal\", hostProvider.getHostId()), org.junit.Assert.assertNull(hostProvider.getClusterName()), org.junit.Assert.assertNull(hostProvider.getComponentName())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          241,
          242,
          243
        ],
        "commit": "b84b0732aa09092721a27e9bc701e5926e21a227",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_hostNameProperty[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_hostNameProperty() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.PreparedStatement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.PreparedStatement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.prepareStatement(((java.lang.String) (org.easymock.EasyMock.anyObject())))).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery()).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    provider.populateResources(java.util.Collections.singleton(resource), request, null);\n    org.junit.Assert.assertEquals(\"domU-12-31-39-0E-34-E1.compute-1.internal\", hostProvider.getHostId());\n    org.junit.Assert.assertNull(hostProvider.getClusterName());\n    org.junit.Assert.assertNull(hostProvider.getComponentName());\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"domU-12-31-39-0E-34-E1.compute-1.internal\", hostProvider.getHostId()), org.junit.Assert.assertNull(hostProvider.getClusterName()), org.junit.Assert.assertNull(hostProvider.getComponentName())"
      }
    ],
    "testPopulateResources_noHostNameProperty": [
      {
        "has_assertions": true,
        "assertion_lines": [
          311,
          312,
          313
        ],
        "commit": "848e78742452f5f66c97435035210470ebdf288a",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_noHostNameProperty[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_noHostNameProperty() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, null, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, \"HDFS\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    provider.populateResources(java.util.Collections.singleton(resource), request, null);\n    org.junit.Assert.assertNull(hostProvider.getHostId());\n    org.junit.Assert.assertEquals(\"c1\", hostProvider.getClusterName());\n    org.junit.Assert.assertEquals(\"DATANODE\", hostProvider.getComponentName());\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertNull(hostProvider.getHostId()), org.junit.Assert.assertEquals(\"c1\", hostProvider.getClusterName()), org.junit.Assert.assertEquals(\"DATANODE\", hostProvider.getComponentName())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          302,
          303,
          304
        ],
        "commit": "a3403e5d625657fd4494edc66c5cd64f45da5c55",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_noHostNameProperty[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_noHostNameProperty() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, null, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    provider.populateResources(java.util.Collections.singleton(resource), request, null);\n    org.junit.Assert.assertNull(hostProvider.getHostId());\n    org.junit.Assert.assertEquals(\"c1\", hostProvider.getClusterName());\n    org.junit.Assert.assertEquals(\"DATANODE\", hostProvider.getComponentName());\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertNull(hostProvider.getHostId()), org.junit.Assert.assertEquals(\"c1\", hostProvider.getClusterName()), org.junit.Assert.assertEquals(\"DATANODE\", hostProvider.getComponentName())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          301,
          302,
          303
        ],
        "commit": "b84b0732aa09092721a27e9bc701e5926e21a227",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testPopulateResources_noHostNameProperty[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_noHostNameProperty() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.PreparedStatement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.PreparedStatement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.prepareStatement(((java.lang.String) (org.easymock.EasyMock.anyObject())))).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery()).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.TestHostInfoProvider hostProvider \u003d new org.apache.ambari.scom.TestHostInfoProvider();\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, null, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);\n    provider.populateResources(java.util.Collections.singleton(resource), request, null);\n    org.junit.Assert.assertNull(hostProvider.getHostId());\n    org.junit.Assert.assertEquals(\"c1\", hostProvider.getClusterName());\n    org.junit.Assert.assertEquals(\"DATANODE\", hostProvider.getComponentName());\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertNull(hostProvider.getHostId()), org.junit.Assert.assertEquals(\"c1\", hostProvider.getClusterName()), org.junit.Assert.assertEquals(\"DATANODE\", hostProvider.getComponentName())"
      }
    ],
    "testPopulateResources_pointInTime": [
      {
        "has_assertions": true,
        "assertion_lines": [
          393,
          396
        ],
        "commit": "848e78742452f5f66c97435035210470ebdf288a",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testPopulateResources_pointInTime[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_pointInTime() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"TagPairs\")).andReturn(\"\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"TagPairs\")).andReturn(\"\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"TagPairs\")).andReturn(\"\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"TagPairs\")).andReturn(\"\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, \"HDFS\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    // should be the last value of the time series...\n    org.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2));\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), // should be the last value of the time series...\norg.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          378,
          381
        ],
        "commit": "a3403e5d625657fd4494edc66c5cd64f45da5c55",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testPopulateResources_pointInTime[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_pointInTime() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    // should be the last value of the time series...\n    org.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2));\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), // should be the last value of the time series...\norg.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          357,
          360
        ],
        "commit": "b84b0732aa09092721a27e9bc701e5926e21a227",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testPopulateResources_pointInTime[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_pointInTime() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.PreparedStatement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.PreparedStatement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.prepareStatement(((java.lang.String) (org.easymock.EasyMock.anyObject())))).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery()).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // only ask for one property\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2), temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    // should be the last value of the time series...\n    org.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2));\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), // should be the last value of the time series...\norg.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2))"
      }
    ],
    "testPopulateResources_multi": [
      {
        "has_assertions": true,
        "assertion_lines": [
          484,
          487,
          491,
          497
        ],
        "commit": "848e78742452f5f66c97435035210470ebdf288a",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testPopulateResources_multi[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_multi() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"TagPairs\")).andReturn(\"\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcQueueTime_avg_time\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"TagPairs\")).andReturn(\"\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcQueueTime_avg_time\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"TagPairs\")).andReturn(\"\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"TagPairs\")).andReturn(\"\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, \"HDFS\");\n    // ask for two properties ... on temporal, one point in time\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, 20L, 1L));\n    java.util.Set\u003cjava.lang.String\u003e propertyIds \u003d new java.util.LinkedHashSet\u003cjava.lang.String\u003e();\n    propertyIds.add(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1);\n    propertyIds.add(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2);\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(propertyIds, temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    // check the temporal value\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);\n    }\n    // check the point in time value ... should be the last value of the time series...\n    org.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2));\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), // check the temporal value\norg.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);\n}, // check the point in time value ... should be the last value of the time series...\norg.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          463,
          466,
          470,
          476
        ],
        "commit": "a3403e5d625657fd4494edc66c5cd64f45da5c55",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testPopulateResources_multi[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_multi() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.Statement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.Statement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.createStatement()).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery(org.easymock.EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcQueueTime_avg_time\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcQueueTime_avg_time\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeContext\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"RecordTypeName\")).andReturn(\"rpc\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"MetricName\")).andReturn(\"RpcSlowResponse_num_ops\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"ServiceName\")).andReturn(\"datanode\");\n    org.easymock.EasyMock.expect(resultSet.getString(\"NodeName\")).andReturn(\"host1\");\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // ask for two properties ... on temporal, one point in time\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, 20L, 1L));\n    java.util.Set\u003cjava.lang.String\u003e propertyIds \u003d new java.util.LinkedHashSet\u003cjava.lang.String\u003e();\n    propertyIds.add(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1);\n    propertyIds.add(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2);\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(propertyIds, temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    // check the temporal value\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n    }\n    // check the point in time value ... should be the last value of the time series...\n    org.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2));\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), // check the temporal value\norg.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n}, // check the point in time value ... should be the last value of the time series...\norg.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          424,
          427,
          431,
          437
        ],
        "commit": "b84b0732aa09092721a27e9bc701e5926e21a227",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testPopulateResources_multi[]",
        "body": "@org.junit.Test\npublic void testPopulateResources_multi() throws java.lang.Exception {\n    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.PreparedStatement statement \u003d org.easymock.EasyMock.createNiceMock(java.sql.PreparedStatement.class);\n    java.sql.ResultSet resultSet \u003d org.easymock.EasyMock.createNiceMock(java.sql.ResultSet.class);\n    // set expectations\n    org.easymock.EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();\n    org.easymock.EasyMock.expect(connection.prepareStatement(((java.lang.String) (org.easymock.EasyMock.anyObject())))).andReturn(statement).once();\n    org.easymock.EasyMock.expect(statement.executeQuery()).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999990L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"0\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999991L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"1\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    org.easymock.EasyMock.expect(statement.executeQuery()).andReturn(resultSet).once();\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999992L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"2\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(true);\n    org.easymock.EasyMock.expect(resultSet.getLong(\"RecordTimeStamp\")).andReturn(999993L);\n    org.easymock.EasyMock.expect(resultSet.getNString(\"MetricValue\")).andReturn(\"3\");\n    org.easymock.EasyMock.expect(resultSet.next()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(connectionFactory, connection, statement, resultSet);\n    org.apache.ambari.scom.SQLPropertyProvider provider \u003d new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, connectionFactory);\n    // namenode\n    org.apache.ambari.server.controller.spi.Resource resource \u003d new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n    // ask for two properties ... on temporal, one point in time\n    java.util.Map\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e temporalInfoMap \u003d new java.util.HashMap\u003cjava.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo\u003e();\n    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, 20L, 1L));\n    java.util.Set\u003cjava.lang.String\u003e propertyIds \u003d new java.util.LinkedHashSet\u003cjava.lang.String\u003e();\n    propertyIds.add(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1);\n    propertyIds.add(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2);\n    org.apache.ambari.server.controller.spi.Request request \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(propertyIds, temporalInfoMap);\n    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());\n    // check the temporal value\n    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);\n    java.lang.Number[][] datapoints \u003d ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));\n    for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n        org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n    }\n    // check the point in time value ... should be the last value of the time series...\n    org.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2));\n    // verify\n    org.easymock.EasyMock.verify(connectionFactory, connection, statement, resultSet);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size()), // check the temporal value\norg.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]), for (int i \u003d 0; i \u003c datapoints.length; ++i) {\n    org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);\n    org.junit.Assert.assertEquals(999990L + i, datapoints[i][1]);\n}, // check the point in time value ... should be the last value of the time series...\norg.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2))"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/test/java/org/apache/ambari/view/pig/test/ScriptTestHDFSUnmanaged.java": {
    "createScriptAutoCreateNoScriptsPath": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "createScriptAutoCreateNoScriptsPath[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoScriptsPath() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    // properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    thrown.expect(org.apache.ambari.view.pig.utils.MisconfigurationFormattedException.class);\n    doCreateScript(\"Test\", null);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "createScriptAutoCreateNoScriptsPath[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoScriptsPath() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    // properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    thrown.expect(org.apache.ambari.view.pig.utils.MisconfigurationFormattedException.class);\n    doCreateScript(\"Test\", null);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "57645a814fea816eeea09e37d392d37988823f79",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "createScriptAutoCreateNoScriptsPath[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoScriptsPath() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    // properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    thrown.expect(org.apache.ambari.view.pig.utils.MisconfigurationFormattedException.class);\n    doCreateScript(\"Test\", null);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "createScriptAutoCreateUsername": [
      {
        "has_assertions": true,
        "assertion_lines": [
          114,
          119
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "createScriptAutoCreateUsername[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateUsername() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript(\"Test\", null);\n    java.lang.String createdScriptPath \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getPigScript();\n    org.junit.Assert.assertTrue(createdScriptPath.startsWith(\"/tmp/.pigscripts/\"));\n    properties.put(\"dataworker.username\", \"luke\");\n    javax.ws.rs.core.Response createdScript2 \u003d doCreateScript(\"Test\", null);\n    java.lang.String createdScriptPath2 \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript2.getEntity())).get(\"script\"))).getPigScript();\n    org.junit.Assert.assertTrue(createdScriptPath2.startsWith(\"/tmp/.pigscripts/\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(createdScriptPath.startsWith(\"/tmp/.pigscripts/\")), org.junit.Assert.assertTrue(createdScriptPath2.startsWith(\"/tmp/.pigscripts/\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          114,
          119
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "createScriptAutoCreateUsername[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateUsername() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript(\"Test\", null);\n    java.lang.String createdScriptPath \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getPigScript();\n    org.junit.Assert.assertTrue(createdScriptPath.startsWith(\"/tmp/.pigscripts/\"));\n    properties.put(\"dataworker.username\", \"luke\");\n    javax.ws.rs.core.Response createdScript2 \u003d doCreateScript(\"Test\", null);\n    java.lang.String createdScriptPath2 \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript2.getEntity())).get(\"script\"))).getPigScript();\n    org.junit.Assert.assertTrue(createdScriptPath2.startsWith(\"/tmp/.pigscripts/\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(createdScriptPath.startsWith(\"/tmp/.pigscripts/\")), org.junit.Assert.assertTrue(createdScriptPath2.startsWith(\"/tmp/.pigscripts/\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          112,
          117
        ],
        "commit": "57645a814fea816eeea09e37d392d37988823f79",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "createScriptAutoCreateUsername[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateUsername() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript(\"Test\", null);\n    java.lang.String createdScriptPath \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getPigScript();\n    org.junit.Assert.assertTrue(createdScriptPath.startsWith(\"/tmp/.pigscripts/\"));\n    properties.put(\"dataworker.username\", \"luke\");\n    javax.ws.rs.core.Response createdScript2 \u003d doCreateScript(\"Test\", null);\n    java.lang.String createdScriptPath2 \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript2.getEntity())).get(\"script\"))).getPigScript();\n    org.junit.Assert.assertTrue(createdScriptPath2.startsWith(\"/tmp/.pigscripts/\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(createdScriptPath.startsWith(\"/tmp/.pigscripts/\")), org.junit.Assert.assertTrue(createdScriptPath2.startsWith(\"/tmp/.pigscripts/\"))"
      }
    ],
    "createScriptAutoCreateNoStoragePath": [
      {
        "has_assertions": true,
        "assertion_lines": [
          140
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "createScriptAutoCreateNoStoragePath[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoStoragePath() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    // properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    org.apache.ambari.view.pig.persistence.Storage storage \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context).getStorage();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.persistence.DataStoreStorage.class.getSimpleName(), storage.getClass().getSimpleName());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.pig.persistence.DataStoreStorage.class.getSimpleName(), storage.getClass().getSimpleName())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          140
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "createScriptAutoCreateNoStoragePath[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoStoragePath() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    // properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    org.apache.ambari.view.pig.persistence.Storage storage \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context).getStorage();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.persistence.DataStoreStorage.class.getSimpleName(), storage.getClass().getSimpleName());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.pig.persistence.DataStoreStorage.class.getSimpleName(), storage.getClass().getSimpleName())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          138
        ],
        "commit": "57645a814fea816eeea09e37d392d37988823f79",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "createScriptAutoCreateNoStoragePath[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoStoragePath() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    baseDir \u003d new java.io.File(DATA_DIRECTORY).getAbsoluteFile();\n    pigStorageFile \u003d new java.io.File(\"./target/BasePigTest/storage.dat\").getAbsoluteFile();\n    // properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    org.apache.ambari.view.pig.persistence.Storage storage \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context).getStorage();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.persistence.DataStoreStorage.class.getSimpleName(), storage.getClass().getSimpleName());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.pig.persistence.DataStoreStorage.class.getSimpleName(), storage.getClass().getSimpleName())"
      }
    ],
    "hdfsApiNoUsernameProvided": [
      {
        "has_assertions": true,
        "assertion_lines": [
          154,
          158
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "hdfsApiNoUsernameProvided[]",
        "body": "@org.junit.Test\npublic void hdfsApiNoUsernameProvided() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(context);\n    // no webhdfs.username property\n    org.junit.Assert.assertEquals(\"ambari-qa\", org.apache.ambari.view.utils.hdfs.HdfsUtil.getHdfsUsername(context));\n    // with webhdfs.username property\n    properties.put(\"webhdfs.username\", \"luke\");\n    org.junit.Assert.assertEquals(\"luke\", org.apache.ambari.view.utils.hdfs.HdfsUtil.getHdfsUsername(context));\n}",
        "assertion_type": "// no webhdfs.username property\norg.junit.Assert.assertEquals(\"ambari-qa\", org.apache.ambari.view.utils.hdfs.HdfsUtil.getHdfsUsername(context)), org.junit.Assert.assertEquals(\"luke\", org.apache.ambari.view.utils.hdfs.HdfsUtil.getHdfsUsername(context))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          154,
          158
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "hdfsApiNoUsernameProvided[]",
        "body": "@org.junit.Test\npublic void hdfsApiNoUsernameProvided() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(context);\n    // no webhdfs.username property\n    org.junit.Assert.assertEquals(\"ambari-qa\", org.apache.ambari.view.utils.hdfs.HdfsUtil.getHdfsUsername(context));\n    // with webhdfs.username property\n    properties.put(\"webhdfs.username\", \"luke\");\n    org.junit.Assert.assertEquals(\"luke\", org.apache.ambari.view.utils.hdfs.HdfsUtil.getHdfsUsername(context));\n}",
        "assertion_type": "// no webhdfs.username property\norg.junit.Assert.assertEquals(\"ambari-qa\", org.apache.ambari.view.utils.hdfs.HdfsUtil.getHdfsUsername(context)), org.junit.Assert.assertEquals(\"luke\", org.apache.ambari.view.utils.hdfs.HdfsUtil.getHdfsUsername(context))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          152,
          156
        ],
        "commit": "57645a814fea816eeea09e37d392d37988823f79",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "hdfsApiNoUsernameProvided[]",
        "body": "@org.junit.Test\npublic void hdfsApiNoUsernameProvided() throws java.io.IOException, java.lang.InterruptedException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    properties.put(\"webhdfs.url\", hdfsURI);\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(context);\n    // no webhdfs.username property\n    org.junit.Assert.assertEquals(\"ambari-qa\", org.apache.ambari.view.pig.utils.HdfsApi.getHdfsUsername(context));\n    // with webhdfs.username property\n    properties.put(\"webhdfs.username\", \"luke\");\n    org.junit.Assert.assertEquals(\"luke\", org.apache.ambari.view.pig.utils.HdfsApi.getHdfsUsername(context));\n}",
        "assertion_type": "// no webhdfs.username property\norg.junit.Assert.assertEquals(\"ambari-qa\", org.apache.ambari.view.pig.utils.HdfsApi.getHdfsUsername(context)), org.junit.Assert.assertEquals(\"luke\", org.apache.ambari.view.pig.utils.HdfsApi.getHdfsUsername(context))"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/metrics-sink/src/Test/java/org/apache/hadoop/metrics2/sink/SqlServerSinkHadoop2Test.java": {
    "testPutMetrics": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "@java.lang.Override",
        "assertion_amount": 0,
        "method_signature": "testPutMetrics[]",
        "body": "@java.lang.Override\n@org.junit.Test\npublic void testPutMetrics() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d createNiceMock(java.sql.CallableStatement.class);\n    org.apache.hadoop.metrics2.MetricsRecord record \u003d createNiceMock(org.apache.hadoop.metrics2.MetricsRecord.class);\n    org.apache.hadoop.metrics2.AbstractMetric metric \u003d createNiceMock(org.apache.hadoop.metrics2.AbstractMetric.class);\n    // set expectations\n    expect(configuration.getParent()).andReturn(null);\n    expect(configuration.getPrefix()).andReturn(\"prefix\");\n    expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    expect(record.context()).andReturn(\"context\");\n    expect(record.name()).andReturn(\"typeName\");\n    expect(record.tags()).andReturn(new java.util.HashSet\u003corg.apache.hadoop.metrics2.MetricsTag\u003e());\n    expect(record.timestamp()).andReturn(9999L);\n    expect(record.metrics()).andReturn(java.util.Collections.singleton(metric));\n    expect(metric.name()).andReturn(\"name\").anyTimes();\n    expect(metric.value()).andReturn(1234);\n    expect(connection.prepareCall(\"{call dbo.uspGetMetricRecord(?, ?, ?, ?, ?, ?, ?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setNString(1, \"context\");\n    cstmt.setNString(2, \"typeName\");\n    cstmt.setNString(eq(3), ((java.lang.String) (anyObject())));\n    cstmt.setNString(eq(4), ((java.lang.String) (anyObject())));\n    cstmt.setNString(eq(5), ((java.lang.String) (anyObject())));\n    cstmt.setNString(6, \"prefix\");\n    cstmt.setNString(7, \"sourceName:prefix\");\n    cstmt.setLong(8, 9999L);\n    cstmt.registerOutParameter(9, java.sql.Types.BIGINT);\n    expect(cstmt.execute()).andReturn(true);\n    expect(cstmt.getLong(9)).andReturn(99L);\n    expect(cstmt.wasNull()).andReturn(false);\n    expect(connection.prepareCall(\"{call dbo.uspInsertMetricValue(?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setLong(1, 99L);\n    cstmt.setNString(2, \"name\");\n    cstmt.setNString(3, \"1234\");\n    expect(cstmt.execute()).andReturn(true);\n    // replay\n    replay(configuration, connection, cstmt, record, metric);\n    SqlServerSink sink \u003d createInstance();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    sink.putMetrics(record);\n    verify(configuration, connection, cstmt, record, metric);\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/HdfsApiTest.java": {
    "testWith_EC_And_Encryption": [
      {
        "has_assertions": true,
        "assertion_lines": [
          87,
          88,
          89
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testWith_EC_And_Encryption[]",
        "body": "@org.junit.Test\npublic void testWith_EC_And_Encryption() {\n    // Have to mock DummyFileStatus, because we cannot rely on internal class of hdfs\n    DummyFileStatus fileStatus \u003d org.mockito.Mockito.mock(org.apache.ambari.view.utils.hdfs.DummyFileStatus.class);\n    org.apache.hadoop.fs.permission.FsPermission fsPermission \u003d new org.apache.hadoop.fs.permission.FsPermission(((short) (0777)));\n    java.lang.String ecPolicyName \u003d \"Some-EC-Policy\";\n    org.apache.hadoop.io.erasurecode.ECSchema ecSchema \u003d new org.apache.hadoop.io.erasurecode.ECSchema(\"someSchema\", 1, 1);\n    org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy erasureCodingPolicy \u003d new org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy(ecPolicyName, ecSchema, 1024, ((byte) (0)));\n    org.mockito.Mockito.when(fileStatus.getPermission()).thenReturn(fsPermission);\n    org.mockito.Mockito.when(fileStatus.getPath()).thenReturn(new org.apache.hadoop.fs.Path(\"/test/path\"));\n    org.mockito.Mockito.when(fileStatus.getErasureCodingPolicy()).thenReturn(erasureCodingPolicy);\n    org.mockito.Mockito.when(fileStatus.isErasureCoded()).thenReturn(true);\n    org.mockito.Mockito.when(fileStatus.isEncrypted()).thenReturn(true);\n    java.util.Map\u003cjava.lang.String, java.lang.Object\u003e json \u003d hdfsApi.fileStatusToJSON(fileStatus);\n    org.junit.Assert.assertEquals(java.lang.Boolean.TRUE, json.get(KeyIsErasureCoded));\n    org.junit.Assert.assertEquals(java.lang.Boolean.TRUE, json.get(KeyIsEncrypted));\n    org.junit.Assert.assertEquals(json.get(KeyErasureCodingPolicyName), ecPolicyName);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.Boolean.TRUE, json.get(KeyIsErasureCoded)), org.junit.Assert.assertEquals(java.lang.Boolean.TRUE, json.get(KeyIsEncrypted)), org.junit.Assert.assertEquals(json.get(KeyErasureCodingPolicyName), ecPolicyName)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          87,
          88,
          89
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testWith_EC_And_Encryption[]",
        "body": "@org.junit.Test\npublic void testWith_EC_And_Encryption() {\n    // Have to mock DummyFileStatus, because we cannot rely on internal class of hdfs\n    DummyFileStatus fileStatus \u003d org.mockito.Mockito.mock(org.apache.ambari.view.utils.hdfs.DummyFileStatus.class);\n    org.apache.hadoop.fs.permission.FsPermission fsPermission \u003d new org.apache.hadoop.fs.permission.FsPermission(((short) (0777)));\n    java.lang.String ecPolicyName \u003d \"Some-EC-Policy\";\n    org.apache.hadoop.io.erasurecode.ECSchema ecSchema \u003d new org.apache.hadoop.io.erasurecode.ECSchema(\"someSchema\", 1, 1);\n    org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy erasureCodingPolicy \u003d new org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy(ecPolicyName, ecSchema, 1024, ((byte) (0)));\n    org.mockito.Mockito.when(fileStatus.getPermission()).thenReturn(fsPermission);\n    org.mockito.Mockito.when(fileStatus.getPath()).thenReturn(new org.apache.hadoop.fs.Path(\"/test/path\"));\n    org.mockito.Mockito.when(fileStatus.getErasureCodingPolicy()).thenReturn(erasureCodingPolicy);\n    org.mockito.Mockito.when(fileStatus.isErasureCoded()).thenReturn(true);\n    org.mockito.Mockito.when(fileStatus.isEncrypted()).thenReturn(true);\n    java.util.Map\u003cjava.lang.String, java.lang.Object\u003e json \u003d hdfsApi.fileStatusToJSON(fileStatus);\n    org.junit.Assert.assertEquals(java.lang.Boolean.TRUE, json.get(KeyIsErasureCoded));\n    org.junit.Assert.assertEquals(java.lang.Boolean.TRUE, json.get(KeyIsEncrypted));\n    org.junit.Assert.assertEquals(json.get(KeyErasureCodingPolicyName), ecPolicyName);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.Boolean.TRUE, json.get(KeyIsErasureCoded)), org.junit.Assert.assertEquals(java.lang.Boolean.TRUE, json.get(KeyIsEncrypted)), org.junit.Assert.assertEquals(json.get(KeyErasureCodingPolicyName), ecPolicyName)"
      }
    ],
    "testWithout_EC_And_Encryption": [
      {
        "has_assertions": true,
        "assertion_lines": [
          106,
          107,
          108
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testWithout_EC_And_Encryption[]",
        "body": "@org.junit.Test\npublic void testWithout_EC_And_Encryption() {\n    // Have to mock DummyFileStatus, because we cannot rely on internal class of hdfs\n    org.apache.hadoop.fs.permission.FsPermission fsPermission \u003d new org.apache.hadoop.fs.permission.FsPermission(((short) (0777)));\n    DummyFileStatus fileStatus \u003d org.mockito.Mockito.mock(org.apache.ambari.view.utils.hdfs.DummyFileStatus.class);\n    org.mockito.Mockito.when(fileStatus.getPermission()).thenReturn(fsPermission);\n    org.mockito.Mockito.when(fileStatus.getPath()).thenReturn(new org.apache.hadoop.fs.Path(\"/test/path\"));\n    org.mockito.Mockito.when(fileStatus.getErasureCodingPolicy()).thenReturn(null);\n    org.mockito.Mockito.when(fileStatus.isErasureCoded()).thenReturn(false);\n    org.mockito.Mockito.when(fileStatus.isEncrypted()).thenReturn(false);\n    java.util.Map\u003cjava.lang.String, java.lang.Object\u003e json \u003d hdfsApi.fileStatusToJSON(fileStatus);\n    org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsErasureCoded));\n    org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsEncrypted));\n    org.junit.Assert.assertNull(json.get(KeyErasureCodingPolicyName));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsErasureCoded)), org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsEncrypted)), org.junit.Assert.assertNull(json.get(KeyErasureCodingPolicyName))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          106,
          107,
          108
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testWithout_EC_And_Encryption[]",
        "body": "@org.junit.Test\npublic void testWithout_EC_And_Encryption() {\n    // Have to mock DummyFileStatus, because we cannot rely on internal class of hdfs\n    org.apache.hadoop.fs.permission.FsPermission fsPermission \u003d new org.apache.hadoop.fs.permission.FsPermission(((short) (0777)));\n    DummyFileStatus fileStatus \u003d org.mockito.Mockito.mock(org.apache.ambari.view.utils.hdfs.DummyFileStatus.class);\n    org.mockito.Mockito.when(fileStatus.getPermission()).thenReturn(fsPermission);\n    org.mockito.Mockito.when(fileStatus.getPath()).thenReturn(new org.apache.hadoop.fs.Path(\"/test/path\"));\n    org.mockito.Mockito.when(fileStatus.getErasureCodingPolicy()).thenReturn(null);\n    org.mockito.Mockito.when(fileStatus.isErasureCoded()).thenReturn(false);\n    org.mockito.Mockito.when(fileStatus.isEncrypted()).thenReturn(false);\n    java.util.Map\u003cjava.lang.String, java.lang.Object\u003e json \u003d hdfsApi.fileStatusToJSON(fileStatus);\n    org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsErasureCoded));\n    org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsEncrypted));\n    org.junit.Assert.assertNull(json.get(KeyErasureCodingPolicyName));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsErasureCoded)), org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsEncrypted)), org.junit.Assert.assertNull(json.get(KeyErasureCodingPolicyName))"
      }
    ],
    "testNonHdfsFileStatus": [
      {
        "has_assertions": true,
        "assertion_lines": [
          123,
          124,
          125
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testNonHdfsFileStatus[]",
        "body": "@org.junit.Test\npublic void testNonHdfsFileStatus() {\n    // Have to mock DummyNonHdfsFileStatus, because we cannot rely on internal class of hdfs\n    DummyNonHdfsFileStatus fileStatus \u003d org.mockito.Mockito.mock(org.apache.ambari.view.utils.hdfs.DummyNonHdfsFileStatus.class);\n    org.apache.hadoop.fs.permission.FsPermission fsPermission \u003d new org.apache.hadoop.fs.permission.FsPermission(((short) (0777)));\n    org.mockito.Mockito.when(fileStatus.getPermission()).thenReturn(fsPermission);\n    org.mockito.Mockito.when(fileStatus.getPath()).thenReturn(new org.apache.hadoop.fs.Path(\"/test/path\"));\n    org.mockito.Mockito.when(fileStatus.isErasureCoded()).thenReturn(false);\n    org.mockito.Mockito.when(fileStatus.isEncrypted()).thenReturn(false);\n    java.util.Map\u003cjava.lang.String, java.lang.Object\u003e json \u003d hdfsApi.fileStatusToJSON(fileStatus);\n    org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsErasureCoded));\n    org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsEncrypted));\n    org.junit.Assert.assertNull(json.get(KeyErasureCodingPolicyName));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsErasureCoded)), org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsEncrypted)), org.junit.Assert.assertNull(json.get(KeyErasureCodingPolicyName))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          123,
          124,
          125
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testNonHdfsFileStatus[]",
        "body": "@org.junit.Test\npublic void testNonHdfsFileStatus() {\n    // Have to mock DummyNonHdfsFileStatus, because we cannot rely on internal class of hdfs\n    DummyNonHdfsFileStatus fileStatus \u003d org.mockito.Mockito.mock(org.apache.ambari.view.utils.hdfs.DummyNonHdfsFileStatus.class);\n    org.apache.hadoop.fs.permission.FsPermission fsPermission \u003d new org.apache.hadoop.fs.permission.FsPermission(((short) (0777)));\n    org.mockito.Mockito.when(fileStatus.getPermission()).thenReturn(fsPermission);\n    org.mockito.Mockito.when(fileStatus.getPath()).thenReturn(new org.apache.hadoop.fs.Path(\"/test/path\"));\n    org.mockito.Mockito.when(fileStatus.isErasureCoded()).thenReturn(false);\n    org.mockito.Mockito.when(fileStatus.isEncrypted()).thenReturn(false);\n    java.util.Map\u003cjava.lang.String, java.lang.Object\u003e json \u003d hdfsApi.fileStatusToJSON(fileStatus);\n    org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsErasureCoded));\n    org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsEncrypted));\n    org.junit.Assert.assertNull(json.get(KeyErasureCodingPolicyName));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsErasureCoded)), org.junit.Assert.assertEquals(java.lang.Boolean.FALSE, json.get(KeyIsEncrypted)), org.junit.Assert.assertNull(json.get(KeyErasureCodingPolicyName))"
      }
    ],
    "filterAndTruncateDirStatus": [
      {
        "has_assertions": true,
        "assertion_lines": [
          129,
          135,
          141,
          150,
          159,
          169,
          179,
          189,
          199,
          209,
          219,
          229,
          239
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 13,
        "method_signature": "filterAndTruncateDirStatus[]",
        "body": "@org.junit.Test\npublic void filterAndTruncateDirStatus() throws java.lang.Exception {\n    {\n        // null fileStatuses\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, null);\n        org.junit.Assert.assertEquals(new DirStatus(null, new DirListInfo(0, false, 0, \"\")), dirStatus);\n    }\n    {\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(10);\n        DirStatus dirStatus1 \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(10, true, 0, \"\")), dirStatus1);\n    }\n    {\n        int originalSize \u003d 10;\n        int maxAllowedSize \u003d 5;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus2);\n    }\n    {\n        int originalSize \u003d 10;\n        int maxAllowedSize \u003d 10;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus2);\n    }\n    {\n        int originalSize \u003d 11;\n        int maxAllowedSize \u003d 2;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10] }, new DirListInfo(originalSize, false, 2, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 12;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, false, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 13;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 0;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(originalSize, false, originalSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d null;\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 3;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d null;\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"a\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(originalSize, false, 0, nameFilter)), dirStatus);\n    }\n}",
        "assertion_type": "{\n    // null fileStatuses\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, null);\n    org.junit.Assert.assertEquals(new DirStatus(null, new DirListInfo(0, false, 0, \"\")), dirStatus);\n}, {\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(10);\n    DirStatus dirStatus1 \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(10, true, 0, \"\")), dirStatus1);\n}, {\n    int originalSize \u003d 10;\n    int maxAllowedSize \u003d 5;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus2);\n}, {\n    int originalSize \u003d 10;\n    int maxAllowedSize \u003d 10;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus2);\n}, {\n    int originalSize \u003d 11;\n    int maxAllowedSize \u003d 2;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10] }, new DirListInfo(originalSize, false, 2, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 12;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, false, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 13;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 0;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(originalSize, false, originalSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d null;\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 3;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d null;\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"a\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(originalSize, false, 0, nameFilter)), dirStatus);\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          66,
          72,
          78,
          87,
          96,
          106,
          116,
          126,
          136,
          146,
          156,
          166,
          176
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 13,
        "method_signature": "filterAndTruncateDirStatus[]",
        "body": "@org.junit.Test\npublic void filterAndTruncateDirStatus() throws java.lang.Exception {\n    {\n        // null fileStatuses\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, null);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(null, new org.apache.ambari.view.utils.hdfs.DirListInfo(0, false, 0, \"\")), dirStatus);\n    }\n    {\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(10);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus1 \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[0], new org.apache.ambari.view.utils.hdfs.DirListInfo(10, true, 0, \"\")), dirStatus1);\n    }\n    {\n        int originalSize \u003d 10;\n        int maxAllowedSize \u003d 5;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus2);\n    }\n    {\n        int originalSize \u003d 10;\n        int maxAllowedSize \u003d 10;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus2);\n    }\n    {\n        int originalSize \u003d 11;\n        int maxAllowedSize \u003d 2;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, 2, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 12;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 13;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 0;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[0], new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, originalSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d null;\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 3;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d null;\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"a\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[0], new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, 0, nameFilter)), dirStatus);\n    }\n}",
        "assertion_type": "{\n    // null fileStatuses\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, null);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(null, new org.apache.ambari.view.utils.hdfs.DirListInfo(0, false, 0, \"\")), dirStatus);\n}, {\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(10);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus1 \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[0], new org.apache.ambari.view.utils.hdfs.DirListInfo(10, true, 0, \"\")), dirStatus1);\n}, {\n    int originalSize \u003d 10;\n    int maxAllowedSize \u003d 5;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus2);\n}, {\n    int originalSize \u003d 10;\n    int maxAllowedSize \u003d 10;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus2);\n}, {\n    int originalSize \u003d 11;\n    int maxAllowedSize \u003d 2;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, 2, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 12;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 13;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 0;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[0], new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, originalSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d null;\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 3;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d null;\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"a\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    org.apache.ambari.view.utils.hdfs.DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new org.apache.ambari.view.utils.hdfs.DirStatus(new org.apache.hadoop.fs.FileStatus[0], new org.apache.ambari.view.utils.hdfs.DirListInfo(originalSize, false, 0, nameFilter)), dirStatus);\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          129,
          135,
          141,
          150,
          159,
          169,
          179,
          189,
          199,
          209,
          219,
          229,
          239
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 13,
        "method_signature": "filterAndTruncateDirStatus[]",
        "body": "@org.junit.Test\npublic void filterAndTruncateDirStatus() throws java.lang.Exception {\n    {\n        // null fileStatuses\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, null);\n        org.junit.Assert.assertEquals(new DirStatus(null, new DirListInfo(0, false, 0, \"\")), dirStatus);\n    }\n    {\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(10);\n        DirStatus dirStatus1 \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(10, true, 0, \"\")), dirStatus1);\n    }\n    {\n        int originalSize \u003d 10;\n        int maxAllowedSize \u003d 5;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus2);\n    }\n    {\n        int originalSize \u003d 10;\n        int maxAllowedSize \u003d 10;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus2);\n    }\n    {\n        int originalSize \u003d 11;\n        int maxAllowedSize \u003d 2;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10] }, new DirListInfo(originalSize, false, 2, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 12;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, false, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 13;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 0;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"1\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(originalSize, false, originalSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d null;\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 3;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d null;\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus);\n    }\n    {\n        int originalSize \u003d 20;\n        int maxAllowedSize \u003d 3;\n        java.lang.String nameFilter \u003d \"a\";\n        org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n        DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n        org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(originalSize, false, 0, nameFilter)), dirStatus);\n    }\n}",
        "assertion_type": "{\n    // null fileStatuses\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, null);\n    org.junit.Assert.assertEquals(new DirStatus(null, new DirListInfo(0, false, 0, \"\")), dirStatus);\n}, {\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(10);\n    DirStatus dirStatus1 \u003d hdfsApi.filterAndTruncateDirStatus(\"\", 0, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(10, true, 0, \"\")), dirStatus1);\n}, {\n    int originalSize \u003d 10;\n    int maxAllowedSize \u003d 5;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus2);\n}, {\n    int originalSize \u003d 10;\n    int maxAllowedSize \u003d 10;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus2 \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(java.util.Arrays.copyOf(fileStatuses, maxAllowedSize), new DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus2);\n}, {\n    int originalSize \u003d 11;\n    int maxAllowedSize \u003d 2;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10] }, new DirListInfo(originalSize, false, 2, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 12;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, false, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 13;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[1], fileStatuses[10], fileStatuses[11] }, new DirListInfo(originalSize, true, 3, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 0;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"1\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(originalSize, false, originalSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d null;\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, true, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 3;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d null;\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[]{ fileStatuses[0], fileStatuses[1], fileStatuses[2] }, new DirListInfo(originalSize, false, maxAllowedSize, nameFilter)), dirStatus);\n}, {\n    int originalSize \u003d 20;\n    int maxAllowedSize \u003d 3;\n    java.lang.String nameFilter \u003d \"a\";\n    org.apache.hadoop.fs.FileStatus[] fileStatuses \u003d getFileStatuses(originalSize);\n    DirStatus dirStatus \u003d hdfsApi.filterAndTruncateDirStatus(nameFilter, maxAllowedSize, fileStatuses);\n    org.junit.Assert.assertEquals(new DirStatus(new org.apache.hadoop.fs.FileStatus[0], new DirListInfo(originalSize, false, 0, nameFilter)), dirStatus);\n}"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostComponentProviderTest.java": {
    "testGetResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          44
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(25, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(25, resources.size())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          44
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(26, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(26, resources.size())"
      }
    ],
    "testGetResourcesWithPredicate": [
      {
        "has_assertions": true,
        "assertion_lines": [
          53,
          57
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(5, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID).equals(\"UnknownHost\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertTrue(resources.isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(5, resources.size()), junit.framework.Assert.assertTrue(resources.isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          53,
          57
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(5, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID).equals(\"UnknownHost\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertTrue(resources.isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(5, resources.size()), junit.framework.Assert.assertTrue(resources.isEmpty())"
      }
    ],
    "testGetResourcesCheckState": [
      {
        "has_assertions": true,
        "assertion_lines": [
          67,
          69,
          76,
          78
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckState[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckState() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"HBASE_REGIONSERVER\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(3, resources.size());\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n    }\n    stateProvider.setHealthy(false);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(3, resources.size());\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n    }\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(3, resources.size()), for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n    junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n}, for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n    junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          67,
          69,
          76,
          78
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckState[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckState() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"HBASE_REGIONSERVER\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(3, resources.size());\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n    }\n    stateProvider.setHealthy(false);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(3, resources.size());\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n    }\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(3, resources.size()), for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n    junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n}, for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n    junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n}"
      }
    ],
    "testGetResourcesCheckStateFromCategory": [
      {
        "has_assertions": true,
        "assertion_lines": [
          90,
          92,
          99,
          101
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckStateFromCategory[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckStateFromCategory() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"HBASE_REGIONSERVER\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(\"HostRoles\"), predicate);\n    junit.framework.Assert.assertEquals(3, resources.size());\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n    }\n    stateProvider.setHealthy(false);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(3, resources.size());\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n    }\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(3, resources.size()), for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n    junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n}, for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n    junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          90,
          92,
          99,
          101
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckStateFromCategory[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckStateFromCategory() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"HBASE_REGIONSERVER\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(\"HostRoles\"), predicate);\n    junit.framework.Assert.assertEquals(3, resources.size());\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n    }\n    stateProvider.setHealthy(false);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(3, resources.size());\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n    }\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(3, resources.size()), for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n    junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n}, for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n    junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));\n}"
      }
    ],
    "testCreateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          111
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [
          111
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testUpdateResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          134,
          142,
          150
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"HBASE_REGIONSERVER\").toPredicate();\n    java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    properties.put(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n    org.apache.ambari.server.controller.spi.Request updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n    properties.put(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, \"INSTALLED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState());\n    properties.put(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState()), junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          134,
          142,
          150
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"HBASE_REGIONSERVER\").toPredicate();\n    java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    properties.put(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n    org.apache.ambari.server.controller.spi.Request updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n    properties.put(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, \"INSTALLED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState());\n    properties.put(HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState()), junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState())"
      }
    ],
    "testDeleteResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          158
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [
          158
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostComponentProvider provider \u003d new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/ClusterDefinitionProviderTest.java": {
    "testGetFileName": [
      {
        "has_assertions": true,
        "assertion_lines": [
          51
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetFileName[]",
        "body": "@org.junit.Test\npublic void testGetFileName() throws java.lang.Exception {\n    org.apache.ambari.scom.ClusterDefinitionProvider provider \u003d org.apache.ambari.scom.ClusterDefinitionProviderTest.getProvider(\"myFile\", \"myCluster\", \"myVersion\");\n    org.junit.Assert.assertEquals(\"myFile\", provider.getFileName());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"myFile\", provider.getFileName())"
      }
    ],
    "testGetClusterName": [
      {
        "has_assertions": true,
        "assertion_lines": [
          57
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetClusterName[]",
        "body": "@org.junit.Test\npublic void testGetClusterName() throws java.lang.Exception {\n    org.apache.ambari.scom.ClusterDefinitionProvider provider \u003d org.apache.ambari.scom.ClusterDefinitionProviderTest.getProvider(\"myFile\", \"myCluster\", \"myVersion\");\n    org.junit.Assert.assertEquals(\"myCluster\", provider.getClusterName());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"myCluster\", provider.getClusterName())"
      }
    ],
    "testGetVersionId": [
      {
        "has_assertions": true,
        "assertion_lines": [
          63
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetVersionId[]",
        "body": "@org.junit.Test\npublic void testGetVersionId() throws java.lang.Exception {\n    org.apache.ambari.scom.ClusterDefinitionProvider provider \u003d org.apache.ambari.scom.ClusterDefinitionProviderTest.getProvider(\"myFile\", \"myCluster\", \"myVersion\");\n    org.junit.Assert.assertEquals(\"myVersion\", provider.getVersionId());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"myVersion\", provider.getVersionId())"
      }
    ],
    "testGetInputStream": [
      {
        "has_assertions": true,
        "assertion_lines": [
          70
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetInputStream[]",
        "body": "@org.junit.Test\npublic void testGetInputStream() throws java.lang.Exception {\n    org.apache.ambari.scom.ClusterDefinitionProvider provider \u003d org.apache.ambari.scom.ClusterDefinitionProviderTest.getProvider(\"clusterproperties.txt\", \"myCluster\", \"myVersion\");\n    java.io.InputStream inputStream \u003d provider.getInputStream();\n    org.junit.Assert.assertNotNull(inputStream);\n}",
        "assertion_type": "org.junit.Assert.assertNotNull(inputStream)"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java": {
    "storageSmokeTest": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "cff1e89307f44ff53cf70cc178b5460e5320878d",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "storageSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "public static void storageSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        SmokeTestEntity entity \u003d new SmokeTestEntity();\n        entity.setData(\"42\");\n        org.apache.ambari.view.pig.persistence.DataStoreStorage storage \u003d new org.apache.ambari.view.pig.persistence.DataStoreStorage(context);\n        storage.store(entity);\n        if (entity.getId() \u003d\u003d null) {\n            throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(\"Ambari Views instance data DB doesn\u0027t work properly (auto increment id doesn\u0027t work)\", null);\n        }\n        int id \u003d java.lang.Integer.parseInt(entity.getId());\n        SmokeTestEntity entity2 \u003d storage.load(org.apache.ambari.view.pig.persistence.SmokeTestEntity.class, id);\n        boolean status \u003d entity2.getData().compareTo(\"42\") \u003d\u003d 0;\n        storage.delete(org.apache.ambari.view.pig.persistence.SmokeTestEntity.class, id);\n        if (!status) {\n            throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(\"Ambari Views instance data DB doesn\u0027t work properly\", null);\n        }\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "028143c4033f832b177d6d4d829ac4ad57a95c88",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "storageSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "public static void storageSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        SmokeTestEntity entity \u003d new SmokeTestEntity();\n        entity.setData(\"42\");\n        org.apache.ambari.view.pig.persistence.DataStoreStorage storage \u003d new org.apache.ambari.view.pig.persistence.DataStoreStorage(context);\n        storage.store(entity);\n        if (entity.getId() \u003d\u003d null) {\n            throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(\"Ambari Views instance data DB doesn\u0027t work properly (auto increment id doesn\u0027t work)\", null);\n        }\n        int id \u003d java.lang.Integer.parseInt(entity.getId());\n        SmokeTestEntity entity2 \u003d storage.load(org.apache.ambari.view.pig.persistence.SmokeTestEntity.class, id);\n        boolean status \u003d entity2.getData().compareTo(\"42\") \u003d\u003d 0;\n        storage.delete(org.apache.ambari.view.pig.persistence.SmokeTestEntity.class, id);\n        if (!status) {\n            throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(\"Ambari Views instance data DB doesn\u0027t work properly\", null);\n        }\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "1ea950806629a3b0c3a41bbcaaa322aab64492dd",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "storageSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "public static void storageSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.pig.persistence.DataStoreStorage.SmokeTestEntity entity \u003d new org.apache.ambari.view.pig.persistence.DataStoreStorage.SmokeTestEntity();\n        entity.setData(\"42\");\n        org.apache.ambari.view.pig.persistence.DataStoreStorage storage \u003d new org.apache.ambari.view.pig.persistence.DataStoreStorage(context);\n        storage.store(entity);\n        if (entity.getId() \u003d\u003d null) {\n            throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(\"Ambari Views instance data DB doesn\u0027t work properly (auto increment id doesn\u0027t work)\", null);\n        }\n        int id \u003d java.lang.Integer.parseInt(entity.getId());\n        org.apache.ambari.view.pig.persistence.DataStoreStorage.SmokeTestEntity entity2 \u003d storage.load(org.apache.ambari.view.pig.persistence.DataStoreStorage.SmokeTestEntity.class, id);\n        boolean status \u003d entity2.getData().compareTo(\"42\") \u003d\u003d 0;\n        storage.delete(org.apache.ambari.view.pig.persistence.DataStoreStorage.SmokeTestEntity.class, id);\n        if (!status) {\n            throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(\"Ambari Views instance data DB doesn\u0027t work properly\", null);\n        }\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/db/DDLCreateIT.java": {
    "mysql": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "3c28378fa4e6f4299e7df01c47359b4c8643ef63",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "mysql[]",
        "body": "@org.junit.Test\npublic void mysql() {\n    org.apache.ambari.funtest.server.tests.db.DDLCreateIT.testSchemaCreate(() -\u003e new org.testcontainers.containers.MariaDBContainer(\"mariadb:10.2\").withConfigurationOverride(null).withInitScript(\"Ambari-DDL-MySQL-CREATE.sql\"));\n    org.apache.ambari.funtest.server.tests.db.DDLCreateIT.testSchemaCreate(() -\u003e new org.testcontainers.containers.MySQLContainer(\"mysql:5.7\").withConfigurationOverride(null).withInitScript(\"Ambari-DDL-MySQL-CREATE.sql\"));\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "postgres": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "3c28378fa4e6f4299e7df01c47359b4c8643ef63",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "postgres[]",
        "body": "@org.junit.Test\npublic void postgres() {\n    org.apache.ambari.funtest.server.tests.db.DDLCreateIT.testSchemaCreate(() -\u003e new org.testcontainers.containers.PostgreSQLContainer(\"postgres:9.6\").withInitScript(\"Ambari-DDL-Postgres-CREATE.sql\"));\n    org.apache.ambari.funtest.server.tests.db.DDLCreateIT.testSchemaCreate(() -\u003e new org.testcontainers.containers.PostgreSQLContainer(\"postgres:10\").withInitScript(\"Ambari-DDL-Postgres-CREATE.sql\"));\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testSchemaCreate": [
      {
        "has_assertions": true,
        "assertion_lines": [
          53
        ],
        "commit": "3c28378fa4e6f4299e7df01c47359b4c8643ef63",
        "annotations": "No Annotations",
        "assertion_amount": 1,
        "method_signature": "testSchemaCreate[java.util.function.Supplier\u003c? extends org.testcontainers.containers.JdbcDatabaseContainer\u003e containerSupplier]",
        "body": "private static void testSchemaCreate(java.util.function.Supplier\u003c? extends org.testcontainers.containers.JdbcDatabaseContainer\u003e containerSupplier) {\n    try (org.testcontainers.containers.JdbcDatabaseContainer container \u003d containerSupplier.get().withPassword(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_USER_PASSWD.getDefaultValue())) {\n        container.start();\n        java.util.Properties props \u003d new java.util.Properties();\n        props.put(org.apache.ambari.server.configuration.Configuration.SERVER_PERSISTENCE_TYPE.getKey(), org.apache.ambari.server.orm.PersistenceType.REMOTE.getValue());\n        props.put(org.apache.ambari.server.configuration.Configuration.SERVER_DB_NAME.getKey(), container.getDatabaseName());\n        props.put(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_DRIVER.getKey(), container.getDriverClassName());\n        props.put(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_URL.getKey(), container.getJdbcUrl().replace(\"mariadb\", \"mysql\"));\n        props.put(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_USER_NAME.getKey(), container.getUsername());\n        org.apache.ambari.server.configuration.Configuration config \u003d new org.apache.ambari.server.configuration.Configuration(props);\n        org.apache.ambari.server.orm.DBAccessor db \u003d new org.apache.ambari.server.orm.DBAccessorImpl(config);\n        org.junit.Assert.assertTrue(db.tableExists(\"metainfo\"));\n        org.junit.Assert.assertEquals(new java.lang.Integer(1), db.getIntColumnValues(\"users\", \"user_id\", new java.lang.String[]{ \"user_name\" }, new java.lang.String[]{ \"admin\" }, false).get(0));\n    } catch (java.sql.SQLException e) {\n        org.junit.Assert.fail(e.getMessage());\n    }\n}",
        "assertion_type": "try (org.testcontainers.containers.JdbcDatabaseContainer container \u003d containerSupplier.get().withPassword(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_USER_PASSWD.getDefaultValue())) {\n    container.start();\n    java.util.Properties props \u003d new java.util.Properties();\n    props.put(org.apache.ambari.server.configuration.Configuration.SERVER_PERSISTENCE_TYPE.getKey(), org.apache.ambari.server.orm.PersistenceType.REMOTE.getValue());\n    props.put(org.apache.ambari.server.configuration.Configuration.SERVER_DB_NAME.getKey(), container.getDatabaseName());\n    props.put(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_DRIVER.getKey(), container.getDriverClassName());\n    props.put(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_URL.getKey(), container.getJdbcUrl().replace(\"mariadb\", \"mysql\"));\n    props.put(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_USER_NAME.getKey(), container.getUsername());\n    org.apache.ambari.server.configuration.Configuration config \u003d new org.apache.ambari.server.configuration.Configuration(props);\n    org.apache.ambari.server.orm.DBAccessor db \u003d new org.apache.ambari.server.orm.DBAccessorImpl(config);\n    org.junit.Assert.assertTrue(db.tableExists(\"metainfo\"));\n    org.junit.Assert.assertEquals(new java.lang.Integer(1), db.getIntColumnValues(\"users\", \"user_id\", new java.lang.String[]{ \"user_name\" }, new java.lang.String[]{ \"admin\" }, false).get(0));\n} catch (java.sql.SQLException e) {\n    org.junit.Assert.fail(e.getMessage());\n}"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java": {
    "testDatabaseStore": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "d4a2b2b9eb0864dd26327c896547868f16a56f6e",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "testDatabaseStore[]",
        "body": "public void testDatabaseStore() throws java.io.IOException {\n    org.apache.ambari.log4j.common.store.DatabaseStore store \u003d new org.apache.ambari.log4j.common.store.DatabaseStore(org.apache.ambari.log4j.common.store.TestDatabaseStore.class.getName(), \"\", \"\", \"\", new org.apache.ambari.log4j.common.store.TestDatabaseStore.SampleLogStoreUpdateProvider());\n    store.close();\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/metrics-sink/src/Test/java/org/apache/hadoop/metrics2/sink/SqlServerSinkHadoop1Test.java": {
    "testPutMetrics": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "@java.lang.Override",
        "assertion_amount": 0,
        "method_signature": "testPutMetrics[]",
        "body": "@java.lang.Override\n@org.junit.Test\npublic void testPutMetrics() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d createNiceMock(java.sql.CallableStatement.class);\n    org.apache.hadoop.metrics2.MetricsRecord record \u003d createNiceMock(org.apache.hadoop.metrics2.MetricsRecord.class);\n    org.apache.hadoop.metrics2.Metric metric \u003d createNiceMock(org.apache.hadoop.metrics2.Metric.class);\n    // set expectations\n    expect(configuration.getParent()).andReturn(null);\n    expect(configuration.getPrefix()).andReturn(\"prefix\");\n    expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    expect(record.context()).andReturn(\"context\");\n    expect(record.name()).andReturn(\"typeName\");\n    expect(record.tags()).andReturn(new java.util.HashSet\u003corg.apache.hadoop.metrics2.MetricsTag\u003e());\n    expect(record.timestamp()).andReturn(9999L);\n    expect(record.metrics()).andReturn(java.util.Collections.singleton(metric));\n    expect(metric.name()).andReturn(\"name\").anyTimes();\n    expect(metric.value()).andReturn(1234);\n    expect(connection.prepareCall(\"{call dbo.uspGetMetricRecord(?, ?, ?, ?, ?, ?, ?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setNString(1, \"context\");\n    cstmt.setNString(2, \"typeName\");\n    cstmt.setNString(eq(3), ((java.lang.String) (anyObject())));\n    cstmt.setNString(eq(4), ((java.lang.String) (anyObject())));\n    cstmt.setNString(eq(5), ((java.lang.String) (anyObject())));\n    cstmt.setNString(6, \"prefix\");\n    cstmt.setNString(7, \"sourceName:prefix\");\n    cstmt.setLong(8, 9999L);\n    cstmt.registerOutParameter(9, java.sql.Types.BIGINT);\n    expect(cstmt.execute()).andReturn(true);\n    expect(cstmt.getLong(9)).andReturn(99L);\n    expect(cstmt.wasNull()).andReturn(false);\n    expect(connection.prepareCall(\"{call dbo.uspInsertMetricValue(?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setLong(1, 99L);\n    cstmt.setNString(2, \"name\");\n    cstmt.setNString(3, \"1234\");\n    expect(cstmt.execute()).andReturn(true);\n    // replay\n    replay(configuration, connection, cstmt, record, metric);\n    SqlServerSink sink \u003d createInstance();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    sink.putMetrics(record);\n    verify(configuration, connection, cstmt, record, metric);\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/test/java/org/apache/ambari/view/pig/test/ScriptTest.java": {
    "createScript": [
      {
        "has_assertions": true,
        "assertion_lines": [
          99,
          102,
          103,
          104
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "createScript[]",
        "body": "@org.junit.Test\npublic void createScript() {\n    javax.ws.rs.core.Response response \u003d doCreateScript();\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          99,
          102,
          103,
          104
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "createScript[]",
        "body": "@org.junit.Test\npublic void createScript() {\n    javax.ws.rs.core.Response response \u003d doCreateScript();\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          100,
          103,
          104,
          105
        ],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "createScript[]",
        "body": "@org.junit.Test\npublic void createScript() {\n    javax.ws.rs.core.Response response \u003d doCreateScript();\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty())"
      }
    ],
    "createScriptAutoCreate": [
      {
        "has_assertions": true,
        "assertion_lines": [
          110,
          113,
          114,
          115,
          116
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 5,
        "method_signature": "createScriptAutoCreate[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreate() {\n    javax.ws.rs.core.Response response \u003d doCreateScript(\"Test\", null);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getPigScript().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getPigScript().isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          110,
          113,
          114,
          115,
          116
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 5,
        "method_signature": "createScriptAutoCreate[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreate() {\n    javax.ws.rs.core.Response response \u003d doCreateScript(\"Test\", null);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getPigScript().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getPigScript().isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          111,
          114,
          115,
          116,
          117
        ],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 5,
        "method_signature": "createScriptAutoCreate[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreate() {\n    javax.ws.rs.core.Response response \u003d doCreateScript(\"Test\", null);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getPigScript().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getId().isEmpty()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getPigScript().isEmpty())"
      }
    ],
    "scriptNotFound": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "scriptNotFound[]",
        "body": "@org.junit.Test\npublic void scriptNotFound() {\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);\n    scriptService.getScript(\"4242\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "scriptNotFound[]",
        "body": "@org.junit.Test\npublic void scriptNotFound() {\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);\n    scriptService.getScript(\"4242\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "scriptNotFound[]",
        "body": "@org.junit.Test\npublic void scriptNotFound() {\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);\n    scriptService.getScript(\"4242\");\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "updateScript": [
      {
        "has_assertions": true,
        "assertion_lines": [
          135,
          138,
          141,
          142
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "updateScript[]",
        "body": "@org.junit.Test\npublic void updateScript() {\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript();\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getId();\n    org.apache.ambari.view.pig.resources.scripts.ScriptService.PigScriptRequest request \u003d new org.apache.ambari.view.pig.resources.scripts.ScriptService.PigScriptRequest();\n    request.script \u003d new org.apache.ambari.view.pig.resources.scripts.models.PigScript();\n    request.script.setTitle(\"Updated Script\");\n    javax.ws.rs.core.Response response \u003d scriptService.updateScript(request, createdScriptId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d scriptService.getScript(createdScriptId);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getTitle(), request.script.getTitle());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getTitle(), request.script.getTitle())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          135,
          138,
          141,
          142
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "updateScript[]",
        "body": "@org.junit.Test\npublic void updateScript() {\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript();\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getId();\n    org.apache.ambari.view.pig.resources.scripts.ScriptService.PigScriptRequest request \u003d new org.apache.ambari.view.pig.resources.scripts.ScriptService.PigScriptRequest();\n    request.script \u003d new org.apache.ambari.view.pig.resources.scripts.models.PigScript();\n    request.script.setTitle(\"Updated Script\");\n    javax.ws.rs.core.Response response \u003d scriptService.updateScript(request, createdScriptId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d scriptService.getScript(createdScriptId);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getTitle(), request.script.getTitle());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getTitle(), request.script.getTitle())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          136,
          139,
          142,
          143
        ],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "updateScript[]",
        "body": "@org.junit.Test\npublic void updateScript() {\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript();\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getId();\n    org.apache.ambari.view.pig.resources.scripts.ScriptService.PigScriptRequest request \u003d new org.apache.ambari.view.pig.resources.scripts.ScriptService.PigScriptRequest();\n    request.script \u003d new org.apache.ambari.view.pig.resources.scripts.models.PigScript();\n    request.script.setTitle(\"Updated Script\");\n    javax.ws.rs.core.Response response \u003d scriptService.updateScript(request, createdScriptId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d scriptService.getScript(createdScriptId);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"script\"));\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getTitle(), request.script.getTitle());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"script\")), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (obj.get(\"script\"))).getTitle(), request.script.getTitle())"
      }
    ],
    "deleteScript": [
      {
        "has_assertions": true,
        "assertion_lines": [
          151
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "deleteScript[]",
        "body": "@org.junit.Test\npublic void deleteScript() {\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript();\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getId();\n    javax.ws.rs.core.Response response \u003d scriptService.deleteScript(createdScriptId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);\n    scriptService.getScript(createdScriptId);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          151
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "deleteScript[]",
        "body": "@org.junit.Test\npublic void deleteScript() {\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript();\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getId();\n    javax.ws.rs.core.Response response \u003d scriptService.deleteScript(createdScriptId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);\n    scriptService.getScript(createdScriptId);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          152
        ],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "deleteScript[]",
        "body": "@org.junit.Test\npublic void deleteScript() {\n    javax.ws.rs.core.Response createdScript \u003d doCreateScript();\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript.getEntity())).get(\"script\"))).getId();\n    javax.ws.rs.core.Response response \u003d scriptService.deleteScript(createdScriptId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);\n    scriptService.getScript(createdScriptId);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())"
      }
    ],
    "listScripts": [
      {
        "has_assertions": true,
        "assertion_lines": [
          164,
          167,
          172,
          177
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "listScripts[]",
        "body": "@org.junit.Test\npublic void listScripts() {\n    javax.ws.rs.core.Response createdScript1 \u003d doCreateScript(\"Title 1\", \"/path/to/file.pig\");\n    javax.ws.rs.core.Response createdScript2 \u003d doCreateScript(\"Title 2\", \"/path/to/file.pig\");\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript1.getEntity())).get(\"script\"))).getId();\n    javax.ws.rs.core.Response response \u003d scriptService.getScriptList();\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"scripts\"));\n    java.util.List\u003corg.apache.ambari.view.pig.resources.scripts.models.PigScript\u003e scripts \u003d ((java.util.List\u003corg.apache.ambari.view.pig.resources.scripts.models.PigScript\u003e) (obj.get(\"scripts\")));\n    boolean containsTitle \u003d false;\n    for (org.apache.ambari.view.pig.resources.scripts.models.PigScript script : scripts) {\n        containsTitle \u003d containsTitle || (script.getTitle().compareTo(\"Title 1\") \u003d\u003d 0);\n    }\n    org.junit.Assert.assertTrue(containsTitle);\n    containsTitle \u003d false;\n    for (org.apache.ambari.view.pig.resources.scripts.models.PigScript script : scripts) {\n        containsTitle \u003d containsTitle || (script.getTitle().compareTo(\"Title 2\") \u003d\u003d 0);\n    }\n    org.junit.Assert.assertTrue(containsTitle);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"scripts\")), org.junit.Assert.assertTrue(containsTitle)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          164,
          167,
          172,
          177
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "listScripts[]",
        "body": "@org.junit.Test\npublic void listScripts() {\n    javax.ws.rs.core.Response createdScript1 \u003d doCreateScript(\"Title 1\", \"/path/to/file.pig\");\n    javax.ws.rs.core.Response createdScript2 \u003d doCreateScript(\"Title 2\", \"/path/to/file.pig\");\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript1.getEntity())).get(\"script\"))).getId();\n    javax.ws.rs.core.Response response \u003d scriptService.getScriptList();\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"scripts\"));\n    java.util.List\u003corg.apache.ambari.view.pig.resources.scripts.models.PigScript\u003e scripts \u003d ((java.util.List\u003corg.apache.ambari.view.pig.resources.scripts.models.PigScript\u003e) (obj.get(\"scripts\")));\n    boolean containsTitle \u003d false;\n    for (org.apache.ambari.view.pig.resources.scripts.models.PigScript script : scripts) {\n        containsTitle \u003d containsTitle || (script.getTitle().compareTo(\"Title 1\") \u003d\u003d 0);\n    }\n    org.junit.Assert.assertTrue(containsTitle);\n    containsTitle \u003d false;\n    for (org.apache.ambari.view.pig.resources.scripts.models.PigScript script : scripts) {\n        containsTitle \u003d containsTitle || (script.getTitle().compareTo(\"Title 2\") \u003d\u003d 0);\n    }\n    org.junit.Assert.assertTrue(containsTitle);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"scripts\")), org.junit.Assert.assertTrue(containsTitle)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          165,
          168,
          173,
          178
        ],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "listScripts[]",
        "body": "@org.junit.Test\npublic void listScripts() {\n    javax.ws.rs.core.Response createdScript1 \u003d doCreateScript(\"Title 1\", \"/path/to/file.pig\");\n    javax.ws.rs.core.Response createdScript2 \u003d doCreateScript(\"Title 2\", \"/path/to/file.pig\");\n    java.lang.String createdScriptId \u003d ((org.apache.ambari.view.pig.resources.scripts.models.PigScript) (((org.json.simple.JSONObject) (createdScript1.getEntity())).get(\"script\"))).getId();\n    javax.ws.rs.core.Response response \u003d scriptService.getScriptList();\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"scripts\"));\n    java.util.List\u003corg.apache.ambari.view.pig.resources.scripts.models.PigScript\u003e scripts \u003d ((java.util.List\u003corg.apache.ambari.view.pig.resources.scripts.models.PigScript\u003e) (obj.get(\"scripts\")));\n    boolean containsTitle \u003d false;\n    for (org.apache.ambari.view.pig.resources.scripts.models.PigScript script : scripts) {\n        containsTitle \u003d containsTitle || (script.getTitle().compareTo(\"Title 1\") \u003d\u003d 0);\n    }\n    org.junit.Assert.assertTrue(containsTitle);\n    containsTitle \u003d false;\n    for (org.apache.ambari.view.pig.resources.scripts.models.PigScript script : scripts) {\n        containsTitle \u003d containsTitle || (script.getTitle().compareTo(\"Title 2\") \u003d\u003d 0);\n    }\n    org.junit.Assert.assertTrue(containsTitle);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"scripts\")), org.junit.Assert.assertTrue(containsTitle)"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-views/src/test/java/org/apache/ambari/view/ViewXmlTest.java": {
    "testValidateViewXmls": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "908307f804b5de250b7eb74d07b4ff4371f1a4e1",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testValidateViewXmls[]",
        "body": "@org.junit.Test\npublic void testValidateViewXmls() throws java.lang.Exception {\n    java.util.List\u003cjava.io.File\u003e viewXmlFiles \u003d new java.util.LinkedList\u003cjava.io.File\u003e();\n    java.io.File ambariViewsDir \u003d new java.io.File(\".\");// ambari-views\n\n    java.io.File xsdFile \u003d new java.io.File(\"./target/classes/view.xsd\");\n    // validate each of the view.xml files under ambari-views\n    for (java.io.File file : getViewXmlFiles(viewXmlFiles, ambariViewsDir.listFiles())) {\n        validateViewXml(file, xsdFile);\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/utils/src/test/java/org/apache/ambari/view/utils/ambari/ServicesTest.java": {
    "shouldCheckForEmptyATSUrlInCustomConfig": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckForEmptyATSUrlInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckForEmptyATSUrlInCustomConfig() {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getTimelineServerUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckForEmptyATSUrlInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckForEmptyATSUrlInCustomConfig() {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getTimelineServerUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckForEmptyATSUrlInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckForEmptyATSUrlInCustomConfig() {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getTimelineServerUrl();\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "shouldReturnATSUrlConfiguredInCustomMode": [
      {
        "has_assertions": true,
        "assertion_lines": [
          75
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnATSUrlConfiguredInCustomMode[]",
        "body": "@org.junit.Test\npublic void shouldReturnATSUrlConfiguredInCustomMode() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.ats.url\", org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          75
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnATSUrlConfiguredInCustomMode[]",
        "body": "@org.junit.Test\npublic void shouldReturnATSUrlConfiguredInCustomMode() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.timeline-server.url\", org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          75
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnATSUrlConfiguredInCustomMode[]",
        "body": "@org.junit.Test\npublic void shouldReturnATSUrlConfiguredInCustomMode() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.timeline-server.url\", org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl())"
      }
    ],
    "shouldThrowExceptionIfNoProtocolInCustomMode": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldThrowExceptionIfNoProtocolInCustomMode[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldThrowExceptionIfNoProtocolInCustomMode() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.ats.url\", org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST_PORT);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getTimelineServerUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldThrowExceptionIfNoProtocolInCustomMode[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldThrowExceptionIfNoProtocolInCustomMode() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.timeline-server.url\", org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST_PORT);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getTimelineServerUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldThrowExceptionIfNoProtocolInCustomMode[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldThrowExceptionIfNoProtocolInCustomMode() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.timeline-server.url\", org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST_PORT);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getTimelineServerUrl();\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "shouldReturnATSUrlFromYarnSiteInClusteredMode": [
      {
        "has_assertions": true,
        "assertion_lines": [
          106,
          112
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldReturnATSUrlFromYarnSiteInClusteredMode[]",
        "body": "@org.junit.Test\npublic void shouldReturnATSUrlFromYarnSiteInClusteredMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    Services services \u003d new Services(ambariApi, viewContext);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectation(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    replayAll();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getTimelineServerUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getTimelineServerUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          106,
          112
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldReturnATSUrlFromYarnSiteInClusteredMode[]",
        "body": "@org.junit.Test\npublic void shouldReturnATSUrlFromYarnSiteInClusteredMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    Services services \u003d new Services(ambariApi, viewContext);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectation(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    replayAll();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getTimelineServerUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getTimelineServerUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          106,
          112
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldReturnATSUrlFromYarnSiteInClusteredMode[]",
        "body": "@org.junit.Test\npublic void shouldReturnATSUrlFromYarnSiteInClusteredMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    Services services \u003d new Services(ambariApi, viewContext);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectation(cluster, \"HTTP_ONLY\");\n    expect(ambariApi.getCluster()).andReturn(cluster).anyTimes();\n    replayAll();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getTimelineServerUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getTimelineServerUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getTimelineServerUrl())"
      }
    ],
    "shouldCheckForEmptyYarnRMUrlInCustomConfig": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckForEmptyYarnRMUrlInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckForEmptyYarnRMUrlInCustomConfig() {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckForEmptyYarnRMUrlInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckForEmptyYarnRMUrlInCustomConfig() {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckForEmptyYarnRMUrlInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckForEmptyYarnRMUrlInCustomConfig() {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "shouldCheckIfAllRMUrlsHaveProtocolInCustomConfig": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckIfAllRMUrlsHaveProtocolInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckIfAllRMUrlsHaveProtocolInCustomConfig() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \",\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL2_HOST_PORT);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckIfAllRMUrlsHaveProtocolInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckIfAllRMUrlsHaveProtocolInCustomConfig() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \",\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL2_HOST_PORT);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldCheckIfAllRMUrlsHaveProtocolInCustomConfig[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldCheckIfAllRMUrlsHaveProtocolInCustomConfig() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \",\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL2_HOST_PORT);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "shouldReturnUrlIfSingleIsConfiguredInCustomConfig": [
      {
        "has_assertions": true,
        "assertion_lines": [
          155
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnUrlIfSingleIsConfiguredInCustomConfig[]",
        "body": "@org.junit.Test\npublic void shouldReturnUrlIfSingleIsConfiguredInCustomConfig() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          155
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnUrlIfSingleIsConfiguredInCustomConfig[]",
        "body": "@org.junit.Test\npublic void shouldReturnUrlIfSingleIsConfiguredInCustomConfig() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          155
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnUrlIfSingleIsConfiguredInCustomConfig[]",
        "body": "@org.junit.Test\npublic void shouldReturnUrlIfSingleIsConfiguredInCustomConfig() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    replay(viewContext);\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl())"
      }
    ],
    "shouldConnectToFirstUrlWhenMultipleRMUrlIsConfiguredInCustomConfig": [
      {
        "has_assertions": true,
        "assertion_lines": [
          176
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldConnectToFirstUrlWhenMultipleRMUrlIsConfiguredInCustomConfig[]",
        "body": "@org.junit.Test\npublic void shouldConnectToFirstUrlWhenMultipleRMUrlIsConfiguredInCustomConfig() throws java.io.IOException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider);\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          176
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldConnectToFirstUrlWhenMultipleRMUrlIsConfiguredInCustomConfig[]",
        "body": "@org.junit.Test\npublic void shouldConnectToFirstUrlWhenMultipleRMUrlIsConfiguredInCustomConfig() throws java.io.IOException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider);\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          176
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldConnectToFirstUrlWhenMultipleRMUrlIsConfiguredInCustomConfig[]",
        "body": "@org.junit.Test\npublic void shouldConnectToFirstUrlWhenMultipleRMUrlIsConfiguredInCustomConfig() throws java.io.IOException {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider);\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl())"
      }
    ],
    "shouldConnectToSecondUrlWhenTheFirstURLTimesOut": [
      {
        "has_assertions": true,
        "assertion_lines": [
          199
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldConnectToSecondUrlWhenTheFirstURLTimesOut[]",
        "body": "@org.junit.Test\npublic void shouldConnectToSecondUrlWhenTheFirstURLTimesOut() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          199
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldConnectToSecondUrlWhenTheFirstURLTimesOut[]",
        "body": "@org.junit.Test\npublic void shouldConnectToSecondUrlWhenTheFirstURLTimesOut() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          199
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldConnectToSecondUrlWhenTheFirstURLTimesOut[]",
        "body": "@org.junit.Test\npublic void shouldConnectToSecondUrlWhenTheFirstURLTimesOut() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl())"
      }
    ],
    "shouldThrowExceptionWhenAllUrlCannotBeReached": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldThrowExceptionWhenAllUrlCannotBeReached[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldThrowExceptionWhenAllUrlCannotBeReached() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldThrowExceptionWhenAllUrlCannotBeReached[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldThrowExceptionWhenAllUrlCannotBeReached() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)",
        "assertion_amount": 0,
        "method_signature": "shouldThrowExceptionWhenAllUrlCannotBeReached[]",
        "body": "@org.junit.Test(expected \u003d org.apache.ambari.view.utils.ambari.AmbariApiException.class)\npublic void shouldThrowExceptionWhenAllUrlCannotBeReached() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    services.getRMUrl();\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "shouldReturnActiveRMUrlWhenConnectingToStandby": [
      {
        "has_assertions": true,
        "assertion_lines": [
          244
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnActiveRMUrlWhenConnectingToStandby[]",
        "body": "@org.junit.Test\npublic void shouldReturnActiveRMUrlWhenConnectingToStandby() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"STANDBY\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    java.io.InputStream inputStreamActive \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStreamActive);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n    verify(urlStreamProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          244
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnActiveRMUrlWhenConnectingToStandby[]",
        "body": "@org.junit.Test\npublic void shouldReturnActiveRMUrlWhenConnectingToStandby() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"STANDBY\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    java.io.InputStream inputStreamActive \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStreamActive);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n    verify(urlStreamProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          244
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "shouldReturnActiveRMUrlWhenConnectingToStandby[]",
        "body": "@org.junit.Test\npublic void shouldReturnActiveRMUrlWhenConnectingToStandby() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e map \u003d new java.util.HashMap\u003c\u003e();\n    map.put(\"yarn.resourcemanager.url\", (org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + \", \") + org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2);\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(map);\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"STANDBY\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(false);\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    java.io.InputStream inputStreamActive \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStreamActive);\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n    verify(urlStreamProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl())"
      }
    ],
    "shouldConnectToRMConfiguredInClusterMode": [
      {
        "has_assertions": true,
        "assertion_lines": [
          263,
          269,
          275
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "shouldConnectToRMConfiguredInClusterMode[]",
        "body": "@org.junit.Test\npublic void shouldConnectToRMConfiguredInClusterMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectation(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY_XYZ\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          263,
          269,
          275
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "shouldConnectToRMConfiguredInClusterMode[]",
        "body": "@org.junit.Test\npublic void shouldConnectToRMConfiguredInClusterMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectation(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY_XYZ\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          263,
          269,
          275
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "shouldConnectToRMConfiguredInClusterMode[]",
        "body": "@org.junit.Test\npublic void shouldConnectToRMConfiguredInClusterMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectation(cluster, \"HTTP_ONLY\");\n    expect(ambariApi.getCluster()).andReturn(cluster).anyTimes();\n    replayAll();\n    Services services \u003d new Services(ambariApi, viewContext);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl());\n    reset(cluster);\n    setClusterExpectation(cluster, \"HTTPS_ONLY_XYZ\");\n    replay(cluster);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl())"
      }
    ],
    "shouldConnectToDefaultHostPortInClusterModeWhenWebaddressConfigIsEmpty": [
      {
        "has_assertions": true,
        "assertion_lines": [
          291,
          297
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldConnectToDefaultHostPortInClusterModeWhenWebaddressConfigIsEmpty[]",
        "body": "@org.junit.Test\npublic void shouldConnectToDefaultHostPortInClusterModeWhenWebaddressConfigIsEmpty() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    replayAll();\n    org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl());\n    reset(cluster);\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl()), org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          291,
          297
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldConnectToDefaultHostPortInClusterModeWhenWebaddressConfigIsEmpty[]",
        "body": "@org.junit.Test\npublic void shouldConnectToDefaultHostPortInClusterModeWhenWebaddressConfigIsEmpty() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    replayAll();\n    org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl());\n    reset(cluster);\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl()), org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          291,
          297
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldConnectToDefaultHostPortInClusterModeWhenWebaddressConfigIsEmpty[]",
        "body": "@org.junit.Test\npublic void shouldConnectToDefaultHostPortInClusterModeWhenWebaddressConfigIsEmpty() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(ambariApi.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    replayAll();\n    org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl());\n    reset(cluster);\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTPS_ONLY\");\n    replay(cluster);\n    org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl()), org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl())"
      }
    ],
    "shouldConnectToDefaultHostPortInClusterModeWithHAWhenWebaddressConfigIsEmpty": [
      {
        "has_assertions": true,
        "assertion_lines": [
          319,
          327
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldConnectToDefaultHostPortInClusterModeWithHAWhenWebaddressConfigIsEmpty[]",
        "body": "@org.junit.Test\npublic void shouldConnectToDefaultHostPortInClusterModeWithHAWhenWebaddressConfigIsEmpty() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationInHAWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHAWithEmptyWebappConfig(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl()), org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          319,
          327
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldConnectToDefaultHostPortInClusterModeWithHAWhenWebaddressConfigIsEmpty[]",
        "body": "@org.junit.Test\npublic void shouldConnectToDefaultHostPortInClusterModeWithHAWhenWebaddressConfigIsEmpty() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationInHAWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHAWithEmptyWebappConfig(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl()), org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          319,
          327
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "shouldConnectToDefaultHostPortInClusterModeWithHAWhenWebaddressConfigIsEmpty[]",
        "body": "@org.junit.Test\npublic void shouldConnectToDefaultHostPortInClusterModeWithHAWhenWebaddressConfigIsEmpty() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationInHAWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(ambariApi.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHAWithEmptyWebappConfig(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\") + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals((\"http://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8088\", services.getRMUrl()), org.junit.Assert.assertEquals((\"https://\" + org.apache.ambari.view.utils.ambari.ServicesTest.RM_URL1_HOST) + \":8090\", services.getRMUrl())"
      }
    ],
    "shouldFetchRMUrlsWhileHAEnabledInClusterMode": [
      {
        "has_assertions": true,
        "assertion_lines": [
          351,
          360,
          368,
          377
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "shouldFetchRMUrlsWhileHAEnabledInClusterMode[]",
        "body": "@org.junit.Test\npublic void shouldFetchRMUrlsWhileHAEnabledInClusterMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    Services services \u003d new Services(ambariApi, viewContext);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationInHA(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTP_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          351,
          360,
          368,
          377
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "shouldFetchRMUrlsWhileHAEnabledInClusterMode[]",
        "body": "@org.junit.Test\npublic void shouldFetchRMUrlsWhileHAEnabledInClusterMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    Services services \u003d new Services(ambariApi, viewContext);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationInHA(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTP_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          351,
          360,
          368,
          377
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "shouldFetchRMUrlsWhileHAEnabledInClusterMode[]",
        "body": "@org.junit.Test\npublic void shouldFetchRMUrlsWhileHAEnabledInClusterMode() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    org.apache.ambari.view.URLStreamProvider urlStreamProvider \u003d createNiceMock(org.apache.ambari.view.URLStreamProvider.class);\n    Services services \u003d new Services(ambariApi, viewContext);\n    java.io.InputStream inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationInHA(cluster, \"HTTP_ONLY\");\n    expect(ambariApi.getCluster()).andReturn(cluster).anyTimes();\n    expect(viewContext.getURLStreamProvider()).andReturn(urlStreamProvider).anyTimes();\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replayAll();\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTP_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1, services.getRMUrl());\n    reset(cluster, urlStreamProvider);\n    setClusterExpectationInHA(cluster, \"HTTPS_ONLY\");\n    inputStream \u003d org.apache.commons.io.IOUtils.toInputStream(\"{\\\"clusterInfo\\\": {\\\"haState\\\": \\\"ACTIVE\\\"}}\");\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andThrow(new java.io.IOException());\n    expect(urlStreamProvider.readFrom(eq(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2 + org.apache.ambari.view.utils.ambari.ServicesTest.RM_INFO_API_ENDPOINT), eq(\"GET\"), anyString(), org.easymock.EasyMock.\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003eanyObject())).andReturn(inputStream);\n    replay(cluster, urlStreamProvider);\n    org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTP_RM_URL2, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL1, services.getRMUrl()), org.junit.Assert.assertEquals(org.apache.ambari.view.utils.ambari.ServicesTest.HTTPS_RM_URL2, services.getRMUrl())"
      }
    ],
    "basicGetYARNProtocol": [
      {
        "has_assertions": true,
        "assertion_lines": [
          393
        ],
        "commit": "80448bbfbfca3607af0110912e41d7c73234d0cf",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "basicGetYARNProtocol[]",
        "body": "@org.junit.Test\npublic void basicGetYARNProtocol() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    replayAll();\n    org.junit.Assert.assertEquals(\"http\", services.getYARNProtocol());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"http\", services.getYARNProtocol())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          393
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "basicGetYARNProtocol[]",
        "body": "@org.junit.Test\npublic void basicGetYARNProtocol() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    replayAll();\n    org.junit.Assert.assertEquals(\"http\", services.getYARNProtocol());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"http\", services.getYARNProtocol())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          393
        ],
        "commit": "4cd5ad4e61c2a9a3cfc7e22233b484e8fc88e8b2",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "basicGetYARNProtocol[]",
        "body": "@org.junit.Test\npublic void basicGetYARNProtocol() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d getViewContext(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e());\n    AmbariApi ambariApi \u003d createNiceMock(org.apache.ambari.view.utils.ambari.AmbariApi.class);\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    expect(ambariApi.isClusterAssociated()).andReturn(true).anyTimes();\n    setClusterExpectationWithEmptyWebappConfig(cluster, \"HTTP_ONLY\");\n    expect(ambariApi.getCluster()).andReturn(cluster).anyTimes();\n    Services services \u003d new Services(ambariApi, viewContext);\n    replayAll();\n    org.junit.Assert.assertEquals(\"http\", services.getYARNProtocol());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"http\", services.getYARNProtocol())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-server-spi/src/test/java/org/apache/ambari/spi/upgrade/RepositoryTypeTest.java": {
    "testIsRevertable": [
      {
        "has_assertions": true,
        "assertion_lines": [
          38,
          39,
          40
        ],
        "commit": "ec097f6563b85b49e06c4d41053e101d2c6c8656",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testIsRevertable[]",
        "body": "/**\n * Tests that the repository types support the revertable flag.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testIsRevertable() throws java.lang.Exception {\n    org.junit.Assert.assertTrue(org.apache.ambari.spi.RepositoryType.MAINT.isRevertable());\n    org.junit.Assert.assertTrue(org.apache.ambari.spi.RepositoryType.PATCH.isRevertable());\n    org.junit.Assert.assertFalse(org.apache.ambari.spi.RepositoryType.STANDARD.isRevertable());\n}",
        "assertion_type": "org.junit.Assert.assertTrue(org.apache.ambari.spi.RepositoryType.MAINT.isRevertable()), org.junit.Assert.assertTrue(org.apache.ambari.spi.RepositoryType.PATCH.isRevertable()), org.junit.Assert.assertFalse(org.apache.ambari.spi.RepositoryType.STANDARD.isRevertable())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-agent/src/test/java/org/apache/ambari/tools/zk/ZkMigratorTest.java": {
    "testSetAclsOnSingleNode": [
      {
        "has_assertions": true,
        "assertion_lines": [
          56
        ],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetAclsOnSingleNode[]",
        "body": "@org.junit.Test\npublic void testSetAclsOnSingleNode() throws java.lang.Exception {\n    // Given\n    path(\"/single\");\n    // When\n    setAcls(\"/single\", \"ip:127.0.0.1:rwd\");\n    // Then\n    assertHasAcl(\"/single\", \"ip\", \"127.0.0.1\", (org.apache.zookeeper.ZooDefs.Perms.WRITE | org.apache.zookeeper.ZooDefs.Perms.READ) | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/single\", \"ip\", \"127.0.0.1\", (org.apache.zookeeper.ZooDefs.Perms.WRITE | org.apache.zookeeper.ZooDefs.Perms.READ) | org.apache.zookeeper.ZooDefs.Perms.DELETE)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          56
        ],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetAclsOnSingleNode[]",
        "body": "@org.junit.Test\npublic void testSetAclsOnSingleNode() throws java.lang.Exception {\n    // Given\n    path(\"/single\");\n    // When\n    setAcls(\"/single\", \"ip:127.0.0.1:rwd\");\n    // Then\n    assertHasAcl(\"/single\", \"ip\", \"127.0.0.1\", (org.apache.zookeeper.ZooDefs.Perms.WRITE | org.apache.zookeeper.ZooDefs.Perms.READ) | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/single\", \"ip\", \"127.0.0.1\", (org.apache.zookeeper.ZooDefs.Perms.WRITE | org.apache.zookeeper.ZooDefs.Perms.READ) | org.apache.zookeeper.ZooDefs.Perms.DELETE)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          54
        ],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSetAclsOnSingleNode[]",
        "body": "@org.junit.Test\npublic void testSetAclsOnSingleNode() throws java.lang.Exception {\n    // Given\n    path(\"/single\");\n    // When\n    setAcls(\"/single\", \"ip:127.0.0.1:rwd\");\n    // Then\n    assertHasAcl(\"/single\", \"ip\", \"127.0.0.1\", (org.apache.zookeeper.ZooDefs.Perms.WRITE | org.apache.zookeeper.ZooDefs.Perms.READ) | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/single\", \"ip\", \"127.0.0.1\", (org.apache.zookeeper.ZooDefs.Perms.WRITE | org.apache.zookeeper.ZooDefs.Perms.READ) | org.apache.zookeeper.ZooDefs.Perms.DELETE)"
      }
    ],
    "testSetAclsOnParentAndItsDirectChildren": [
      {
        "has_assertions": true,
        "assertion_lines": [
          68,
          69,
          70
        ],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testSetAclsOnParentAndItsDirectChildren[]",
        "body": "@org.junit.Test\npublic void testSetAclsOnParentAndItsDirectChildren() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/b\");\n    // When\n    setAcls(\"/parent\", \"ip:127.0.0.1:rd\");\n    // Then\n    assertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n    assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n    assertHasAcl(\"/parent/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE), assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE), assertHasAcl(\"/parent/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          68,
          69,
          70
        ],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testSetAclsOnParentAndItsDirectChildren[]",
        "body": "@org.junit.Test\npublic void testSetAclsOnParentAndItsDirectChildren() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/b\");\n    // When\n    setAcls(\"/parent\", \"ip:127.0.0.1:rd\");\n    // Then\n    assertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n    assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n    assertHasAcl(\"/parent/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE), assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE), assertHasAcl(\"/parent/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          66,
          67,
          68
        ],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testSetAclsOnParentAndItsDirectChildren[]",
        "body": "@org.junit.Test\npublic void testSetAclsOnParentAndItsDirectChildren() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/b\");\n    // When\n    setAcls(\"/parent\", \"ip:127.0.0.1:rd\");\n    // Then\n    assertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n    assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n    assertHasAcl(\"/parent/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE), assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE), assertHasAcl(\"/parent/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ | org.apache.zookeeper.ZooDefs.Perms.DELETE)"
      }
    ],
    "testDeleteRecursive": [
      {
        "has_assertions": true,
        "assertion_lines": [
          83,
          84,
          85,
          86
        ],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testDeleteRecursive[]",
        "body": "@org.junit.Test\npublic void testDeleteRecursive() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/b\");\n    path(\"/parent/b/q\");\n    // When\n    deleteZnode(\"/parent\");\n    // Then\n    assertRemoved(\"/parent\");\n    assertRemoved(\"/parent/a\");\n    assertRemoved(\"/parent/b\");\n    assertRemoved(\"/parent/b/q\");\n}",
        "assertion_type": "// Then\nassertRemoved(\"/parent\"), assertRemoved(\"/parent/a\"), assertRemoved(\"/parent/b\"), assertRemoved(\"/parent/b/q\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          83,
          84,
          85,
          86
        ],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testDeleteRecursive[]",
        "body": "@org.junit.Test\npublic void testDeleteRecursive() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/b\");\n    path(\"/parent/b/q\");\n    // When\n    deleteZnode(\"/parent\");\n    // Then\n    assertRemoved(\"/parent\");\n    assertRemoved(\"/parent/a\");\n    assertRemoved(\"/parent/b\");\n    assertRemoved(\"/parent/b/q\");\n}",
        "assertion_type": "// Then\nassertRemoved(\"/parent\"), assertRemoved(\"/parent/a\"), assertRemoved(\"/parent/b\"), assertRemoved(\"/parent/b/q\")"
      }
    ],
    "testDeleteRecursiveWildcard": [
      {
        "has_assertions": true,
        "assertion_lines": [
          99,
          100,
          101,
          102
        ],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testDeleteRecursiveWildcard[]",
        "body": "@org.junit.Test\npublic void testDeleteRecursiveWildcard() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/b\");\n    path(\"/parent/b/q\");\n    // When\n    deleteZnode(\"/parent/*\");\n    // Then\n    assertHasNode(\"/parent\");\n    assertRemoved(\"/parent/a\");\n    assertRemoved(\"/parent/b\");\n    assertRemoved(\"/parent/b/q\");\n}",
        "assertion_type": "// Then\nassertHasNode(\"/parent\"), assertRemoved(\"/parent/a\"), assertRemoved(\"/parent/b\"), assertRemoved(\"/parent/b/q\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          99,
          100,
          101,
          102
        ],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testDeleteRecursiveWildcard[]",
        "body": "@org.junit.Test\npublic void testDeleteRecursiveWildcard() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/b\");\n    path(\"/parent/b/q\");\n    // When\n    deleteZnode(\"/parent/*\");\n    // Then\n    assertHasNode(\"/parent\");\n    assertRemoved(\"/parent/a\");\n    assertRemoved(\"/parent/b\");\n    assertRemoved(\"/parent/b/q\");\n}",
        "assertion_type": "// Then\nassertHasNode(\"/parent\"), assertRemoved(\"/parent/a\"), assertRemoved(\"/parent/b\"), assertRemoved(\"/parent/b/q\")"
      }
    ],
    "testSetAclsRecursively": [
      {
        "has_assertions": true,
        "assertion_lines": [
          115,
          116,
          117,
          118
        ],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testSetAclsRecursively[]",
        "body": "@org.junit.Test\npublic void testSetAclsRecursively() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/a/b\");\n    path(\"/parent/a/b/c\");\n    // When\n    setAcls(\"/parent\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a/b/c\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a/b/c\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          115,
          116,
          117,
          118
        ],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testSetAclsRecursively[]",
        "body": "@org.junit.Test\npublic void testSetAclsRecursively() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/a/b\");\n    path(\"/parent/a/b/c\");\n    // When\n    setAcls(\"/\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a/b/c\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a/b/c\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          81,
          82,
          83,
          84
        ],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testSetAclsRecursively[]",
        "body": "@org.junit.Test\npublic void testSetAclsRecursively() throws java.lang.Exception {\n    // Given\n    path(\"/parent\");\n    path(\"/parent/a\");\n    path(\"/parent/a/b\");\n    path(\"/parent/a/b/c\");\n    // When\n    setAcls(\"/\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/parent/a/b/c\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/parent\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a/b\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/parent/a/b/c\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ)"
      }
    ],
    "testSupportsWildcard": [
      {
        "has_assertions": true,
        "assertion_lines": [
          133,
          134,
          135,
          136,
          137,
          138
        ],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 6,
        "method_signature": "testSupportsWildcard[]",
        "body": "@org.junit.Test\npublic void testSupportsWildcard() throws java.lang.Exception {\n    // Given\n    path(\"/abc123\");\n    path(\"/abcdef/efg\");\n    path(\"/abc/123\");\n    path(\"/x\");\n    path(\"/y/a\");\n    path(\"/ab\");\n    // When\n    setAcls(\"/abc*\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/abc123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/abcdef/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/abc/123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/x\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/y/a\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/ab\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/abc123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/abcdef/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/abc/123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/x\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/y/a\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/ab\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          133,
          134,
          135,
          136,
          137,
          138
        ],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 6,
        "method_signature": "testSupportsWildcard[]",
        "body": "@org.junit.Test\npublic void testSupportsWildcard() throws java.lang.Exception {\n    // Given\n    path(\"/abc123\");\n    path(\"/abcdef/efg\");\n    path(\"/abc/123\");\n    path(\"/x\");\n    path(\"/y/a\");\n    path(\"/ab\");\n    // When\n    setAcls(\"/abc*\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/abc123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/abcdef/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/abc/123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/x\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/y/a\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/ab\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/abc123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/abcdef/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/abc/123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/x\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/y/a\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/ab\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          99,
          100,
          101,
          102,
          103,
          104
        ],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 6,
        "method_signature": "testSupportsWildcard[]",
        "body": "@org.junit.Test\npublic void testSupportsWildcard() throws java.lang.Exception {\n    // Given\n    path(\"/abc123\");\n    path(\"/abcdef/efg\");\n    path(\"/abc/123\");\n    path(\"/x\");\n    path(\"/y/a\");\n    path(\"/ab\");\n    // When\n    setAcls(\"/abc*\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/abc123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/abcdef/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/abc/123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/x\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/y/a\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/ab\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/abc123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/abcdef/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/abc/123\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/x\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/y/a\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/ab\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL)"
      }
    ],
    "testSupportsMultupleWildcards": [
      {
        "has_assertions": true,
        "assertion_lines": [
          154,
          155,
          156,
          157,
          158,
          159,
          160
        ],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 7,
        "method_signature": "testSupportsMultupleWildcards[]",
        "body": "@org.junit.Test\npublic void testSupportsMultupleWildcards() throws java.lang.Exception {\n    // Given\n    path(\"/abc123\");\n    path(\"/a/abcdef\");\n    path(\"/def/abc\");\n    path(\"/xy/abc/efg\");\n    path(\"/a/xyabc\");\n    path(\"/a/b/abc\");\n    path(\"/b\");\n    // When\n    setAcls(\"/*/abc*\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/a/abcdef\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/xy/abc/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/def/abc\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/a/xyabc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/abc123\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/a/b/abc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/b\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/a/abcdef\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/xy/abc/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/def/abc\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/a/xyabc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/abc123\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/a/b/abc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/b\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          154,
          155,
          156,
          157,
          158,
          159,
          160
        ],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 7,
        "method_signature": "testSupportsMultupleWildcards[]",
        "body": "@org.junit.Test\npublic void testSupportsMultupleWildcards() throws java.lang.Exception {\n    // Given\n    path(\"/abc123\");\n    path(\"/a/abcdef\");\n    path(\"/def/abc\");\n    path(\"/xy/abc/efg\");\n    path(\"/a/xyabc\");\n    path(\"/a/b/abc\");\n    path(\"/b\");\n    // When\n    setAcls(\"/*/abc*\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/a/abcdef\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/xy/abc/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/def/abc\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/a/xyabc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/abc123\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/a/b/abc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/b\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/a/abcdef\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/xy/abc/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/def/abc\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/a/xyabc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/abc123\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/a/b/abc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/b\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          120,
          121,
          122,
          123,
          124,
          125,
          126
        ],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 7,
        "method_signature": "testSupportsMultupleWildcards[]",
        "body": "@org.junit.Test\npublic void testSupportsMultupleWildcards() throws java.lang.Exception {\n    // Given\n    path(\"/abc123\");\n    path(\"/a/abcdef\");\n    path(\"/def/abc\");\n    path(\"/xy/abc/efg\");\n    path(\"/a/xyabc\");\n    path(\"/a/b/abc\");\n    path(\"/b\");\n    // When\n    setAcls(\"/*/abc*\", \"ip:127.0.0.1:r\");\n    // Then\n    assertHasAcl(\"/a/abcdef\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/xy/abc/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/def/abc\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ);\n    assertHasAcl(\"/a/xyabc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/abc123\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/a/b/abc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n    assertHasAcl(\"/b\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/a/abcdef\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/xy/abc/efg\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/def/abc\", \"ip\", \"127.0.0.1\", org.apache.zookeeper.ZooDefs.Perms.READ), assertHasAcl(\"/a/xyabc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/abc123\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/a/b/abc\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL), assertHasAcl(\"/b\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.ALL)"
      }
    ],
    "testSupportsWorldScheme": [
      {
        "has_assertions": true,
        "assertion_lines": [
          170
        ],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSupportsWorldScheme[]",
        "body": "@org.junit.Test\npublic void testSupportsWorldScheme() throws java.lang.Exception {\n    // Given\n    path(\"/unprotected\");\n    // When\n    setAcls(\"/unprotected\", \"world:anyone:r\");\n    // Then\n    assertHasAcl(\"/unprotected\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.READ);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/unprotected\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.READ)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          170
        ],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSupportsWorldScheme[]",
        "body": "@org.junit.Test\npublic void testSupportsWorldScheme() throws java.lang.Exception {\n    // Given\n    path(\"/unprotected\");\n    // When\n    setAcls(\"/unprotected\", \"world:anyone:r\");\n    // Then\n    assertHasAcl(\"/unprotected\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.READ);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/unprotected\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.READ)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          136
        ],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSupportsWorldScheme[]",
        "body": "@org.junit.Test\npublic void testSupportsWorldScheme() throws java.lang.Exception {\n    // Given\n    path(\"/unprotected\");\n    // When\n    setAcls(\"/unprotected\", \"world:anyone:r\");\n    // Then\n    assertHasAcl(\"/unprotected\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.READ);\n}",
        "assertion_type": "// Then\nassertHasAcl(\"/unprotected\", \"world\", \"anyone\", org.apache.zookeeper.ZooDefs.Perms.READ)"
      }
    ],
    "testRejectsUnsupportedScheme": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)",
        "assertion_amount": 0,
        "method_signature": "testRejectsUnsupportedScheme[]",
        "body": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)\npublic void testRejectsUnsupportedScheme() throws java.lang.Exception {\n    path(\"/any\");\n    setAcls(\"/any\", \"unsupported:anyone:r\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)",
        "assertion_amount": 0,
        "method_signature": "testRejectsUnsupportedScheme[]",
        "body": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)\npublic void testRejectsUnsupportedScheme() throws java.lang.Exception {\n    path(\"/any\");\n    setAcls(\"/any\", \"unsupported:anyone:r\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)",
        "assertion_amount": 0,
        "method_signature": "testRejectsUnsupportedScheme[]",
        "body": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)\npublic void testRejectsUnsupportedScheme() throws java.lang.Exception {\n    path(\"/any\");\n    setAcls(\"/any\", \"unsupported:anyone:r\");\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testRejectUnsupportedPermission": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)",
        "assertion_amount": 0,
        "method_signature": "testRejectUnsupportedPermission[]",
        "body": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)\npublic void testRejectUnsupportedPermission() throws java.lang.Exception {\n    path(\"/any\");\n    setAcls(\"/any\", \"world:anyone:invalid\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)",
        "assertion_amount": 0,
        "method_signature": "testRejectUnsupportedPermission[]",
        "body": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)\npublic void testRejectUnsupportedPermission() throws java.lang.Exception {\n    path(\"/any\");\n    setAcls(\"/any\", \"world:anyone:invalid\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)",
        "assertion_amount": 0,
        "method_signature": "testRejectUnsupportedPermission[]",
        "body": "@org.junit.Test(expected \u003d java.lang.IllegalArgumentException.class)\npublic void testRejectUnsupportedPermission() throws java.lang.Exception {\n    path(\"/any\");\n    setAcls(\"/any\", \"world:anyone:invalid\");\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testIgnoresNonExistentNode": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testIgnoresNonExistentNode[]",
        "body": "@org.junit.Test\npublic void testIgnoresNonExistentNode() throws java.lang.Exception {\n    setAcls(\"/nonexistent\", \"world:anyone:rw\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "8d129d414a9e33975620d5b0c430a7fba6d914b3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testIgnoresNonExistentNode[]",
        "body": "@org.junit.Test\npublic void testIgnoresNonExistentNode() throws java.lang.Exception {\n    setAcls(\"/nonexistent\", \"world:anyone:rw\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "283ede623d7e3a6291b21165e996a0cd549bad6f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testIgnoresNonExistentNode[]",
        "body": "@org.junit.Test\npublic void testIgnoresNonExistentNode() throws java.lang.Exception {\n    setAcls(\"/nonexistent\", \"world:anyone:rw\");\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/files/FileService.java": {
    "hdfsSmokeTest": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "9cdd3e8a15f4aa6d1dd7b485ce6d530b06f0f7de",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "hdfsSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to HDFS\n *\n * @param context\n * \t\tView Context\n */\npublic static void hdfsSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        com.google.common.base.Optional\u003cjava.util.Map\u003cjava.lang.String, java.lang.String\u003e\u003e props \u003d org.apache.ambari.view.commons.hdfs.ViewPropertyHelper.getViewConfigs(context, org.apache.ambari.view.pig.resources.files.FileService.VIEW_CONF_KEYVALUES);\n        org.apache.ambari.view.utils.hdfs.HdfsApi api;\n        if (props.isPresent()) {\n            api \u003d org.apache.ambari.view.utils.hdfs.HdfsUtil.connectToHDFSApi(context, props.get());\n        } else {\n            api \u003d org.apache.ambari.view.utils.hdfs.HdfsUtil.connectToHDFSApi(context);\n        }\n        api.getStatus();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        org.apache.ambari.view.pig.resources.files.FileService.LOG.error(\"Error occurred : \", ex);\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        org.apache.ambari.view.pig.resources.files.FileService.LOG.error(\"Error occurred : \", ex);\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "e82d03c8a66100ec9c2ceb91d4c5a9cc6e427847",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "hdfsSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to HDFS\n *\n * @param context\n * \t\tView Context\n */\npublic static void hdfsSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.utils.hdfs.HdfsApi api \u003d org.apache.ambari.view.utils.hdfs.HdfsUtil.connectToHDFSApi(context);\n        api.getStatus();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        org.apache.ambari.view.pig.resources.files.FileService.LOG.error(\"Error occurred : \", ex);\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        org.apache.ambari.view.pig.resources.files.FileService.LOG.error(\"Error occurred : \", ex);\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "b259c42df8c7ad79ce55f2937238c06c7c962576",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "hdfsSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to HDFS\n *\n * @param context\n * \t\tView Context\n */\npublic static void hdfsSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.utils.hdfs.HdfsApi api \u003d org.apache.ambari.view.utils.hdfs.HdfsUtil.connectToHDFSApi(context);\n        api.getStatus();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        org.apache.ambari.view.pig.resources.files.FileService.LOG.error(\"Error occurred : \", ex);\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        org.apache.ambari.view.pig.resources.files.FileService.LOG.error(\"Error occurred : \", ex);\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "userhomeSmokeTest": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "9cdd3e8a15f4aa6d1dd7b485ce6d530b06f0f7de",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "userhomeSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to User HomeDirectory\n *\n * @param context\n * \t\tView Context\n */\npublic static void userhomeSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.commons.hdfs.UserService userservice \u003d new org.apache.ambari.view.commons.hdfs.UserService(context, org.apache.ambari.view.pig.resources.files.FileService.getViewConfigs(context));\n        userservice.homeDir();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "e82d03c8a66100ec9c2ceb91d4c5a9cc6e427847",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "userhomeSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to User HomeDirectory\n *\n * @param context\n * \t\tView Context\n */\npublic static void userhomeSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.commons.hdfs.UserService userservice \u003d new org.apache.ambari.view.commons.hdfs.UserService(context);\n        userservice.homeDir();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "b259c42df8c7ad79ce55f2937238c06c7c962576",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "userhomeSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to User HomeDirectory\n *\n * @param context\n * \t\tView Context\n */\npublic static void userhomeSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.commons.hdfs.UserService userservice \u003d new org.apache.ambari.view.commons.hdfs.UserService(context);\n        userservice.homeDir();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/ServerTestBase.java": {
    "setupTest": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "39bda71b43c5572f057fd6c3cb6cbd91fcefa698",
        "annotations": "@org.junit.BeforeClass",
        "assertion_amount": 0,
        "method_signature": "setupTest[]",
        "body": "/**\n * Create and populate the DB. Start the AmbariServer.\n *\n * @throws Exception\n */\n@org.junit.BeforeClass\npublic static void setupTest() throws java.lang.Exception {\n    if (!org.apache.ambari.funtest.server.tests.ServerTestBase.isInitialized) {\n        java.util.Properties properties \u003d org.apache.ambari.funtest.server.tests.ServerTestBase.readConfigFile();\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_PERSISTENCE_TYPE.getKey(), \"remote\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_URL.getKey(), org.apache.ambari.server.configuration.Configuration.JDBC_IN_MEMORY_URL);\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_DRIVER.getKey(), org.apache.ambari.server.configuration.Configuration.JDBC_IN_MEMORY_DRIVER);\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.OS_VERSION.getKey(), \"centos7\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.AGENT_USE_SSL.getKey(), \"false\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.CLIENT_API_PORT.getKey(), java.lang.Integer.toString(org.apache.ambari.funtest.server.tests.ServerTestBase.serverPort));\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_ONE_WAY_SSL_PORT.getKey(), java.lang.Integer.toString(org.apache.ambari.funtest.server.tests.ServerTestBase.serverAgentPort));\n        java.lang.String tmpDir \u003d java.lang.System.getProperty(\"java.io.tmpdir\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_KSTR_DIR.getKey(), tmpDir);\n        org.apache.ambari.server.controller.ControllerModule testModule \u003d new org.apache.ambari.server.controller.ControllerModule(properties);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.injector \u003d com.google.inject.Guice.createInjector(testModule, new org.apache.ambari.server.audit.AuditLoggerModule(), new org.apache.ambari.server.ldap.LdapModule());\n        org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(com.google.inject.persist.PersistService.class).start();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.initDB();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.server \u003d org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.funtest.server.LocalAmbariServer.class);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.serverThread \u003d new java.lang.Thread(org.apache.ambari.funtest.server.tests.ServerTestBase.server);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.serverThread.start();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.waitForServer();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.isInitialized \u003d true;\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "9911267f0727c99f5355a60df06584023dd49983",
        "annotations": "@org.junit.BeforeClass",
        "assertion_amount": 0,
        "method_signature": "setupTest[]",
        "body": "/**\n * Create and populate the DB. Start the AmbariServer.\n *\n * @throws Exception\n */\n@org.junit.BeforeClass\npublic static void setupTest() throws java.lang.Exception {\n    if (!org.apache.ambari.funtest.server.tests.ServerTestBase.isInitialized) {\n        java.util.Properties properties \u003d new java.util.Properties();\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_PERSISTENCE_TYPE.getKey(), \"remote\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_URL.getKey(), org.apache.ambari.server.configuration.Configuration.JDBC_IN_MEMORY_URL);\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_DRIVER.getKey(), org.apache.ambari.server.configuration.Configuration.JDBC_IN_MEMORY_DRIVER);\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.METADATA_DIR_PATH.getKey(), \"src/test/resources/stacks\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_VERSION_FILE.getKey(), \"src/test/resources/version\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.OS_VERSION.getKey(), \"centos6\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SHARED_RESOURCES_DIR.getKey(), \"src/test/resources/\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.AGENT_USE_SSL.getKey(), \"false\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.CLIENT_API_PORT.getKey(), java.lang.Integer.toString(org.apache.ambari.funtest.server.tests.ServerTestBase.serverPort));\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_ONE_WAY_SSL_PORT.getKey(), java.lang.Integer.toString(org.apache.ambari.funtest.server.tests.ServerTestBase.serverAgentPort));\n        java.lang.String tmpDir \u003d java.lang.System.getProperty(\"java.io.tmpdir\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_KSTR_DIR.getKey(), tmpDir);\n        org.apache.ambari.server.controller.ControllerModule testModule \u003d new org.apache.ambari.server.controller.ControllerModule(properties);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.injector \u003d com.google.inject.Guice.createInjector(testModule);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(com.google.inject.persist.PersistService.class).start();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.initDB();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.server \u003d org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.funtest.server.LocalAmbariServer.class);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.serverThread \u003d new java.lang.Thread(org.apache.ambari.funtest.server.tests.ServerTestBase.server);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.serverThread.start();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.waitForServer();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.isInitialized \u003d true;\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "b38cdb9b77e489f28f656e89964c04e65f9b326f",
        "annotations": "@org.junit.BeforeClass",
        "assertion_amount": 0,
        "method_signature": "setupTest[]",
        "body": "/**\n * Create and populate the DB. Start the AmbariServer.\n *\n * @throws Exception\n */\n@org.junit.BeforeClass\npublic static void setupTest() throws java.lang.Exception {\n    if (!org.apache.ambari.funtest.server.tests.ServerTestBase.isInitialized) {\n        java.util.Properties properties \u003d new java.util.Properties();\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_PERSISTENCE_TYPE_KEY, \"remote\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_URL_KEY, org.apache.ambari.server.configuration.Configuration.JDBC_IN_MEMORY_URL);\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_DRIVER_KEY, org.apache.ambari.server.configuration.Configuration.JDBC_IN_MEMROY_DRIVER);\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.METADATA_DIR_PATH, \"src/test/resources/stacks\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_VERSION_FILE, \"src/test/resources/version\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.OS_VERSION_KEY, \"centos6\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SHARED_RESOURCES_DIR_KEY, \"src/test/resources/\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.AGENT_USE_SSL, \"false\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.CLIENT_API_PORT_KEY, java.lang.Integer.toString(org.apache.ambari.funtest.server.tests.ServerTestBase.serverPort));\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_ONE_WAY_SSL_PORT_KEY, java.lang.Integer.toString(org.apache.ambari.funtest.server.tests.ServerTestBase.serverAgentPort));\n        java.lang.String tmpDir \u003d java.lang.System.getProperty(\"java.io.tmpdir\");\n        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_KSTR_DIR_KEY, tmpDir);\n        org.apache.ambari.server.controller.ControllerModule testModule \u003d new org.apache.ambari.server.controller.ControllerModule(properties);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.injector \u003d com.google.inject.Guice.createInjector(testModule);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(com.google.inject.persist.PersistService.class).start();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.initDB();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.server \u003d org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.funtest.server.LocalAmbariServer.class);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.serverThread \u003d new java.lang.Thread(org.apache.ambari.funtest.server.tests.ServerTestBase.server);\n        org.apache.ambari.funtest.server.tests.ServerTestBase.serverThread.start();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.waitForServer();\n        org.apache.ambari.funtest.server.tests.ServerTestBase.isInitialized \u003d true;\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/metrics-sink/src/Test/java/org/apache/hadoop/metrics2/sink/SqlServerSinkTest.java": {
    "testInit": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testInit[]",
        "body": "@org.junit.Test\npublic void testInit() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    // replay\n    org.easymock.EasyMock.replay(configuration);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d createInstance();\n    sink.init(configuration);\n    org.easymock.EasyMock.verify(configuration);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testInit[]",
        "body": "@org.junit.Test\npublic void testInit() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.easymock.EasyMock.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    // replay\n    org.easymock.EasyMock.replay(configuration);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d new org.apache.hadoop.metrics2.sink.SqlServerSink();\n    sink.init(configuration);\n    org.easymock.EasyMock.verify(configuration);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testEnsureConnection": [
      {
        "has_assertions": true,
        "assertion_lines": [
          79,
          82
        ],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testEnsureConnection[]",
        "body": "@org.junit.Test\npublic void testEnsureConnection() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(java.sql.Connection.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d createInstance();\n    sink.init(configuration);\n    org.junit.Assert.assertTrue(sink.ensureConnection());\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    org.junit.Assert.assertTrue(sink.ensureConnection());\n    org.easymock.EasyMock.verify(configuration, connection);\n}",
        "assertion_type": "org.junit.Assert.assertTrue(sink.ensureConnection())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          83,
          86
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testEnsureConnection[]",
        "body": "@org.junit.Test\npublic void testEnsureConnection() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.easymock.EasyMock.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d new org.apache.hadoop.metrics2.sink.SqlServerSink();\n    sink.init(configuration);\n    org.junit.Assert.assertFalse(sink.ensureConnection());\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    org.junit.Assert.assertTrue(sink.ensureConnection());\n    org.easymock.EasyMock.verify(configuration, connection);\n}",
        "assertion_type": "org.junit.Assert.assertFalse(sink.ensureConnection()), org.junit.Assert.assertTrue(sink.ensureConnection())"
      }
    ],
    "testFlush": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testFlush[]",
        "body": "@org.junit.Test\npublic void testFlush() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(java.sql.Connection.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    connection.close();\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d createInstance();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    sink.ensureConnection();\n    sink.flush();\n    org.easymock.EasyMock.verify(configuration, connection);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testFlush[]",
        "body": "@org.junit.Test\npublic void testFlush() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.easymock.EasyMock.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    connection.close();\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d new org.apache.hadoop.metrics2.sink.SqlServerSink();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    sink.ensureConnection();\n    sink.flush();\n    org.easymock.EasyMock.verify(configuration, connection);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testGetMetricRecordID": [
      {
        "has_assertions": true,
        "assertion_lines": [
          147
        ],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetMetricRecordID[]",
        "body": "@org.junit.Test\npublic void testGetMetricRecordID() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(java.sql.CallableStatement.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(connection.prepareCall(\"{call dbo.uspGetMetricRecord(?, ?, ?, ?, ?, ?, ?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setNString(1, \"context\");\n    cstmt.setNString(2, \"typeName\");\n    cstmt.setNString(3, \"nodeName\");\n    cstmt.setNString(4, \"ip\");\n    cstmt.setNString(5, \"clusterName\");\n    cstmt.setNString(6, \"serviceName\");\n    cstmt.setNString(7, \"tagPairs\");\n    cstmt.setLong(8, 9999L);\n    cstmt.registerOutParameter(9, java.sql.Types.BIGINT);\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(cstmt.execute()).andReturn(true);\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(cstmt.getLong(9)).andReturn(99L);\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(cstmt.wasNull()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection, cstmt);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d createInstance();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    org.junit.Assert.assertEquals(99, sink.getMetricRecordID(\"context\", \"typeName\", \"nodeName\", \"ip\", \"clusterName\", \"serviceName\", \"tagPairs\", 9999L));\n    org.easymock.EasyMock.verify(configuration, connection, cstmt);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(99, sink.getMetricRecordID(\"context\", \"typeName\", \"nodeName\", \"ip\", \"clusterName\", \"serviceName\", \"tagPairs\", 9999L))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          151
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetMetricRecordID[]",
        "body": "@org.junit.Test\npublic void testGetMetricRecordID() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.easymock.EasyMock.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d org.easymock.EasyMock.createNiceMock(java.sql.CallableStatement.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    org.easymock.EasyMock.expect(connection.prepareCall(\"{call dbo.uspGetMetricRecord(?, ?, ?, ?, ?, ?, ?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setNString(1, \"context\");\n    cstmt.setNString(2, \"typeName\");\n    cstmt.setNString(3, \"nodeName\");\n    cstmt.setNString(4, \"ip\");\n    cstmt.setNString(5, \"clusterName\");\n    cstmt.setNString(6, \"serviceName\");\n    cstmt.setNString(7, \"tagPairs\");\n    cstmt.setLong(8, 9999L);\n    cstmt.registerOutParameter(9, java.sql.Types.BIGINT);\n    org.easymock.EasyMock.expect(cstmt.execute()).andReturn(true);\n    org.easymock.EasyMock.expect(cstmt.getLong(9)).andReturn(99L);\n    org.easymock.EasyMock.expect(cstmt.wasNull()).andReturn(false);\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection, cstmt);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d new org.apache.hadoop.metrics2.sink.SqlServerSink();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    org.junit.Assert.assertEquals(99, sink.getMetricRecordID(\"context\", \"typeName\", \"nodeName\", \"ip\", \"clusterName\", \"serviceName\", \"tagPairs\", 9999L));\n    org.easymock.EasyMock.verify(configuration, connection, cstmt);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(99, sink.getMetricRecordID(\"context\", \"typeName\", \"nodeName\", \"ip\", \"clusterName\", \"serviceName\", \"tagPairs\", 9999L))"
      }
    ],
    "testGetMetricRecordID_nullReturn": [
      {
        "has_assertions": true,
        "assertion_lines": [
          187
        ],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetMetricRecordID_nullReturn[]",
        "body": "@org.junit.Test\npublic void testGetMetricRecordID_nullReturn() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(java.sql.CallableStatement.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(connection.prepareCall(\"{call dbo.uspGetMetricRecord(?, ?, ?, ?, ?, ?, ?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setNString(1, \"context\");\n    cstmt.setNString(2, \"typeName\");\n    cstmt.setNString(3, \"nodeName\");\n    cstmt.setNString(4, \"ip\");\n    cstmt.setNString(5, \"clusterName\");\n    cstmt.setNString(6, \"serviceName\");\n    cstmt.setNString(7, \"tagPairs\");\n    cstmt.setLong(8, 9999L);\n    cstmt.registerOutParameter(9, java.sql.Types.BIGINT);\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(cstmt.execute()).andReturn(true);\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(cstmt.getLong(9)).andReturn(99L);\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(cstmt.wasNull()).andReturn(true);\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection, cstmt);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d createInstance();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    org.junit.Assert.assertEquals(-1, sink.getMetricRecordID(\"context\", \"typeName\", \"nodeName\", \"ip\", \"clusterName\", \"serviceName\", \"tagPairs\", 9999L));\n    org.easymock.EasyMock.verify(configuration, connection, cstmt);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, sink.getMetricRecordID(\"context\", \"typeName\", \"nodeName\", \"ip\", \"clusterName\", \"serviceName\", \"tagPairs\", 9999L))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          191
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetMetricRecordID_nullReturn[]",
        "body": "@org.junit.Test\npublic void testGetMetricRecordID_nullReturn() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.easymock.EasyMock.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d org.easymock.EasyMock.createNiceMock(java.sql.CallableStatement.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    org.easymock.EasyMock.expect(connection.prepareCall(\"{call dbo.uspGetMetricRecord(?, ?, ?, ?, ?, ?, ?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setNString(1, \"context\");\n    cstmt.setNString(2, \"typeName\");\n    cstmt.setNString(3, \"nodeName\");\n    cstmt.setNString(4, \"ip\");\n    cstmt.setNString(5, \"clusterName\");\n    cstmt.setNString(6, \"serviceName\");\n    cstmt.setNString(7, \"tagPairs\");\n    cstmt.setLong(8, 9999L);\n    cstmt.registerOutParameter(9, java.sql.Types.BIGINT);\n    org.easymock.EasyMock.expect(cstmt.execute()).andReturn(true);\n    org.easymock.EasyMock.expect(cstmt.getLong(9)).andReturn(99L);\n    org.easymock.EasyMock.expect(cstmt.wasNull()).andReturn(true);\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection, cstmt);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d new org.apache.hadoop.metrics2.sink.SqlServerSink();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    org.junit.Assert.assertEquals(-1, sink.getMetricRecordID(\"context\", \"typeName\", \"nodeName\", \"ip\", \"clusterName\", \"serviceName\", \"tagPairs\", 9999L));\n    org.easymock.EasyMock.verify(configuration, connection, cstmt);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(-1, sink.getMetricRecordID(\"context\", \"typeName\", \"nodeName\", \"ip\", \"clusterName\", \"serviceName\", \"tagPairs\", 9999L))"
      }
    ],
    "testInsertMetricValue": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testInsertMetricValue[]",
        "body": "@org.junit.Test\npublic void testInsertMetricValue() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d org.apache.hadoop.metrics2.sink.SqlServerSinkTest.createNiceMock(java.sql.CallableStatement.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(connection.prepareCall(\"{call dbo.uspInsertMetricValue(?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setLong(1, 9999L);\n    cstmt.setNString(2, \"metricName\");\n    cstmt.setNString(3, \"metricValue\");\n    org.apache.hadoop.metrics2.sink.SqlServerSinkTest.expect(cstmt.execute()).andReturn(true);\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection, cstmt);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d createInstance();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    sink.insertMetricValue(9999L, \"metricName\", \"metricValue\");\n    org.easymock.EasyMock.verify(configuration, connection, cstmt);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testInsertMetricValue[]",
        "body": "@org.junit.Test\npublic void testInsertMetricValue() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.easymock.EasyMock.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d org.easymock.EasyMock.createNiceMock(java.sql.CallableStatement.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    org.easymock.EasyMock.expect(connection.prepareCall(\"{call dbo.uspInsertMetricValue(?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setLong(1, 9999L);\n    cstmt.setNString(2, \"metricName\");\n    cstmt.setNString(3, \"metricValue\");\n    org.easymock.EasyMock.expect(cstmt.execute()).andReturn(true);\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection, cstmt);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d new org.apache.hadoop.metrics2.sink.SqlServerSink();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    sink.insertMetricValue(9999L, \"metricName\", \"metricValue\");\n    org.easymock.EasyMock.verify(configuration, connection, cstmt);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testPutMetrics": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "682e55d04a5a82f42178855fabaa27c573a8558f",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "testPutMetrics[]",
        "body": "public abstract void testPutMetrics() throws java.lang.Exception;",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testPutMetrics[]",
        "body": "@org.junit.Test\npublic void testPutMetrics() throws java.lang.Exception {\n    org.apache.commons.configuration.SubsetConfiguration configuration \u003d org.easymock.EasyMock.createNiceMock(org.apache.commons.configuration.SubsetConfiguration.class);\n    java.sql.Connection connection \u003d org.easymock.EasyMock.createNiceMock(java.sql.Connection.class);\n    java.sql.CallableStatement cstmt \u003d org.easymock.EasyMock.createNiceMock(java.sql.CallableStatement.class);\n    org.apache.hadoop.metrics2.MetricsRecord record \u003d org.easymock.EasyMock.createNiceMock(org.apache.hadoop.metrics2.MetricsRecord.class);\n    org.apache.hadoop.metrics2.Metric metric \u003d org.easymock.EasyMock.createNiceMock(org.apache.hadoop.metrics2.Metric.class);\n    // set expectations\n    org.easymock.EasyMock.expect(configuration.getParent()).andReturn(null);\n    org.easymock.EasyMock.expect(configuration.getPrefix()).andReturn(\"prefix\");\n    org.easymock.EasyMock.expect(configuration.getString(\"databaseUrl\")).andReturn(\"url\");\n    org.easymock.EasyMock.expect(record.context()).andReturn(\"context\");\n    org.easymock.EasyMock.expect(record.name()).andReturn(\"typeName\");\n    org.easymock.EasyMock.expect(record.tags()).andReturn(new java.util.HashSet\u003corg.apache.hadoop.metrics2.MetricsTag\u003e());\n    org.easymock.EasyMock.expect(record.timestamp()).andReturn(9999L);\n    org.easymock.EasyMock.expect(record.metrics()).andReturn(java.util.Collections.singleton(metric));\n    org.easymock.EasyMock.expect(metric.name()).andReturn(\"name\").anyTimes();\n    org.easymock.EasyMock.expect(metric.value()).andReturn(1234);\n    org.easymock.EasyMock.expect(connection.prepareCall(\"{call dbo.uspGetMetricRecord(?, ?, ?, ?, ?, ?, ?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setNString(1, \"context\");\n    cstmt.setNString(2, \"typeName\");\n    cstmt.setNString(org.easymock.EasyMock.eq(3), ((java.lang.String) (org.easymock.EasyMock.anyObject())));\n    cstmt.setNString(org.easymock.EasyMock.eq(4), ((java.lang.String) (org.easymock.EasyMock.anyObject())));\n    cstmt.setNString(org.easymock.EasyMock.eq(5), ((java.lang.String) (org.easymock.EasyMock.anyObject())));\n    cstmt.setNString(6, \"prefix\");\n    cstmt.setNString(7, \"sourceName:prefix\");\n    cstmt.setLong(8, 9999L);\n    cstmt.registerOutParameter(9, java.sql.Types.BIGINT);\n    org.easymock.EasyMock.expect(cstmt.execute()).andReturn(true);\n    org.easymock.EasyMock.expect(cstmt.getLong(9)).andReturn(99L);\n    org.easymock.EasyMock.expect(cstmt.wasNull()).andReturn(false);\n    org.easymock.EasyMock.expect(connection.prepareCall(\"{call dbo.uspInsertMetricValue(?, ?, ?)}\")).andReturn(cstmt);\n    cstmt.setLong(1, 99L);\n    cstmt.setNString(2, \"name\");\n    cstmt.setNString(3, \"1234\");\n    org.easymock.EasyMock.expect(cstmt.execute()).andReturn(true);\n    // replay\n    org.easymock.EasyMock.replay(configuration, connection, cstmt, record, metric);\n    org.apache.hadoop.metrics2.sink.SqlServerSink sink \u003d new org.apache.hadoop.metrics2.sink.SqlServerSink();\n    sink.init(configuration);\n    com.microsoft.sqlserver.jdbc.SQLServerDriver.setConnection(connection);\n    sink.putMetrics(record);\n    org.easymock.EasyMock.verify(configuration, connection, cstmt, record, metric);\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/NoOpProviderTest.java": {
    "testGetKeyPropertyIds": [
      {
        "has_assertions": true,
        "assertion_lines": [
          38
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetKeyPropertyIds[]",
        "body": "@org.junit.Test\npublic void testGetKeyPropertyIds() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.NoOpProvider provider \u003d new org.apache.ambari.msi.NoOpProvider(Resource.Type.Workflow, clusterDefinition);\n    junit.framework.Assert.assertNotNull(provider.getKeyPropertyIds());\n}",
        "assertion_type": "junit.framework.Assert.assertNotNull(provider.getKeyPropertyIds())"
      }
    ],
    "testCheckPropertyIds": [
      {
        "has_assertions": true,
        "assertion_lines": [
          45
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testCheckPropertyIds[]",
        "body": "@org.junit.Test\npublic void testCheckPropertyIds() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.NoOpProvider provider \u003d new org.apache.ambari.msi.NoOpProvider(Resource.Type.Workflow, clusterDefinition);\n    junit.framework.Assert.assertTrue(provider.checkPropertyIds(java.util.Collections.singleton(\"id\")).isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertTrue(provider.checkPropertyIds(java.util.Collections.singleton(\"id\")).isEmpty())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-agent/src/main/java/org/apache/ambari/tools/jce/JcePolicyInfo.java": {
    "testUnlimitedKeyJCEPolicy": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "9112148e597baedaab1dea15c8da299dee6f63c7",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "testUnlimitedKeyJCEPolicy[]",
        "body": "/**\n * Test if the JCE policy supports unlimited keys\n */\nprivate static void testUnlimitedKeyJCEPolicy() {\n    java.lang.System.out.print(\"Unlimited Key JCE Policy: \");\n    try {\n        boolean unlimited \u003d javax.crypto.Cipher.getMaxAllowedKeyLength(\"RC5\") \u003e\u003d 256;\n        java.lang.System.out.println(unlimited);\n        // If the unlimited key JCE policy is installed exit with a 0 since that indicates a non-error;\n        // If the unlimited key JCE policy is not installed exit with a 1\n        java.lang.System.exit(unlimited ? 0 : 1);\n    } catch (java.security.NoSuchAlgorithmException e) {\n        java.lang.System.out.println(\"unknown [error]\");\n        java.lang.System.exit(-1);\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/test/java/org/apache/ambari/view/pig/test/HelpTest.java": {
    "configTest": [
      {
        "has_assertions": true,
        "assertion_lines": [
          54,
          57,
          58
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "configTest[]",
        "body": "@org.junit.Test\npublic void configTest() {\n    javax.ws.rs.core.Response response \u003d helpService.config();\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"webhdfs.url\"));\n    org.junit.Assert.assertEquals(hdfsURI, obj.get(\"webhdfs.url\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"webhdfs.url\")), org.junit.Assert.assertEquals(hdfsURI, obj.get(\"webhdfs.url\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          54,
          57,
          58
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "configTest[]",
        "body": "@org.junit.Test\npublic void configTest() {\n    javax.ws.rs.core.Response response \u003d helpService.config();\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"webhdfs.url\"));\n    org.junit.Assert.assertEquals(hdfsURI, obj.get(\"webhdfs.url\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"webhdfs.url\")), org.junit.Assert.assertEquals(hdfsURI, obj.get(\"webhdfs.url\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          54,
          57,
          58
        ],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "configTest[]",
        "body": "@org.junit.Test\npublic void configTest() {\n    javax.ws.rs.core.Response response \u003d helpService.config();\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"webhdfs.url\"));\n    org.junit.Assert.assertEquals(hdfsURI, obj.get(\"webhdfs.url\"));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"webhdfs.url\")), org.junit.Assert.assertEquals(hdfsURI, obj.get(\"webhdfs.url\"))"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/TaskProviderTest.java": {
    "testGetResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          44
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    clusterDefinition.getTaskResources().add(new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.Task));\n    org.apache.ambari.msi.TaskProvider provider \u003d new org.apache.ambari.msi.TaskProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(1, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size())"
      }
    ],
    "testCreateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          52
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.TaskProvider provider \u003d new org.apache.ambari.msi.TaskProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testUpdateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.TaskProvider provider \u003d new org.apache.ambari.msi.TaskProvider(clusterDefinition);\n    provider.updateResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e(), null), null);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testDeleteResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          73
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.TaskProvider provider \u003d new org.apache.ambari.msi.TaskProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-utility/src/test/java/org/apache/ambari/checkstyle/AvoidTransactionalOnPrivateMethodsCheckTest.java": {
    "transactionalOnPrivateMethod": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "ef774a4f8c283040bcdbcdd5570a9155deef3997",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "transactionalOnPrivateMethod[]",
        "body": "@org.junit.Test\npublic void transactionalOnPrivateMethod() throws java.lang.Exception {\n    final com.puppycrawl.tools.checkstyle.DefaultConfiguration config \u003d createModuleConfig(org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.class);\n    final java.lang.String[] expected \u003d new java.lang.String[]{ \"32: \" + org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.MSG_TRANSACTIONAL_ON_PRIVATE_METHOD, \"41: \" + org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.MSG_TRANSACTIONAL_ON_PRIVATE_METHOD };\n    verify(config, getPath(\"InputTransactionalOnPrivateMethods.java\"), expected);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "1fbb933ef91d5a1ccf704e8d043c0ab0f6c30df7",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "transactionalOnPrivateMethod[]",
        "body": "@org.junit.Test\npublic void transactionalOnPrivateMethod() throws java.lang.Exception {\n    final com.puppycrawl.tools.checkstyle.DefaultConfiguration config \u003d createCheckConfig(org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.class);\n    final java.lang.String[] expected \u003d new java.lang.String[]{ \"32: \" + org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.MSG_TRANSACTIONAL_ON_PRIVATE_METHOD, \"41: \" + org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.MSG_TRANSACTIONAL_ON_PRIVATE_METHOD };\n    verify(config, getPath(\"InputTransactionalOnPrivateMethods.java\"), expected);\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-views/src/test/java/org/apache/ambari/view/ResourceAlreadyExistsExceptionTest.java": {
    "testGetResourceId": [
      {
        "has_assertions": true,
        "assertion_lines": [
          31
        ],
        "commit": "89af4f19005c2a87561e2279fed8745a6f8a9645",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResourceId[]",
        "body": "@org.junit.Test\npublic void testGetResourceId() throws java.lang.Exception {\n    org.apache.ambari.view.ResourceAlreadyExistsException exception \u003d new org.apache.ambari.view.ResourceAlreadyExistsException(\"id\");\n    org.junit.Assert.assertEquals(\"id\", exception.getResourceId());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"id\", exception.getResourceId())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/test/java/org/apache/ambari/view/pig/test/FileTest.java": {
    "testCreateFile": [
      {
        "has_assertions": true,
        "assertion_lines": [
          96,
          100
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testCreateFile[]",
        "body": "@org.junit.Test\npublic void testCreateFile() throws java.io.IOException, java.lang.InterruptedException {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    javax.ws.rs.core.Response response \u003d doCreateFile(name, \"12323\");\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    java.lang.String name2 \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    javax.ws.rs.core.Response response2 \u003d doCreateFile(name2, \"12323\");\n    org.junit.Assert.assertEquals(204, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(204, response2.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          96,
          100
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testCreateFile[]",
        "body": "@org.junit.Test\npublic void testCreateFile() throws java.io.IOException, java.lang.InterruptedException {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    javax.ws.rs.core.Response response \u003d doCreateFile(name, \"12323\");\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    java.lang.String name2 \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    javax.ws.rs.core.Response response2 \u003d doCreateFile(name2, \"12323\");\n    org.junit.Assert.assertEquals(204, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(204, response2.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          94,
          98
        ],
        "commit": "d40a2e5f1b8256aa2c510c3535cb5f95bbf90df9",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testCreateFile[]",
        "body": "@org.junit.Test\npublic void testCreateFile() throws java.io.IOException, java.lang.InterruptedException {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    javax.ws.rs.core.Response response \u003d doCreateFile(name, \"12323\");\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    java.lang.String name2 \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    javax.ws.rs.core.Response response2 \u003d doCreateFile(name2, \"12323\");\n    org.junit.Assert.assertEquals(204, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(204, response2.getStatus())"
      }
    ],
    "testCreateFilePathNotExists": [
      {
        "has_assertions": true,
        "assertion_lines": [
          106,
          109,
          113
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testCreateFilePathNotExists[]",
        "body": "@org.junit.Test\npublic void testCreateFilePathNotExists() throws java.io.IOException, java.lang.InterruptedException {\n    javax.ws.rs.core.Response response \u003d doCreateFile(\"Luke\", null, \"/non/existent/path/\");\n    org.junit.Assert.assertEquals(204, response.getStatus());// path created automatically\n\n    javax.ws.rs.core.Response response2 \u003d doCreateFile(\"Leia\", null, \"/tmp/\");\n    org.junit.Assert.assertEquals(204, response2.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.test.ServiceFormattedException.class);\n    javax.ws.rs.core.Response response3 \u003d doCreateFile(\"Leia\", null, \"/tmp/\");// file already exists\n\n    org.junit.Assert.assertEquals(400, response3.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())// path created automatically, org.junit.Assert.assertEquals(204, response2.getStatus()), org.junit.Assert.assertEquals(400, response3.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          106,
          109,
          113
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testCreateFilePathNotExists[]",
        "body": "@org.junit.Test\npublic void testCreateFilePathNotExists() throws java.io.IOException, java.lang.InterruptedException {\n    javax.ws.rs.core.Response response \u003d doCreateFile(\"Luke\", null, \"/non/existent/path/\");\n    org.junit.Assert.assertEquals(204, response.getStatus());// path created automatically\n\n    javax.ws.rs.core.Response response2 \u003d doCreateFile(\"Leia\", null, \"/tmp/\");\n    org.junit.Assert.assertEquals(204, response2.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.test.ServiceFormattedException.class);\n    javax.ws.rs.core.Response response3 \u003d doCreateFile(\"Leia\", null, \"/tmp/\");// file already exists\n\n    org.junit.Assert.assertEquals(400, response3.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())// path created automatically, org.junit.Assert.assertEquals(204, response2.getStatus()), org.junit.Assert.assertEquals(400, response3.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          104,
          107,
          111
        ],
        "commit": "d40a2e5f1b8256aa2c510c3535cb5f95bbf90df9",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testCreateFilePathNotExists[]",
        "body": "@org.junit.Test\npublic void testCreateFilePathNotExists() throws java.io.IOException, java.lang.InterruptedException {\n    javax.ws.rs.core.Response response \u003d doCreateFile(\"Luke\", null, \"/non/existent/path/\");\n    org.junit.Assert.assertEquals(204, response.getStatus());// path created automatically\n\n    javax.ws.rs.core.Response response2 \u003d doCreateFile(\"Leia\", null, \"/tmp/\");\n    org.junit.Assert.assertEquals(204, response2.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.test.ServiceFormattedException.class);\n    javax.ws.rs.core.Response response3 \u003d doCreateFile(\"Leia\", null, \"/tmp/\");// file already exists\n\n    org.junit.Assert.assertEquals(400, response3.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())// path created automatically, org.junit.Assert.assertEquals(204, response2.getStatus()), org.junit.Assert.assertEquals(400, response3.getStatus())"
      }
    ],
    "testUpdateFileContent": [
      {
        "has_assertions": true,
        "assertion_lines": [
          128,
          131,
          134,
          135
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testUpdateFileContent[]",
        "body": "@org.junit.Test\npublic void testUpdateFileContent() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    javax.ws.rs.core.Response createdFile \u003d doCreateFile(name, \"some content\");\n    org.apache.ambari.view.pig.resources.files.FileService.FileResourceRequest request \u003d new org.apache.ambari.view.pig.resources.files.FileService.FileResourceRequest();\n    request.file \u003d new org.apache.ambari.view.pig.resources.files.FileResource();\n    request.file.setFilePath(filePath);\n    request.file.setFileContent(\"1234567890\");// 10 bytes, 3*(4b page)\n\n    javax.ws.rs.core.Response response \u003d fileService.updateFile(request, filePath);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"file\"));\n    org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"file\")), org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          128,
          131,
          134,
          135
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testUpdateFileContent[]",
        "body": "@org.junit.Test\npublic void testUpdateFileContent() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    javax.ws.rs.core.Response createdFile \u003d doCreateFile(name, \"some content\");\n    org.apache.ambari.view.pig.resources.files.FileService.FileResourceRequest request \u003d new org.apache.ambari.view.pig.resources.files.FileService.FileResourceRequest();\n    request.file \u003d new org.apache.ambari.view.pig.resources.files.FileResource();\n    request.file.setFilePath(filePath);\n    request.file.setFileContent(\"1234567890\");// 10 bytes, 3*(4b page)\n\n    javax.ws.rs.core.Response response \u003d fileService.updateFile(request, filePath);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"file\"));\n    org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"file\")), org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          126,
          129,
          132,
          133
        ],
        "commit": "d40a2e5f1b8256aa2c510c3535cb5f95bbf90df9",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testUpdateFileContent[]",
        "body": "@org.junit.Test\npublic void testUpdateFileContent() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    javax.ws.rs.core.Response createdFile \u003d doCreateFile(name, \"some content\");\n    org.apache.ambari.view.pig.resources.files.FileService.FileResourceRequest request \u003d new org.apache.ambari.view.pig.resources.files.FileService.FileResourceRequest();\n    request.file \u003d new org.apache.ambari.view.pig.resources.files.FileResource();\n    request.file.setFilePath(filePath);\n    request.file.setFileContent(\"1234567890\");// 10 bytes, 3*(4b page)\n\n    javax.ws.rs.core.Response response \u003d fileService.updateFile(request, filePath);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"file\"));\n    org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"file\")), org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent())"
      }
    ],
    "testPagination": [
      {
        "has_assertions": true,
        "assertion_lines": [
          146,
          149,
          150,
          151,
          152,
          153,
          154,
          157,
          160,
          161,
          162,
          165,
          168,
          169,
          170
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 15,
        "method_signature": "testPagination[]",
        "body": "@org.junit.Test\npublic void testPagination() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    doCreateFile(name, \"1234567890\");\n    javax.ws.rs.core.Response response \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"file\"));\n    org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(3, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPageCount());\n    org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    org.junit.Assert.assertEquals(filePath, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFilePath());\n    response \u003d fileService.getFile(filePath, 1L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"5678\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(1, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    response \u003d fileService.getFile(filePath, 2L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"90\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(2, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    thrown.expect(org.apache.ambari.view.pig.test.BadRequestFormattedException.class);\n    fileService.getFile(filePath, 3L, null);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"file\")), org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(3, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPageCount()), org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext()), org.junit.Assert.assertEquals(filePath, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFilePath()), org.junit.Assert.assertEquals(\"5678\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(1, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertEquals(\"90\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(2, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          146,
          149,
          150,
          151,
          152,
          153,
          154,
          157,
          160,
          161,
          162,
          165,
          168,
          169,
          170
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 15,
        "method_signature": "testPagination[]",
        "body": "@org.junit.Test\npublic void testPagination() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    doCreateFile(name, \"1234567890\");\n    javax.ws.rs.core.Response response \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"file\"));\n    org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(3, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPageCount());\n    org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    org.junit.Assert.assertEquals(filePath, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFilePath());\n    response \u003d fileService.getFile(filePath, 1L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"5678\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(1, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    response \u003d fileService.getFile(filePath, 2L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"90\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(2, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    thrown.expect(org.apache.ambari.view.pig.test.BadRequestFormattedException.class);\n    fileService.getFile(filePath, 3L, null);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"file\")), org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(3, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPageCount()), org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext()), org.junit.Assert.assertEquals(filePath, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFilePath()), org.junit.Assert.assertEquals(\"5678\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(1, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertEquals(\"90\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(2, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          144,
          147,
          148,
          149,
          150,
          151,
          152,
          155,
          158,
          159,
          160,
          163,
          166,
          167,
          168
        ],
        "commit": "d40a2e5f1b8256aa2c510c3535cb5f95bbf90df9",
        "annotations": "@org.junit.Test",
        "assertion_amount": 15,
        "method_signature": "testPagination[]",
        "body": "@org.junit.Test\npublic void testPagination() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    doCreateFile(name, \"1234567890\");\n    javax.ws.rs.core.Response response \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"file\"));\n    org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(3, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPageCount());\n    org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    org.junit.Assert.assertEquals(filePath, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFilePath());\n    response \u003d fileService.getFile(filePath, 1L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"5678\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(1, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    response \u003d fileService.getFile(filePath, 2L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"90\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(2, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n    thrown.expect(org.apache.ambari.view.pig.test.BadRequestFormattedException.class);\n    fileService.getFile(filePath, 3L, null);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"file\")), org.junit.Assert.assertEquals(\"1234\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(3, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPageCount()), org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext()), org.junit.Assert.assertEquals(filePath, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFilePath()), org.junit.Assert.assertEquals(\"5678\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(1, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertEquals(\"90\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(2, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext())"
      }
    ],
    "testZeroLengthFile": [
      {
        "has_assertions": true,
        "assertion_lines": [
          184,
          186,
          187,
          188
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testZeroLengthFile[]",
        "body": "@org.junit.Test\npublic void testZeroLengthFile() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    doCreateFile(name, \"\");\n    javax.ws.rs.core.Response response \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(\"\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          184,
          186,
          187,
          188
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testZeroLengthFile[]",
        "body": "@org.junit.Test\npublic void testZeroLengthFile() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    doCreateFile(name, \"\");\n    javax.ws.rs.core.Response response \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(\"\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          182,
          184,
          185,
          186
        ],
        "commit": "d40a2e5f1b8256aa2c510c3535cb5f95bbf90df9",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testZeroLengthFile[]",
        "body": "@org.junit.Test\npublic void testZeroLengthFile() throws java.lang.Exception {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    doCreateFile(name, \"\");\n    javax.ws.rs.core.Response response \u003d fileService.getFile(filePath, 0L, null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertEquals(\"\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent());\n    org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(\"\", ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getFileContent()), org.junit.Assert.assertEquals(0, ((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).getPage()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.files.FileResource) (obj.get(\"file\"))).isHasNext())"
      }
    ],
    "testFileNotFound": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testFileNotFound[]",
        "body": "@org.junit.Test\npublic void testFileNotFound() throws java.io.IOException, java.lang.InterruptedException {\n    thrown.expect(org.apache.ambari.view.pig.test.NotFoundFormattedException.class);\n    fileService.getFile(\"/tmp/notExistentFile\", 2L, null);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testFileNotFound[]",
        "body": "@org.junit.Test\npublic void testFileNotFound() throws java.io.IOException, java.lang.InterruptedException {\n    thrown.expect(org.apache.ambari.view.pig.test.NotFoundFormattedException.class);\n    fileService.getFile(\"/tmp/notExistentFile\", 2L, null);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "d40a2e5f1b8256aa2c510c3535cb5f95bbf90df9",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testFileNotFound[]",
        "body": "@org.junit.Test\npublic void testFileNotFound() throws java.io.IOException, java.lang.InterruptedException {\n    thrown.expect(org.apache.ambari.view.pig.test.NotFoundFormattedException.class);\n    fileService.getFile(\"/tmp/notExistentFile\", 2L, null);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testDeleteFile": [
      {
        "has_assertions": true,
        "assertion_lines": [
          204
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testDeleteFile[]",
        "body": "@org.junit.Test\npublic void testDeleteFile() throws java.io.IOException, java.lang.InterruptedException {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    javax.ws.rs.core.Response createdFile \u003d doCreateFile(name, \"some content\");\n    javax.ws.rs.core.Response response \u003d fileService.deleteFile(filePath);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.test.NotFoundFormattedException.class);\n    fileService.getFile(filePath, 0L, null);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          204
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testDeleteFile[]",
        "body": "@org.junit.Test\npublic void testDeleteFile() throws java.io.IOException, java.lang.InterruptedException {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    javax.ws.rs.core.Response createdFile \u003d doCreateFile(name, \"some content\");\n    javax.ws.rs.core.Response response \u003d fileService.deleteFile(filePath);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.test.NotFoundFormattedException.class);\n    fileService.getFile(filePath, 0L, null);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          202
        ],
        "commit": "d40a2e5f1b8256aa2c510c3535cb5f95bbf90df9",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testDeleteFile[]",
        "body": "@org.junit.Test\npublic void testDeleteFile() throws java.io.IOException, java.lang.InterruptedException {\n    java.lang.String name \u003d java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    java.lang.String filePath \u003d \"/tmp/\" + name;\n    javax.ws.rs.core.Response createdFile \u003d doCreateFile(name, \"some content\");\n    javax.ws.rs.core.Response response \u003d fileService.deleteFile(filePath);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.test.NotFoundFormattedException.class);\n    fileService.getFile(filePath, 0L, null);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/utils/src/test/java/org/apache/ambari/view/utils/ViewUserLocalTest.java": {
    "testDifferentUsers": [
      {
        "has_assertions": true,
        "assertion_lines": [
          50
        ],
        "commit": "16bcc80e0334be22e08a5dcb21cc1d66417fd880",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testDifferentUsers[]",
        "body": "@org.junit.Test\npublic void testDifferentUsers() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext.getUsername()).andReturn(\"luke\").anyTimes();\n    org.apache.ambari.view.ViewContext viewContext2 \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext2.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext2.getUsername()).andReturn(\"leia\").anyTimes();\n    org.easymock.EasyMock.replay(viewContext, viewContext2);\n    UserLocal\u003cjava.lang.Object\u003e test \u003d new UserLocal\u003cjava.lang.Object\u003e(java.lang.Object.class) {\n        @java.lang.Override\n        protected synchronized java.lang.Object initialValue(org.apache.ambari.view.ViewContext context) {\n            return new java.lang.Object();\n        }\n    };\n    java.lang.Object obj1 \u003d test.get(viewContext);\n    java.lang.Object obj2 \u003d test.get(viewContext2);\n    org.junit.Assert.assertNotSame(obj1, obj2);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(obj1, obj2)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          50
        ],
        "commit": "7d793c2b33730184e8ba8cb6d8dfd6589578e21d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testDifferentUsers[]",
        "body": "@org.junit.Test\npublic void testDifferentUsers() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext.getUsername()).andReturn(\"luke\").anyTimes();\n    org.apache.ambari.view.ViewContext viewContext2 \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext2.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext2.getUsername()).andReturn(\"leia\").anyTimes();\n    org.easymock.EasyMock.replay(viewContext, viewContext2);\n    ViewUserLocal\u003cjava.lang.Object\u003e test \u003d new ViewUserLocal\u003cjava.lang.Object\u003e(java.lang.Object.class) {\n        @java.lang.Override\n        protected synchronized java.lang.Object initialValue(org.apache.ambari.view.ViewContext context) {\n            return new java.lang.Object();\n        }\n    };\n    java.lang.Object obj1 \u003d test.get(viewContext);\n    java.lang.Object obj2 \u003d test.get(viewContext2);\n    org.junit.Assert.assertNotSame(obj1, obj2);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(obj1, obj2)"
      }
    ],
    "testDifferentInstances": [
      {
        "has_assertions": true,
        "assertion_lines": [
          73
        ],
        "commit": "16bcc80e0334be22e08a5dcb21cc1d66417fd880",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testDifferentInstances[]",
        "body": "@org.junit.Test\npublic void testDifferentInstances() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext.getUsername()).andReturn(\"luke\").anyTimes();\n    org.apache.ambari.view.ViewContext viewContext2 \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext2.getInstanceName()).andReturn(\"INSTANCE2\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext2.getUsername()).andReturn(\"luke\").anyTimes();\n    org.easymock.EasyMock.replay(viewContext, viewContext2);\n    UserLocal\u003cjava.lang.Object\u003e test \u003d new UserLocal\u003cjava.lang.Object\u003e(java.lang.Object.class) {\n        @java.lang.Override\n        protected synchronized java.lang.Object initialValue(org.apache.ambari.view.ViewContext context) {\n            return new java.lang.Object();\n        }\n    };\n    java.lang.Object obj1 \u003d test.get(viewContext);\n    java.lang.Object obj2 \u003d test.get(viewContext2);\n    org.junit.Assert.assertNotSame(obj1, obj2);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(obj1, obj2)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          73
        ],
        "commit": "7d793c2b33730184e8ba8cb6d8dfd6589578e21d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testDifferentInstances[]",
        "body": "@org.junit.Test\npublic void testDifferentInstances() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext.getUsername()).andReturn(\"luke\").anyTimes();\n    org.apache.ambari.view.ViewContext viewContext2 \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext2.getInstanceName()).andReturn(\"INSTANCE2\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext2.getUsername()).andReturn(\"luke\").anyTimes();\n    org.easymock.EasyMock.replay(viewContext, viewContext2);\n    ViewUserLocal\u003cjava.lang.Object\u003e test \u003d new ViewUserLocal\u003cjava.lang.Object\u003e(java.lang.Object.class) {\n        @java.lang.Override\n        protected synchronized java.lang.Object initialValue(org.apache.ambari.view.ViewContext context) {\n            return new java.lang.Object();\n        }\n    };\n    java.lang.Object obj1 \u003d test.get(viewContext);\n    java.lang.Object obj2 \u003d test.get(viewContext2);\n    org.junit.Assert.assertNotSame(obj1, obj2);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(obj1, obj2)"
      }
    ],
    "testSameUsers": [
      {
        "has_assertions": true,
        "assertion_lines": [
          96
        ],
        "commit": "16bcc80e0334be22e08a5dcb21cc1d66417fd880",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSameUsers[]",
        "body": "@org.junit.Test\npublic void testSameUsers() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext.getUsername()).andReturn(\"luke\").anyTimes();\n    org.apache.ambari.view.ViewContext viewContext2 \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext2.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext2.getUsername()).andReturn(\"luke\").anyTimes();\n    org.easymock.EasyMock.replay(viewContext, viewContext2);\n    UserLocal\u003cjava.lang.Object\u003e test \u003d new UserLocal\u003cjava.lang.Object\u003e(java.lang.Object.class) {\n        @java.lang.Override\n        protected synchronized java.lang.Object initialValue(org.apache.ambari.view.ViewContext context) {\n            return new java.lang.Object();\n        }\n    };\n    java.lang.Object obj1 \u003d test.get(viewContext);\n    java.lang.Object obj2 \u003d test.get(viewContext2);\n    org.junit.Assert.assertSame(obj1, obj2);\n}",
        "assertion_type": "org.junit.Assert.assertSame(obj1, obj2)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          96
        ],
        "commit": "7d793c2b33730184e8ba8cb6d8dfd6589578e21d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testSameUsers[]",
        "body": "@org.junit.Test\npublic void testSameUsers() throws java.lang.Exception {\n    org.apache.ambari.view.ViewContext viewContext \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext.getUsername()).andReturn(\"luke\").anyTimes();\n    org.apache.ambari.view.ViewContext viewContext2 \u003d org.easymock.EasyMock.createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext2.getInstanceName()).andReturn(\"INSTANCE1\").anyTimes();\n    org.easymock.EasyMock.expect(viewContext2.getUsername()).andReturn(\"luke\").anyTimes();\n    org.easymock.EasyMock.replay(viewContext, viewContext2);\n    ViewUserLocal\u003cjava.lang.Object\u003e test \u003d new ViewUserLocal\u003cjava.lang.Object\u003e(java.lang.Object.class) {\n        @java.lang.Override\n        protected synchronized java.lang.Object initialValue(org.apache.ambari.view.ViewContext context) {\n            return new java.lang.Object();\n        }\n    };\n    java.lang.Object obj1 \u003d test.get(viewContext);\n    java.lang.Object obj2 \u003d test.get(viewContext2);\n    org.junit.Assert.assertSame(obj1, obj2);\n}",
        "assertion_type": "org.junit.Assert.assertSame(obj1, obj2)"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/RoleBasedAccessControlBasicTest.java": {
    "testGetClustersAsAnonUser": [
      {
        "has_assertions": true,
        "assertion_lines": [
          96
        ],
        "commit": "39bda71b43c5572f057fd6c3cb6cbd91fcefa698",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetClustersAsAnonUser[]",
        "body": "/**\n * Creates an anonymous user (user with no role). Attempts to get the list of clusters\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testGetClustersAsAnonUser() throws java.lang.Exception {\n    com.google.gson.JsonElement jsonResponse;\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String anonUserName \u003d \"nothing\";\n    java.lang.String anonUserPwd \u003d \"nothing\";\n    /**\n     * Create a new user (non-admin)\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUser(adminConnectionParams, clusterName, anonUserName, anonUserPwd, org.apache.ambari.funtest.server.AmbariUserRole.NONE);\n    /**\n     * Attempt to query all the clusters using this user\u0027s privilege. Right now we should be\n     * able to get the list of clusters, though this user should not be able to. But this is\n     * required for UI to display the clusters.\n     *\n     * todo: Fix this when UI is fixed.\n     */\n    org.apache.ambari.funtest.server.ConnectionParams anonUserParams \u003d createConnectionParams(anonUserName, anonUserPwd);\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.cluster.GetAllClustersWebRequest(anonUserParams));\n    org.junit.Assert.assertFalse(jsonResponse.isJsonNull());\n    /**\n     * Delete the user\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, anonUserName));\n    org.apache.ambari.funtest.server.tests.RoleBasedAccessControlBasicTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertFalse(jsonResponse.isJsonNull())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          98
        ],
        "commit": "3c28378fa4e6f4299e7df01c47359b4c8643ef63",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetClustersAsAnonUser[]",
        "body": "/**\n * Creates an anonymous user (user with no role). Attempts to get the list of clusters\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testGetClustersAsAnonUser() throws java.lang.Exception {\n    com.google.gson.JsonElement jsonResponse;\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String anonUserName \u003d \"nothing\";\n    java.lang.String anonUserPwd \u003d \"nothing\";\n    /**\n     * Create a new user (non-admin)\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUser(adminConnectionParams, clusterName, anonUserName, anonUserPwd, org.apache.ambari.funtest.server.AmbariUserRole.NONE);\n    /**\n     * Attempt to query all the clusters using this user\u0027s privilege. Right now we should be\n     * able to get the list of clusters, though this user should not be able to. But this is\n     * required for UI to display the clusters.\n     *\n     * todo: Fix this when UI is fixed.\n     */\n    org.apache.ambari.funtest.server.ConnectionParams anonUserParams \u003d createConnectionParams(anonUserName, anonUserPwd);\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.cluster.GetAllClustersWebRequest(anonUserParams));\n    org.junit.Assert.assertFalse(jsonResponse.isJsonNull());\n    /**\n     * Delete the user\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, anonUserName));\n    org.apache.ambari.funtest.server.tests.RoleBasedAccessControlBasicTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertFalse(jsonResponse.isJsonNull())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          95
        ],
        "commit": "b38cdb9b77e489f28f656e89964c04e65f9b326f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetClustersAsAnonUser[]",
        "body": "/**\n * Creates an anonymous user (user with no role). Attempts to get the list of clusters\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testGetClustersAsAnonUser() throws java.lang.Exception {\n    com.google.gson.JsonElement jsonResponse;\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String anonUserName \u003d \"nothing\";\n    java.lang.String anonUserPwd \u003d \"nothing\";\n    /**\n     * Create a new user (non-admin)\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUser(adminConnectionParams, clusterName, anonUserName, anonUserPwd, org.apache.ambari.funtest.server.AmbariUserRole.NONE);\n    /**\n     * Attempt to query all the clusters using this user\u0027s privilege. Right now we should be\n     * able to get the list of clusters, though this user should not be able to. But this is\n     * required for UI to display the clusters.\n     *\n     * todo: Fix this when UI is fixed.\n     */\n    org.apache.ambari.funtest.server.ConnectionParams anonUserParams \u003d createConnectionParams(anonUserName, anonUserPwd);\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.cluster.GetAllClustersWebRequest(anonUserParams));\n    org.junit.Assert.assertFalse(jsonResponse.isJsonNull());\n    /**\n     * Delete the user\n     */\n    jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, anonUserName));\n    org.apache.ambari.funtest.server.tests.RoleBasedAccessControlBasicTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertFalse(jsonResponse.isJsonNull())"
      }
    ],
    "testAddClusterConfigAsAnonUser": [
      {
        "has_assertions": true,
        "assertion_lines": [
          141
        ],
        "commit": "39bda71b43c5572f057fd6c3cb6cbd91fcefa698",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddClusterConfigAsAnonUser[]",
        "body": "/**\n * Creates an anonymous user and uses the user to add a cluster configuration.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testAddClusterConfigAsAnonUser() throws java.lang.Exception {\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String anonUserName \u003d \"nothing\";\n    java.lang.String anonUserPwd \u003d \"nothing\";\n    /**\n     * Create a new user (non-admin)\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUser(adminConnectionParams, clusterName, anonUserName, anonUserPwd, org.apache.ambari.funtest.server.AmbariUserRole.NONE);\n    /**\n     * Create and add a configuration to our cluster using the new user\u0027s privilege\n     */\n    java.lang.String configType \u003d \"test-hadoop-env\";\n    java.lang.String configTag \u003d \"version1\";\n    org.apache.ambari.funtest.server.ClusterConfigParams configParams \u003d new org.apache.ambari.funtest.server.ClusterConfigParams();\n    configParams.setClusterName(clusterName);\n    configParams.setConfigType(configType);\n    configParams.setConfigTag(configTag);\n    configParams.setProperties(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e() {\n        {\n            put(\"fs.default.name\", \"localhost:9995\");\n        }\n    });\n    /**\n     * Attempting to create the configuration should fail with 403\n     */\n    org.apache.ambari.funtest.server.ConnectionParams anonUserParams \u003d createConnectionParams(anonUserName, anonUserPwd);\n    org.apache.ambari.funtest.server.WebRequest webRequest \u003d new org.apache.ambari.funtest.server.api.cluster.CreateConfigurationWebRequest(anonUserParams, configParams);\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d webRequest.getResponse();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_FORBIDDEN, webResponse.getStatusCode());\n    /**\n     * Delete the user\n     */\n    com.google.gson.JsonElement jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, \"nothing\"));\n    org.apache.ambari.funtest.server.tests.RoleBasedAccessControlBasicTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_FORBIDDEN, webResponse.getStatusCode())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          143
        ],
        "commit": "3c28378fa4e6f4299e7df01c47359b4c8643ef63",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddClusterConfigAsAnonUser[]",
        "body": "/**\n * Creates an anonymous user and uses the user to add a cluster configuration.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testAddClusterConfigAsAnonUser() throws java.lang.Exception {\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String anonUserName \u003d \"nothing\";\n    java.lang.String anonUserPwd \u003d \"nothing\";\n    /**\n     * Create a new user (non-admin)\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUser(adminConnectionParams, clusterName, anonUserName, anonUserPwd, org.apache.ambari.funtest.server.AmbariUserRole.NONE);\n    /**\n     * Create and add a configuration to our cluster using the new user\u0027s privilege\n     */\n    java.lang.String configType \u003d \"test-hadoop-env\";\n    java.lang.String configTag \u003d \"version1\";\n    org.apache.ambari.funtest.server.ClusterConfigParams configParams \u003d new org.apache.ambari.funtest.server.ClusterConfigParams();\n    configParams.setClusterName(clusterName);\n    configParams.setConfigType(configType);\n    configParams.setConfigTag(configTag);\n    configParams.setProperties(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e() {\n        {\n            put(\"fs.default.name\", \"localhost:9995\");\n        }\n    });\n    /**\n     * Attempting to create the configuration should fail with 403\n     */\n    org.apache.ambari.funtest.server.ConnectionParams anonUserParams \u003d createConnectionParams(anonUserName, anonUserPwd);\n    org.apache.ambari.funtest.server.WebRequest webRequest \u003d new org.apache.ambari.funtest.server.api.cluster.CreateConfigurationWebRequest(anonUserParams, configParams);\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d webRequest.getResponse();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_FORBIDDEN, webResponse.getStatusCode());\n    /**\n     * Delete the user\n     */\n    com.google.gson.JsonElement jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, \"nothing\"));\n    org.apache.ambari.funtest.server.tests.RoleBasedAccessControlBasicTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_FORBIDDEN, webResponse.getStatusCode())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          140
        ],
        "commit": "b38cdb9b77e489f28f656e89964c04e65f9b326f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddClusterConfigAsAnonUser[]",
        "body": "/**\n * Creates an anonymous user and uses the user to add a cluster configuration.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testAddClusterConfigAsAnonUser() throws java.lang.Exception {\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String anonUserName \u003d \"nothing\";\n    java.lang.String anonUserPwd \u003d \"nothing\";\n    /**\n     * Create a new user (non-admin)\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUser(adminConnectionParams, clusterName, anonUserName, anonUserPwd, org.apache.ambari.funtest.server.AmbariUserRole.NONE);\n    /**\n     * Create and add a configuration to our cluster using the new user\u0027s privilege\n     */\n    java.lang.String configType \u003d \"test-hadoop-env\";\n    java.lang.String configTag \u003d \"version1\";\n    org.apache.ambari.funtest.server.ClusterConfigParams configParams \u003d new org.apache.ambari.funtest.server.ClusterConfigParams();\n    configParams.setClusterName(clusterName);\n    configParams.setConfigType(configType);\n    configParams.setConfigTag(configTag);\n    configParams.setProperties(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e() {\n        {\n            put(\"fs.default.name\", \"localhost:9995\");\n        }\n    });\n    /**\n     * Attempting to create the configuration should fail with 403\n     */\n    org.apache.ambari.funtest.server.ConnectionParams anonUserParams \u003d createConnectionParams(anonUserName, anonUserPwd);\n    org.apache.ambari.funtest.server.WebRequest webRequest \u003d new org.apache.ambari.funtest.server.api.cluster.CreateConfigurationWebRequest(anonUserParams, configParams);\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d webRequest.getResponse();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_FORBIDDEN, webResponse.getStatusCode());\n    /**\n     * Delete the user\n     */\n    com.google.gson.JsonElement jsonResponse \u003d org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, \"nothing\"));\n    org.apache.ambari.funtest.server.tests.RoleBasedAccessControlBasicTest.LOG.info(jsonResponse);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_FORBIDDEN, webResponse.getStatusCode())"
      }
    ],
    "testAddClusterConfigAsClusterAdmin": [
      {
        "has_assertions": true,
        "assertion_lines": [
          188
        ],
        "commit": "39bda71b43c5572f057fd6c3cb6cbd91fcefa698",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddClusterConfigAsClusterAdmin[]",
        "body": "/**\n * Creates a user with cluster administrator privilege and adds a cluster configuration.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testAddClusterConfigAsClusterAdmin() throws java.lang.Exception {\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String clusterAdminName \u003d \"clusterAdmin\";\n    java.lang.String clusterAdminPwd \u003d \"clusterAdmin\";\n    /**\n     * Create a user with cluster admin role\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUserClusterAdministrator(adminConnectionParams, clusterName, clusterAdminName, clusterAdminPwd);\n    /**\n     * Create and add a configuration to our cluster using the new user\u0027s privilege\n     */\n    java.lang.String configType \u003d \"test-hadoop-env\";\n    java.lang.String configTag \u003d \"version1\";\n    org.apache.ambari.funtest.server.ClusterConfigParams configParams \u003d new org.apache.ambari.funtest.server.ClusterConfigParams();\n    configParams.setClusterName(clusterName);\n    configParams.setConfigType(configType);\n    configParams.setConfigTag(configTag);\n    configParams.setProperties(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e() {\n        {\n            put(\"fs.default.name\", \"localhost:9995\");\n        }\n    });\n    /**\n     * This user has enough privilege to create the cluster configuration. Should succeed with 201.\n     */\n    org.apache.ambari.funtest.server.ConnectionParams userConnectionParams \u003d createConnectionParams(clusterAdminName, clusterAdminPwd);\n    org.apache.ambari.funtest.server.WebRequest webRequest \u003d new org.apache.ambari.funtest.server.api.cluster.CreateConfigurationWebRequest(userConnectionParams, configParams);\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d webRequest.getResponse();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_CREATED, webResponse.getStatusCode());\n    /**\n     * Delete the user\n     */\n    org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, clusterAdminName));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_CREATED, webResponse.getStatusCode())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          190
        ],
        "commit": "3c28378fa4e6f4299e7df01c47359b4c8643ef63",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddClusterConfigAsClusterAdmin[]",
        "body": "/**\n * Creates a user with cluster administrator privilege and adds a cluster configuration.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testAddClusterConfigAsClusterAdmin() throws java.lang.Exception {\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String clusterAdminName \u003d \"clusterAdmin\";\n    java.lang.String clusterAdminPwd \u003d \"clusterAdmin\";\n    /**\n     * Create a user with cluster admin role\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUserClusterAdministrator(adminConnectionParams, clusterName, clusterAdminName, clusterAdminPwd);\n    /**\n     * Create and add a configuration to our cluster using the new user\u0027s privilege\n     */\n    java.lang.String configType \u003d \"test-hadoop-env\";\n    java.lang.String configTag \u003d \"version1\";\n    org.apache.ambari.funtest.server.ClusterConfigParams configParams \u003d new org.apache.ambari.funtest.server.ClusterConfigParams();\n    configParams.setClusterName(clusterName);\n    configParams.setConfigType(configType);\n    configParams.setConfigTag(configTag);\n    configParams.setProperties(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e() {\n        {\n            put(\"fs.default.name\", \"localhost:9995\");\n        }\n    });\n    /**\n     * This user has enough privilege to create the cluster configuration. Should succeed with 201.\n     */\n    org.apache.ambari.funtest.server.ConnectionParams userConnectionParams \u003d createConnectionParams(clusterAdminName, clusterAdminPwd);\n    org.apache.ambari.funtest.server.WebRequest webRequest \u003d new org.apache.ambari.funtest.server.api.cluster.CreateConfigurationWebRequest(userConnectionParams, configParams);\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d webRequest.getResponse();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_CREATED, webResponse.getStatusCode());\n    /**\n     * Delete the user\n     */\n    org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, clusterAdminName));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_CREATED, webResponse.getStatusCode())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          187
        ],
        "commit": "b38cdb9b77e489f28f656e89964c04e65f9b326f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddClusterConfigAsClusterAdmin[]",
        "body": "/**\n * Creates a user with cluster administrator privilege and adds a cluster configuration.\n *\n * @throws Exception\n */\n@org.junit.Test\npublic void testAddClusterConfigAsClusterAdmin() throws java.lang.Exception {\n    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams \u003d createAdminConnectionParams();\n    java.lang.String clusterAdminName \u003d \"clusterAdmin\";\n    java.lang.String clusterAdminPwd \u003d \"clusterAdmin\";\n    /**\n     * Create a user with cluster admin role\n     */\n    org.apache.ambari.funtest.server.utils.ClusterUtils.createUserClusterAdministrator(adminConnectionParams, clusterName, clusterAdminName, clusterAdminPwd);\n    /**\n     * Create and add a configuration to our cluster using the new user\u0027s privilege\n     */\n    java.lang.String configType \u003d \"test-hadoop-env\";\n    java.lang.String configTag \u003d \"version1\";\n    org.apache.ambari.funtest.server.ClusterConfigParams configParams \u003d new org.apache.ambari.funtest.server.ClusterConfigParams();\n    configParams.setClusterName(clusterName);\n    configParams.setConfigType(configType);\n    configParams.setConfigTag(configTag);\n    configParams.setProperties(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e() {\n        {\n            put(\"fs.default.name\", \"localhost:9995\");\n        }\n    });\n    /**\n     * This user has enough privilege to create the cluster configuration. Should succeed with 201.\n     */\n    org.apache.ambari.funtest.server.ConnectionParams userConnectionParams \u003d createConnectionParams(clusterAdminName, clusterAdminPwd);\n    org.apache.ambari.funtest.server.WebRequest webRequest \u003d new org.apache.ambari.funtest.server.api.cluster.CreateConfigurationWebRequest(userConnectionParams, configParams);\n    org.apache.ambari.funtest.server.WebResponse webResponse \u003d webRequest.getResponse();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_CREATED, webResponse.getStatusCode());\n    /**\n     * Delete the user\n     */\n    org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, clusterAdminName));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_CREATED, webResponse.getStatusCode())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLProviderModuleTest.java": {
    "testCreatePropertyProviders": [
      {
        "has_assertions": true,
        "assertion_lines": [
          41,
          42,
          48,
          49
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testCreatePropertyProviders[]",
        "body": "@org.junit.Test\npublic void testCreatePropertyProviders() {\n    org.apache.ambari.scom.SQLProviderModule providerModule \u003d new org.apache.ambari.scom.SQLProviderModule();\n    providerModule.createPropertyProviders(Resource.Type.Component);\n    java.util.List\u003corg.apache.ambari.server.controller.spi.PropertyProvider\u003e providers \u003d providerModule.getPropertyProviders(Resource.Type.Component);\n    org.junit.Assert.assertTrue(providers.get(0) instanceof org.apache.ambari.server.controller.jmx.JMXPropertyProvider);\n    org.junit.Assert.assertTrue(providers.get(1) instanceof org.apache.ambari.scom.SQLPropertyProvider);\n    providerModule.createPropertyProviders(Resource.Type.HostComponent);\n    providers \u003d providerModule.getPropertyProviders(Resource.Type.HostComponent);\n    org.junit.Assert.assertTrue(providers.get(0) instanceof org.apache.ambari.server.controller.jmx.JMXPropertyProvider);\n    org.junit.Assert.assertTrue(providers.get(1) instanceof org.apache.ambari.scom.SQLPropertyProvider);\n}",
        "assertion_type": "org.junit.Assert.assertTrue(providers.get(0) instanceof org.apache.ambari.server.controller.jmx.JMXPropertyProvider), org.junit.Assert.assertTrue(providers.get(1) instanceof org.apache.ambari.scom.SQLPropertyProvider)"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-log4j/src/test/java/org/apache/ambari/TestMapReduceJobHistoryUpdater.java": {
    "testDagMerging": [
      {
        "has_assertions": true,
        "assertion_lines": [
          54,
          55,
          58,
          59,
          60,
          61,
          64,
          65,
          66,
          67,
          70,
          71,
          72
        ],
        "commit": "ff096b56b547df4a43f57045d1e501ba4976adb3",
        "annotations": "No Annotations",
        "assertion_amount": 13,
        "method_signature": "testDagMerging[]",
        "body": "public void testDagMerging() {\n    org.apache.ambari.eventdb.model.WorkflowDag dag1 \u003d new org.apache.ambari.eventdb.model.WorkflowDag();\n    dag1.addEntry(org.apache.ambari.TestMapReduceJobHistoryUpdater.getEntry(\"a\", \"b\", \"c\"));\n    dag1.addEntry(org.apache.ambari.TestMapReduceJobHistoryUpdater.getEntry(\"b\", \"d\"));\n    org.apache.ambari.eventdb.model.WorkflowContext one \u003d new org.apache.ambari.eventdb.model.WorkflowContext();\n    one.setWorkflowDag(dag1);\n    org.apache.ambari.eventdb.model.WorkflowDag dag2 \u003d new org.apache.ambari.eventdb.model.WorkflowDag();\n    dag2.addEntry(org.apache.ambari.TestMapReduceJobHistoryUpdater.getEntry(\"a\", \"d\"));\n    dag2.addEntry(org.apache.ambari.TestMapReduceJobHistoryUpdater.getEntry(\"c\", \"e\"));\n    org.apache.ambari.eventdb.model.WorkflowContext two \u003d new org.apache.ambari.eventdb.model.WorkflowContext();\n    two.setWorkflowDag(dag2);\n    org.apache.ambari.eventdb.model.WorkflowDag emptyDag \u003d new org.apache.ambari.eventdb.model.WorkflowDag();\n    org.apache.ambari.eventdb.model.WorkflowContext three \u003d new org.apache.ambari.eventdb.model.WorkflowContext();\n    three.setWorkflowDag(emptyDag);\n    org.apache.ambari.eventdb.model.WorkflowDag mergedDag \u003d new org.apache.ambari.eventdb.model.WorkflowDag();\n    mergedDag.addEntry(org.apache.ambari.TestMapReduceJobHistoryUpdater.getEntry(\"a\", \"b\", \"c\", \"d\"));\n    mergedDag.addEntry(org.apache.ambari.TestMapReduceJobHistoryUpdater.getEntry(\"b\", \"d\"));\n    mergedDag.addEntry(org.apache.ambari.TestMapReduceJobHistoryUpdater.getEntry(\"c\", \"e\"));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(mergedDag, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(one, two));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(mergedDag, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(two, one));\n    // test blank dag\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(three, one));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(one, three));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(three, two));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(two, three));\n    // test null dag\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(new org.apache.ambari.eventdb.model.WorkflowContext(), one));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(one, new org.apache.ambari.eventdb.model.WorkflowContext()));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(new org.apache.ambari.eventdb.model.WorkflowContext(), two));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(two, new org.apache.ambari.eventdb.model.WorkflowContext()));\n    // test same dag\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(one, one));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(two, two));\n    org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(emptyDag, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(three, three));\n}",
        "assertion_type": "org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(mergedDag, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(one, two)), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(mergedDag, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(two, one)), // test blank dag\norg.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(three, one)), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(one, three)), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(three, two)), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(two, three)), // test null dag\norg.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(new org.apache.ambari.eventdb.model.WorkflowContext(), one)), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(one, new org.apache.ambari.eventdb.model.WorkflowContext())), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(new org.apache.ambari.eventdb.model.WorkflowContext(), two)), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(two, new org.apache.ambari.eventdb.model.WorkflowContext())), // test same dag\norg.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag1, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(one, one)), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(dag2, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(two, two)), org.apache.ambari.TestMapReduceJobHistoryUpdater.assertEquals(emptyDag, org.apache.ambari.log4j.hadoop.mapreduce.jobhistory.MapReduceJobHistoryUpdater.constructMergedDag(three, three))"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/test/java/org/apache/ambari/view/pig/test/JobTest.java": {
    "testSubmitJob": [
      {
        "has_assertions": true,
        "assertion_lines": [
          125,
          126,
          129,
          130,
          131,
          132,
          135,
          136
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 8,
        "method_signature": "testSubmitJob[]",
        "body": "@org.junit.Test\npublic void testSubmitJob() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\")), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          125,
          126,
          129,
          130,
          131,
          132,
          135,
          136
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 8,
        "method_signature": "testSubmitJob[]",
        "body": "@org.junit.Test\npublic void testSubmitJob() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\")), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          125,
          126,
          129,
          130,
          131,
          132,
          135,
          136
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 8,
        "method_signature": "testSubmitJob[]",
        "body": "@org.junit.Test\npublic void testSubmitJob() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\")), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress())"
      }
    ],
    "testListJobs": [
      {
        "has_assertions": true,
        "assertion_lines": [
          159,
          162,
          165,
          168,
          170,
          171,
          174,
          176,
          177
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 9,
        "method_signature": "testListJobs[]",
        "body": "@org.junit.Test\npublic void testListJobs() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream).anyTimes();\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), ((java.lang.String) (isNull())))).andReturn(data).anyTimes();\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"x42\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"x42\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"100\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d jobService.getJobList(\"x42\");\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"jobs\"));\n    org.junit.Assert.assertEquals(2, ((java.util.List) (obj.get(\"jobs\"))).size());\n    response \u003d jobService.getJobList(null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"jobs\"));\n    org.junit.Assert.assertTrue(((java.util.List) (obj.get(\"jobs\"))).size() \u003e 2);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"jobs\")), org.junit.Assert.assertEquals(2, ((java.util.List) (obj.get(\"jobs\"))).size()), org.junit.Assert.assertTrue(((java.util.List) (obj.get(\"jobs\"))).size() \u003e 2)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          159,
          162,
          165,
          168,
          170,
          171,
          174,
          176,
          177
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 9,
        "method_signature": "testListJobs[]",
        "body": "@org.junit.Test\npublic void testListJobs() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream).anyTimes();\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), ((java.lang.String) (isNull())))).andReturn(data).anyTimes();\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"x42\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"x42\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"100\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d jobService.getJobList(\"x42\");\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"jobs\"));\n    org.junit.Assert.assertEquals(2, ((java.util.List) (obj.get(\"jobs\"))).size());\n    response \u003d jobService.getJobList(null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"jobs\"));\n    org.junit.Assert.assertTrue(((java.util.List) (obj.get(\"jobs\"))).size() \u003e 2);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"jobs\")), org.junit.Assert.assertEquals(2, ((java.util.List) (obj.get(\"jobs\"))).size()), org.junit.Assert.assertTrue(((java.util.List) (obj.get(\"jobs\"))).size() \u003e 2)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          159,
          162,
          165,
          168,
          170,
          171,
          174,
          176,
          177
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 9,
        "method_signature": "testListJobs[]",
        "body": "@org.junit.Test\npublic void testListJobs() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream).anyTimes();\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), ((java.lang.String) (isNull())))).andReturn(data).anyTimes();\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"x42\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"x42\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, null, \"100\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    response \u003d jobService.getJobList(\"x42\");\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"jobs\"));\n    org.junit.Assert.assertEquals(2, ((java.util.List) (obj.get(\"jobs\"))).size());\n    response \u003d jobService.getJobList(null);\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"jobs\"));\n    org.junit.Assert.assertTrue(((java.util.List) (obj.get(\"jobs\"))).size() \u003e 2);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"jobs\")), org.junit.Assert.assertEquals(2, ((java.util.List) (obj.get(\"jobs\"))).size()), org.junit.Assert.assertTrue(((java.util.List) (obj.get(\"jobs\"))).size() \u003e 2)"
      }
    ],
    "testSubmitJobUsernameProvided": [
      {
        "has_assertions": true,
        "assertion_lines": [
          202,
          203
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testSubmitJobUsernameProvided[]",
        "body": "@org.junit.Test\npublic void testSubmitJobUsernameProvided() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    properties.put(\"dataworker.username\", \"luke\");\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          202,
          203
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testSubmitJobUsernameProvided[]",
        "body": "@org.junit.Test\npublic void testSubmitJobUsernameProvided() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    properties.put(\"dataworker.username\", \"luke\");\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          202,
          203
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testSubmitJobUsernameProvided[]",
        "body": "@org.junit.Test\npublic void testSubmitJobUsernameProvided() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    properties.put(\"dataworker.username\", \"luke\");\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"))"
      }
    ],
    "testSubmitJobNoArguments": [
      {
        "has_assertions": true,
        "assertion_lines": [
          227,
          228,
          231,
          232,
          233,
          234,
          237,
          238
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 8,
        "method_signature": "testSubmitJobNoArguments[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoArguments() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), ((java.lang.String) (isNull())))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, jobService);\n    org.junit.Assert.assertEquals(\"\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\")), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          227,
          228,
          231,
          232,
          233,
          234,
          237,
          238
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 8,
        "method_signature": "testSubmitJobNoArguments[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoArguments() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), ((java.lang.String) (isNull())))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, jobService);\n    org.junit.Assert.assertEquals(\"\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\")), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          227,
          228,
          231,
          232,
          233,
          234,
          237,
          238
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 8,
        "method_signature": "testSubmitJobNoArguments[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoArguments() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), ((java.lang.String) (isNull())))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", null, jobService);\n    org.junit.Assert.assertEquals(\"\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"job\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty());\n    org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\"));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"job\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getId().isEmpty()), org.junit.Assert.assertTrue(((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\"))).getStatusDir().startsWith(\"/tmp/.pigjobs/test\")), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress())"
      }
    ],
    "testSubmitJobNoFile": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobNoFile[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoFile() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", null, \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobNoFile[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoFile() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", null, \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobNoFile[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoFile() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", null, \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testSubmitJobForcedContent": [
      {
        "has_assertions": true,
        "assertion_lines": [
          285,
          286,
          287
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testSubmitJobForcedContent[]",
        "body": "@org.junit.Test\npublic void testSubmitJobForcedContent() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    java.io.ByteArrayOutputStream baScriptStream \u003d new java.io.ByteArrayOutputStream();\n    java.io.ByteArrayOutputStream baTempletonArgsStream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream scriptStream \u003d new org.apache.hadoop.fs.FSDataOutputStream(baScriptStream, null);\n    org.apache.hadoop.fs.FSDataOutputStream templetonArgsStream \u003d new org.apache.hadoop.fs.FSDataOutputStream(baTempletonArgsStream, null);\n    expect(hdfsApi.create(endsWith(\"script.pig\"), eq(true))).andReturn(scriptStream);\n    expect(hdfsApi.create(endsWith(\"params\"), eq(true))).andReturn(templetonArgsStream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", null, \"-useHCatalog\", \"pwd\", null, jobService);// with forcedContent\n\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.junit.Assert.assertEquals(\"-useHCatalog\", baTempletonArgsStream.toString());\n    org.junit.Assert.assertEquals(\"pwd\", baScriptStream.toString());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(\"-useHCatalog\", baTempletonArgsStream.toString()), org.junit.Assert.assertEquals(\"pwd\", baScriptStream.toString())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          285,
          286,
          287
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testSubmitJobForcedContent[]",
        "body": "@org.junit.Test\npublic void testSubmitJobForcedContent() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    java.io.ByteArrayOutputStream baScriptStream \u003d new java.io.ByteArrayOutputStream();\n    java.io.ByteArrayOutputStream baTempletonArgsStream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream scriptStream \u003d new org.apache.hadoop.fs.FSDataOutputStream(baScriptStream);\n    org.apache.hadoop.fs.FSDataOutputStream templetonArgsStream \u003d new org.apache.hadoop.fs.FSDataOutputStream(baTempletonArgsStream);\n    expect(hdfsApi.create(endsWith(\"script.pig\"), eq(true))).andReturn(scriptStream);\n    expect(hdfsApi.create(endsWith(\"params\"), eq(true))).andReturn(templetonArgsStream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", null, \"-useHCatalog\", \"pwd\", null, jobService);// with forcedContent\n\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.junit.Assert.assertEquals(\"-useHCatalog\", baTempletonArgsStream.toString());\n    org.junit.Assert.assertEquals(\"pwd\", baScriptStream.toString());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(\"-useHCatalog\", baTempletonArgsStream.toString()), org.junit.Assert.assertEquals(\"pwd\", baScriptStream.toString())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          285,
          286,
          287
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testSubmitJobForcedContent[]",
        "body": "@org.junit.Test\npublic void testSubmitJobForcedContent() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    java.io.ByteArrayOutputStream baScriptStream \u003d new java.io.ByteArrayOutputStream();\n    java.io.ByteArrayOutputStream baTempletonArgsStream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream scriptStream \u003d new org.apache.hadoop.fs.FSDataOutputStream(baScriptStream, null);\n    org.apache.hadoop.fs.FSDataOutputStream templetonArgsStream \u003d new org.apache.hadoop.fs.FSDataOutputStream(baTempletonArgsStream, null);\n    expect(hdfsApi.create(endsWith(\"script.pig\"), eq(true))).andReturn(scriptStream);\n    expect(hdfsApi.create(endsWith(\"params\"), eq(true))).andReturn(templetonArgsStream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_1466418324742_0005\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", null, \"-useHCatalog\", \"pwd\", null, jobService);// with forcedContent\n\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.junit.Assert.assertEquals(\"-useHCatalog\", baTempletonArgsStream.toString());\n    org.junit.Assert.assertEquals(\"pwd\", baScriptStream.toString());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(\"-useHCatalog\", baTempletonArgsStream.toString()), org.junit.Assert.assertEquals(\"pwd\", baScriptStream.toString())"
      }
    ],
    "testSubmitJobNoTitle": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobNoTitle[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoTitle() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.BadRequestFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(null, \"/tmp/1.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobNoTitle[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoTitle() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.BadRequestFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(null, \"/tmp/1.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobNoTitle[]",
        "body": "@org.junit.Test\npublic void testSubmitJobNoTitle() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.BadRequestFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(null, \"/tmp/1.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testSubmitJobFailed": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobFailed[]",
        "body": "@org.junit.Test\npublic void testSubmitJobFailed() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    org.easymock.EasyMock.expectLastCall().andThrow(new org.apache.ambari.view.utils.hdfs.HdfsApiException(\"Copy failed\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobFailed[]",
        "body": "@org.junit.Test\npublic void testSubmitJobFailed() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    org.easymock.EasyMock.expectLastCall().andThrow(new org.apache.ambari.view.utils.hdfs.HdfsApiException(\"Copy failed\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobFailed[]",
        "body": "@org.junit.Test\npublic void testSubmitJobFailed() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    org.easymock.EasyMock.expectLastCall().andThrow(new org.apache.ambari.view.utils.hdfs.HdfsApiException(\"Copy failed\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testSubmitJobTempletonError": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobTempletonError[]",
        "body": "@org.junit.Test\npublic void testSubmitJobTempletonError() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    // Templeton returns 500 e.g.\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andThrow(new java.io.IOException());\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobTempletonError[]",
        "body": "@org.junit.Test\npublic void testSubmitJobTempletonError() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    // Templeton returns 500 e.g.\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andThrow(new java.io.IOException());\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testSubmitJobTempletonError[]",
        "body": "@org.junit.Test\npublic void testSubmitJobTempletonError() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    // Templeton returns 500 e.g.\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andThrow(new java.io.IOException());\n    replay(api);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testKillJobNoRemove": [
      {
        "has_assertions": true,
        "assertion_lines": [
          378,
          387,
          390
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testKillJobNoRemove[]",
        "body": "@org.junit.Test\npublic void testKillJobNoRemove() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createStrictMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_##\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    reset(api);\n    api.killJob(eq(\"job_id_##\"));\n    expect(api.checkJob(anyString())).andReturn(api.new JobInfo()).anyTimes();\n    replay(api);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    response \u003d jobService.killJob(job.getId(), null);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    response \u003d jobService.getJob(job.getId());// it should still be present in DB\n\n    org.junit.Assert.assertEquals(200, response.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          378,
          387,
          390
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testKillJobNoRemove[]",
        "body": "@org.junit.Test\npublic void testKillJobNoRemove() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createStrictMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_##\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    reset(api);\n    api.killJob(eq(\"job_id_##\"));\n    expect(api.checkJob(anyString())).andReturn(api.new JobInfo()).anyTimes();\n    replay(api);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    response \u003d jobService.killJob(job.getId(), null);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    response \u003d jobService.getJob(job.getId());// it should still be present in DB\n\n    org.junit.Assert.assertEquals(200, response.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          378,
          387,
          390
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testKillJobNoRemove[]",
        "body": "@org.junit.Test\npublic void testKillJobNoRemove() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createStrictMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_##\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    reset(api);\n    api.killJob(eq(\"job_id_##\"));\n    expect(api.checkJob(anyString())).andReturn(api.new JobInfo()).anyTimes();\n    replay(api);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    response \u003d jobService.killJob(job.getId(), null);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    response \u003d jobService.getJob(job.getId());// it should still be present in DB\n\n    org.junit.Assert.assertEquals(200, response.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response.getStatus())"
      }
    ],
    "testKillJobWithRemove": [
      {
        "has_assertions": true,
        "assertion_lines": [
          413,
          422
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testKillJobWithRemove[]",
        "body": "@org.junit.Test\npublic void testKillJobWithRemove() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createStrictMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_##\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    reset(api);\n    api.killJob(eq(\"job_id_##\"));\n    expect(api.checkJob(anyString())).andReturn(api.new JobInfo()).anyTimes();\n    replay(api);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    response \u003d jobService.killJob(job.getId(), \"true\");\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);// it should not be present in DB\n\n    jobService.getJob(job.getId());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(204, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          413,
          422
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testKillJobWithRemove[]",
        "body": "@org.junit.Test\npublic void testKillJobWithRemove() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createStrictMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_##\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    reset(api);\n    api.killJob(eq(\"job_id_##\"));\n    expect(api.checkJob(anyString())).andReturn(api.new JobInfo()).anyTimes();\n    replay(api);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    response \u003d jobService.killJob(job.getId(), \"true\");\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);// it should not be present in DB\n\n    jobService.getJob(job.getId());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(204, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          413,
          422
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testKillJobWithRemove[]",
        "body": "@org.junit.Test\npublic void testKillJobWithRemove() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createStrictMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_##\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    reset(api);\n    api.killJob(eq(\"job_id_##\"));\n    expect(api.checkJob(anyString())).andReturn(api.new JobInfo()).anyTimes();\n    replay(api);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (obj.get(\"job\")));\n    response \u003d jobService.killJob(job.getId(), \"true\");\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);// it should not be present in DB\n\n    jobService.getJob(job.getId());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(204, response.getStatus())"
      }
    ],
    "testJobStatusFlow": [
      {
        "has_assertions": true,
        "assertion_lines": [
          449,
          450,
          453,
          454,
          463,
          465,
          476,
          478,
          479,
          480,
          490,
          492,
          493,
          494,
          504,
          506,
          516,
          518,
          519,
          529,
          531,
          532
        ],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 22,
        "method_signature": "testJobStatusFlow[]",
        "body": "@org.junit.Test\npublic void testJobStatusFlow() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_#\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n    // Retrieve status:\n    // SUBMITTED\n    reset(api);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobInfo info \u003d api.new JobInfo();\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    // RUNNING\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_RUNNING)));\n    info.percentComplete \u003d \"30% complete\";\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n    org.junit.Assert.assertEquals(30, ((java.lang.Object) (job.getPercentComplete())));\n    // SUCCEED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_SUCCEEDED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_COMPLETED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n    org.junit.Assert.assertNull(job.getPercentComplete());\n    // PREP\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_PREP)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus());\n    // FAILED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_FAILED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_FAILED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n    // KILLED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_KILLED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_KILLED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress()), org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus()), org.junit.Assert.assertEquals(30, ((java.lang.Object) (job.getPercentComplete()))), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_COMPLETED, job.getStatus()), org.junit.Assert.assertFalse(job.isInProgress()), org.junit.Assert.assertNull(job.getPercentComplete()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_FAILED, job.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_KILLED, job.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          449,
          450,
          453,
          454,
          463,
          465,
          476,
          478,
          479,
          480,
          490,
          492,
          493,
          494,
          504,
          506,
          516,
          518,
          519,
          529,
          531,
          532
        ],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 22,
        "method_signature": "testJobStatusFlow[]",
        "body": "@org.junit.Test\npublic void testJobStatusFlow() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_#\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n    // Retrieve status:\n    // SUBMITTED\n    reset(api);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobInfo info \u003d api.new JobInfo();\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    // RUNNING\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_RUNNING)));\n    info.percentComplete \u003d \"30% complete\";\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n    org.junit.Assert.assertEquals(30, ((java.lang.Object) (job.getPercentComplete())));\n    // SUCCEED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_SUCCEEDED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_COMPLETED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n    org.junit.Assert.assertNull(job.getPercentComplete());\n    // PREP\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_PREP)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus());\n    // FAILED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_FAILED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_FAILED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n    // KILLED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_KILLED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_KILLED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress()), org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus()), org.junit.Assert.assertEquals(30, ((java.lang.Object) (job.getPercentComplete()))), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_COMPLETED, job.getStatus()), org.junit.Assert.assertFalse(job.isInProgress()), org.junit.Assert.assertNull(job.getPercentComplete()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_FAILED, job.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_KILLED, job.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          449,
          450,
          453,
          454,
          463,
          465,
          476,
          478,
          479,
          480,
          490,
          492,
          493,
          494,
          504,
          506,
          516,
          518,
          519,
          529,
          531,
          532
        ],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 22,
        "method_signature": "testJobStatusFlow[]",
        "body": "@org.junit.Test\npublic void testJobStatusFlow() throws java.lang.Exception {\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi \u003d createNiceMock(org.apache.ambari.view.utils.hdfs.HdfsApi.class);\n    hdfsApi.copy(eq(\"/tmp/script.pig\"), startsWith(\"/tmp/.pigjobs/\"));\n    java.io.ByteArrayOutputStream do_stream \u003d new java.io.ByteArrayOutputStream();\n    org.apache.hadoop.fs.FSDataOutputStream stream \u003d new org.apache.hadoop.fs.FSDataOutputStream(do_stream, null);\n    expect(hdfsApi.create(anyString(), eq(true))).andReturn(stream);\n    replay(hdfsApi);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setHdfsApi(hdfsApi, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d createNiceMock(org.apache.ambari.view.pig.templeton.client.TempletonApi.class);\n    org.apache.ambari.view.pig.utils.UserLocalObjects.setTempletonApi(api, context);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobData data \u003d api.new JobData();\n    data.id \u003d \"job_id_#\";\n    expect(api.runPigQuery(((java.io.File) (anyObject())), anyString(), eq(\"-useHCatalog\"))).andReturn(data);\n    replay(api);\n    javax.ws.rs.core.Response response \u003d org.apache.ambari.view.pig.test.JobTest.doCreateJob(\"Test\", \"/tmp/script.pig\", \"-useHCatalog\", jobService);\n    org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString());\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.apache.ambari.view.pig.resources.jobs.models.PigJob job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n    // Retrieve status:\n    // SUBMITTED\n    reset(api);\n    org.apache.ambari.view.pig.templeton.client.TempletonApi.JobInfo info \u003d api.new JobInfo();\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus());\n    // RUNNING\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_RUNNING)));\n    info.percentComplete \u003d \"30% complete\";\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus());\n    org.junit.Assert.assertTrue(job.isInProgress());\n    org.junit.Assert.assertEquals(30, ((java.lang.Object) (job.getPercentComplete())));\n    // SUCCEED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_SUCCEEDED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_COMPLETED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n    org.junit.Assert.assertNull(job.getPercentComplete());\n    // PREP\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_PREP)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus());\n    // FAILED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_FAILED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_FAILED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n    // KILLED\n    reset(api);\n    info \u003d api.new JobInfo();\n    info.status \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    info.status.put(\"runState\", ((double) (org.apache.ambari.view.pig.resources.jobs.JobResourceManager.RUN_STATE_KILLED)));\n    expect(api.checkJob(eq(\"job_id_#\"))).andReturn(info);\n    replay(api);\n    response \u003d jobService.getJob(job.getId());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    job \u003d ((org.apache.ambari.view.pig.resources.jobs.models.PigJob) (((org.json.simple.JSONObject) (response.getEntity())).get(\"job\")));\n    org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_KILLED, job.getStatus());\n    org.junit.Assert.assertFalse(job.isInProgress());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"-useHCatalog\", do_stream.toString()), org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_SUBMITTED, job.getStatus()), org.junit.Assert.assertTrue(job.isInProgress()), org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_RUNNING, job.getStatus()), org.junit.Assert.assertEquals(30, ((java.lang.Object) (job.getPercentComplete()))), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_COMPLETED, job.getStatus()), org.junit.Assert.assertFalse(job.isInProgress()), org.junit.Assert.assertNull(job.getPercentComplete()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_FAILED, job.getStatus()), org.junit.Assert.assertEquals(org.apache.ambari.view.pig.resources.jobs.models.PigJob.PIG_JOB_STATE_KILLED, job.getStatus())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/capacity-scheduler/src/test/java/org/apache/ambari/view/capacityscheduler/ConfigurationServiceTest.java": {
    "testRightConfigurationValue": [
      {
        "has_assertions": true,
        "assertion_lines": [
          78,
          81,
          82,
          83
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testRightConfigurationValue[]",
        "body": "@org.junit.Test\npublic void testRightConfigurationValue() {\n    javax.ws.rs.core.Response response \u003d configurationService.getConfigurationValue(\"ranger-yarn-plugin-properties\", \"ranger-yarn-plugin-enabled\");\n    org.json.simple.JSONObject jsonObject \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.json.simple.JSONArray arr \u003d ((org.json.simple.JSONArray) (jsonObject.get(\"configs\")));\n    org.junit.Assert.assertEquals(arr.size(), 1);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (arr.get(0)));\n    org.junit.Assert.assertEquals(obj.get(\"siteName\"), \"ranger-yarn-plugin-properties\");\n    org.junit.Assert.assertEquals(obj.get(\"configName\"), \"ranger-yarn-plugin-enabled\");\n    org.junit.Assert.assertEquals(obj.get(\"configValue\"), \"Yes\");// because I set it myself.\n\n}",
        "assertion_type": "org.junit.Assert.assertEquals(arr.size(), 1), org.junit.Assert.assertEquals(obj.get(\"siteName\"), \"ranger-yarn-plugin-properties\"), org.junit.Assert.assertEquals(obj.get(\"configName\"), \"ranger-yarn-plugin-enabled\"), org.junit.Assert.assertEquals(obj.get(\"configValue\"), \"Yes\")// because I set it myself."
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          83,
          86,
          87,
          88
        ],
        "commit": "82418c6d2847a9b85d93bae77485de1e66e32118",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testRightConfigurationValue[]",
        "body": "@org.junit.Test\npublic void testRightConfigurationValue() {\n    javax.ws.rs.core.Response response \u003d configurationService.getConfigurationValue(\"ranger-yarn-plugin-properties\", \"ranger-yarn-plugin-enabled\");\n    org.json.simple.JSONObject jsonObject \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.json.simple.JSONArray arr \u003d ((org.json.simple.JSONArray) (jsonObject.get(\"configs\")));\n    org.junit.Assert.assertEquals(arr.size(), 1);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (arr.get(0)));\n    org.junit.Assert.assertEquals(obj.get(\"siteName\"), \"ranger-yarn-plugin-properties\");\n    org.junit.Assert.assertEquals(obj.get(\"configName\"), \"ranger-yarn-plugin-enabled\");\n    org.junit.Assert.assertEquals(obj.get(\"configValue\"), \"Yes\");// because I set it myself.\n\n}",
        "assertion_type": "org.junit.Assert.assertEquals(arr.size(), 1), org.junit.Assert.assertEquals(obj.get(\"siteName\"), \"ranger-yarn-plugin-properties\"), org.junit.Assert.assertEquals(obj.get(\"configName\"), \"ranger-yarn-plugin-enabled\"), org.junit.Assert.assertEquals(obj.get(\"configValue\"), \"Yes\")// because I set it myself."
      }
    ],
    "testExceptionOnWrongConfigurationValue": [
      {
        "has_assertions": true,
        "assertion_lines": [
          91,
          94,
          95,
          96
        ],
        "commit": "c150f0ded83c0a2f4eac1d5bf12a0fbb643c9610",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testExceptionOnWrongConfigurationValue[]",
        "body": "@org.junit.Test\npublic void testExceptionOnWrongConfigurationValue() {\n    javax.ws.rs.core.Response response \u003d configurationService.getConfigurationValue(\"random-site\", \"random-key\");\n    org.json.simple.JSONObject jsonObject \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.json.simple.JSONArray arr \u003d ((org.json.simple.JSONArray) (jsonObject.get(\"configs\")));\n    org.junit.Assert.assertEquals(arr.size(), 1);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (arr.get(0)));\n    org.junit.Assert.assertEquals(obj.get(\"siteName\"), \"random-site\");\n    org.junit.Assert.assertEquals(obj.get(\"configName\"), \"random-key\");\n    org.junit.Assert.assertEquals(obj.get(\"configValue\"), null);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(arr.size(), 1), org.junit.Assert.assertEquals(obj.get(\"siteName\"), \"random-site\"), org.junit.Assert.assertEquals(obj.get(\"configName\"), \"random-key\"), org.junit.Assert.assertEquals(obj.get(\"configValue\"), null)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          96,
          99,
          100,
          101
        ],
        "commit": "82418c6d2847a9b85d93bae77485de1e66e32118",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testExceptionOnWrongConfigurationValue[]",
        "body": "@org.junit.Test\npublic void testExceptionOnWrongConfigurationValue() {\n    javax.ws.rs.core.Response response \u003d configurationService.getConfigurationValue(\"random-site\", \"random-key\");\n    org.json.simple.JSONObject jsonObject \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.json.simple.JSONArray arr \u003d ((org.json.simple.JSONArray) (jsonObject.get(\"configs\")));\n    org.junit.Assert.assertEquals(arr.size(), 1);\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (arr.get(0)));\n    org.junit.Assert.assertEquals(obj.get(\"siteName\"), \"random-site\");\n    org.junit.Assert.assertEquals(obj.get(\"configName\"), \"random-key\");\n    org.junit.Assert.assertEquals(obj.get(\"configValue\"), null);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(arr.size(), 1), org.junit.Assert.assertEquals(obj.get(\"siteName\"), \"random-site\"), org.junit.Assert.assertEquals(obj.get(\"configName\"), \"random-key\"), org.junit.Assert.assertEquals(obj.get(\"configValue\"), null)"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/test/java/org/apache/ambari/view/pig/test/IntegrationalTest.java": {
    "testHdfsApiDependsOnInstance": [
      {
        "has_assertions": true,
        "assertion_lines": [
          93,
          97,
          101
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testHdfsApiDependsOnInstance[]",
        "body": "@org.junit.Test\npublic void testHdfsApiDependsOnInstance() throws java.lang.Exception {\n    org.apache.ambari.view.utils.UserLocal.dropAllConnections(org.apache.ambari.view.utils.hdfs.HdfsApi.class);// cleanup API connection\n\n    org.apache.ambari.view.ViewContext context1 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context2 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context3 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    expect(context1.getProperties()).andReturn(properties).anyTimes();\n    expect(context1.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context1.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    expect(context2.getProperties()).andReturn(properties).anyTimes();\n    expect(context2.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context2.getInstanceName()).andReturn(\"Pig2\").anyTimes();\n    expect(context3.getProperties()).andReturn(properties).anyTimes();\n    expect(context3.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context3.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    org.easymock.EasyMock.replay(context1, context2, context3);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi1 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context1);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi2 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context2);\n    org.junit.Assert.assertNotSame(hdfsApi1, hdfsApi2);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi1_2 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context1);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi2_2 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context1);\n    org.junit.Assert.assertSame(hdfsApi1_2, hdfsApi2_2);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi1_3 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context1);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi3_3 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context3);\n    org.junit.Assert.assertSame(hdfsApi1_3, hdfsApi3_3);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(hdfsApi1, hdfsApi2), org.junit.Assert.assertSame(hdfsApi1_2, hdfsApi2_2), org.junit.Assert.assertSame(hdfsApi1_3, hdfsApi3_3)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          93,
          97,
          101
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testHdfsApiDependsOnInstance[]",
        "body": "@org.junit.Test\npublic void testHdfsApiDependsOnInstance() throws java.lang.Exception {\n    org.apache.ambari.view.utils.ViewUserLocal.dropAllConnections(org.apache.ambari.view.utils.hdfs.HdfsApi.class);// cleanup API connection\n\n    org.apache.ambari.view.ViewContext context1 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context2 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context3 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    expect(context1.getProperties()).andReturn(properties).anyTimes();\n    expect(context1.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context1.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    expect(context2.getProperties()).andReturn(properties).anyTimes();\n    expect(context2.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context2.getInstanceName()).andReturn(\"Pig2\").anyTimes();\n    expect(context3.getProperties()).andReturn(properties).anyTimes();\n    expect(context3.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context3.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    org.easymock.EasyMock.replay(context1, context2, context3);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi1 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context1);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi2 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context2);\n    org.junit.Assert.assertNotSame(hdfsApi1, hdfsApi2);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi1_2 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context1);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi2_2 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context1);\n    org.junit.Assert.assertSame(hdfsApi1_2, hdfsApi2_2);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi1_3 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context1);\n    org.apache.ambari.view.utils.hdfs.HdfsApi hdfsApi3_3 \u003d org.apache.ambari.view.pig.utils.UserLocalObjects.getHdfsApi(context3);\n    org.junit.Assert.assertSame(hdfsApi1_3, hdfsApi3_3);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(hdfsApi1, hdfsApi2), org.junit.Assert.assertSame(hdfsApi1_2, hdfsApi2_2), org.junit.Assert.assertSame(hdfsApi1_3, hdfsApi3_3)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          90,
          94,
          98
        ],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testHdfsApiDependsOnInstance[]",
        "body": "@org.junit.Test\npublic void testHdfsApiDependsOnInstance() throws java.lang.Exception {\n    org.apache.ambari.view.pig.utils.HdfsApi.dropAllConnections();\n    org.apache.ambari.view.ViewContext context1 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context2 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context3 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    expect(context1.getProperties()).andReturn(properties).anyTimes();\n    expect(context1.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context1.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    expect(context2.getProperties()).andReturn(properties).anyTimes();\n    expect(context2.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context2.getInstanceName()).andReturn(\"Pig2\").anyTimes();\n    expect(context3.getProperties()).andReturn(properties).anyTimes();\n    expect(context3.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context3.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    org.easymock.EasyMock.replay(context1, context2, context3);\n    org.apache.ambari.view.pig.utils.HdfsApi hdfsApi1 \u003d org.apache.ambari.view.pig.utils.HdfsApi.getInstance(context1);\n    org.apache.ambari.view.pig.utils.HdfsApi hdfsApi2 \u003d org.apache.ambari.view.pig.utils.HdfsApi.getInstance(context2);\n    org.junit.Assert.assertNotSame(hdfsApi1, hdfsApi2);\n    org.apache.ambari.view.pig.utils.HdfsApi hdfsApi1_2 \u003d org.apache.ambari.view.pig.utils.HdfsApi.getInstance(context1);\n    org.apache.ambari.view.pig.utils.HdfsApi hdfsApi2_2 \u003d org.apache.ambari.view.pig.utils.HdfsApi.getInstance(context1);\n    org.junit.Assert.assertSame(hdfsApi1_2, hdfsApi2_2);\n    org.apache.ambari.view.pig.utils.HdfsApi hdfsApi1_3 \u003d org.apache.ambari.view.pig.utils.HdfsApi.getInstance(context1);\n    org.apache.ambari.view.pig.utils.HdfsApi hdfsApi3_3 \u003d org.apache.ambari.view.pig.utils.HdfsApi.getInstance(context3);\n    org.junit.Assert.assertSame(hdfsApi1_3, hdfsApi3_3);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(hdfsApi1, hdfsApi2), org.junit.Assert.assertSame(hdfsApi1_2, hdfsApi2_2), org.junit.Assert.assertSame(hdfsApi1_3, hdfsApi3_3)"
      }
    ],
    "testStorageDependsOnInstance": [
      {
        "has_assertions": true,
        "assertion_lines": [
          127,
          131,
          135
        ],
        "commit": "7d547369a099c1786c9b23639322d4f48c17b21c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testStorageDependsOnInstance[]",
        "body": "@org.junit.Test\npublic void testStorageDependsOnInstance() throws java.lang.Exception {\n    org.apache.ambari.view.pig.persistence.utils.StorageUtil.dropAllConnections();\n    org.apache.ambari.view.ViewContext context1 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context2 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context3 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    expect(context1.getProperties()).andReturn(properties).anyTimes();\n    expect(context1.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context1.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    expect(context2.getProperties()).andReturn(properties).anyTimes();\n    expect(context2.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context2.getInstanceName()).andReturn(\"Pig2\").anyTimes();\n    expect(context3.getProperties()).andReturn(properties).anyTimes();\n    expect(context3.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context3.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    org.easymock.EasyMock.replay(context1, context2, context3);\n    org.apache.ambari.view.pig.persistence.Storage storage1 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context2).getStorage();\n    org.junit.Assert.assertNotSame(storage1, storage2);\n    org.apache.ambari.view.pig.persistence.Storage storage1_2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage2_2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.junit.Assert.assertSame(storage1_2, storage2_2);\n    org.apache.ambari.view.pig.persistence.Storage storage1_3 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage3_3 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context3).getStorage();\n    org.junit.Assert.assertSame(storage1_3, storage3_3);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(storage1, storage2), org.junit.Assert.assertSame(storage1_2, storage2_2), org.junit.Assert.assertSame(storage1_3, storage3_3)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          127,
          131,
          135
        ],
        "commit": "3602b583515a1bdad4711b54779e477112f56d9f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testStorageDependsOnInstance[]",
        "body": "@org.junit.Test\npublic void testStorageDependsOnInstance() throws java.lang.Exception {\n    org.apache.ambari.view.pig.persistence.utils.StorageUtil.dropAllConnections();\n    org.apache.ambari.view.ViewContext context1 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context2 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context3 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    expect(context1.getProperties()).andReturn(properties).anyTimes();\n    expect(context1.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context1.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    expect(context2.getProperties()).andReturn(properties).anyTimes();\n    expect(context2.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context2.getInstanceName()).andReturn(\"Pig2\").anyTimes();\n    expect(context3.getProperties()).andReturn(properties).anyTimes();\n    expect(context3.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context3.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    org.easymock.EasyMock.replay(context1, context2, context3);\n    org.apache.ambari.view.pig.persistence.Storage storage1 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context2).getStorage();\n    org.junit.Assert.assertNotSame(storage1, storage2);\n    org.apache.ambari.view.pig.persistence.Storage storage1_2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage2_2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.junit.Assert.assertSame(storage1_2, storage2_2);\n    org.apache.ambari.view.pig.persistence.Storage storage1_3 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage3_3 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context3).getStorage();\n    org.junit.Assert.assertSame(storage1_3, storage3_3);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(storage1, storage2), org.junit.Assert.assertSame(storage1_2, storage2_2), org.junit.Assert.assertSame(storage1_3, storage3_3)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          124,
          128,
          132
        ],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testStorageDependsOnInstance[]",
        "body": "@org.junit.Test\npublic void testStorageDependsOnInstance() throws java.lang.Exception {\n    org.apache.ambari.view.pig.persistence.utils.StorageUtil.dropAllConnections();\n    org.apache.ambari.view.ViewContext context1 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context2 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.apache.ambari.view.ViewContext context3 \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    expect(context1.getProperties()).andReturn(properties).anyTimes();\n    expect(context1.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context1.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    expect(context2.getProperties()).andReturn(properties).anyTimes();\n    expect(context2.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context2.getInstanceName()).andReturn(\"Pig2\").anyTimes();\n    expect(context3.getProperties()).andReturn(properties).anyTimes();\n    expect(context3.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    expect(context3.getInstanceName()).andReturn(\"Pig1\").anyTimes();\n    org.easymock.EasyMock.replay(context1, context2, context3);\n    org.apache.ambari.view.pig.persistence.Storage storage1 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context2).getStorage();\n    org.junit.Assert.assertNotSame(storage1, storage2);\n    org.apache.ambari.view.pig.persistence.Storage storage1_2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage2_2 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.junit.Assert.assertSame(storage1_2, storage2_2);\n    org.apache.ambari.view.pig.persistence.Storage storage1_3 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context1).getStorage();\n    org.apache.ambari.view.pig.persistence.Storage storage3_3 \u003d org.apache.ambari.view.pig.persistence.utils.StorageUtil.getInstance(context3).getStorage();\n    org.junit.Assert.assertSame(storage1_3, storage3_3);\n}",
        "assertion_type": "org.junit.Assert.assertNotSame(storage1, storage2), org.junit.Assert.assertSame(storage1_2, storage2_2), org.junit.Assert.assertSame(storage1_3, storage3_3)"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/files/src/test/java/org/apache/ambari/view/filebrowser/PropertyValidatorTest.java": {
    "testValidatePropertyWithValidWebhdfsURI": [
      {
        "has_assertions": true,
        "assertion_lines": [
          42,
          43
        ],
        "commit": "eaf8cc4cd2015456307ff3fcf98e49f2826fa270",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testValidatePropertyWithValidWebhdfsURI[]",
        "body": "@org.junit.Test\npublic void testValidatePropertyWithValidWebhdfsURI() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e propertyMap \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    propertyMap.put(PropertyValidator.WEBHDFS_URL, \"webhdfs://host:1234/\");\n    org.apache.ambari.view.ViewInstanceDefinition instanceDefinition \u003d getInstanceDef(propertyMap);\n    org.apache.ambari.view.validation.ValidationResult result \u003d new org.apache.ambari.view.filebrowser.PropertyValidator().validateProperty(PropertyValidator.WEBHDFS_URL, instanceDefinition, null);\n    org.junit.Assert.assertEquals(result, org.apache.ambari.view.validation.ValidationResult.SUCCESS);\n    org.junit.Assert.assertEquals(result.isValid(), true);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(result, org.apache.ambari.view.validation.ValidationResult.SUCCESS), org.junit.Assert.assertEquals(result.isValid(), true)"
      }
    ],
    "testValidatePropertyWithValidHdfsURI": [
      {
        "has_assertions": true,
        "assertion_lines": [
          53,
          54
        ],
        "commit": "eaf8cc4cd2015456307ff3fcf98e49f2826fa270",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testValidatePropertyWithValidHdfsURI[]",
        "body": "@org.junit.Test\npublic void testValidatePropertyWithValidHdfsURI() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e propertyMap \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    propertyMap.put(PropertyValidator.WEBHDFS_URL, \"hdfs://host:1234/\");\n    org.apache.ambari.view.ViewInstanceDefinition instanceDefinition \u003d getInstanceDef(propertyMap);\n    org.apache.ambari.view.validation.ValidationResult result \u003d new org.apache.ambari.view.filebrowser.PropertyValidator().validateProperty(PropertyValidator.WEBHDFS_URL, instanceDefinition, null);\n    org.junit.Assert.assertEquals(result, org.apache.ambari.view.validation.ValidationResult.SUCCESS);\n    org.junit.Assert.assertEquals(result.isValid(), true);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(result, org.apache.ambari.view.validation.ValidationResult.SUCCESS), org.junit.Assert.assertEquals(result.isValid(), true)"
      }
    ],
    "testValidatePropertyWithLocalFileURI": [
      {
        "has_assertions": true,
        "assertion_lines": [
          64,
          65,
          66
        ],
        "commit": "eaf8cc4cd2015456307ff3fcf98e49f2826fa270",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testValidatePropertyWithLocalFileURI[]",
        "body": "@org.junit.Test\npublic void testValidatePropertyWithLocalFileURI() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e propertyMap \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    propertyMap.put(PropertyValidator.WEBHDFS_URL, \"file:///\");\n    org.apache.ambari.view.ViewInstanceDefinition instanceDefinition \u003d getInstanceDef(propertyMap);\n    org.apache.ambari.view.validation.ValidationResult result \u003d new org.apache.ambari.view.filebrowser.PropertyValidator().validateProperty(PropertyValidator.WEBHDFS_URL, instanceDefinition, null);\n    org.junit.Assert.assertEquals(result.getClass(), PropertyValidator.InvalidPropertyValidationResult.class);\n    org.junit.Assert.assertEquals(result.isValid(), false);\n    org.junit.Assert.assertEquals(result.getDetail(), \"Must be valid URL\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(result.getClass(), PropertyValidator.InvalidPropertyValidationResult.class), org.junit.Assert.assertEquals(result.isValid(), false), org.junit.Assert.assertEquals(result.getDetail(), \"Must be valid URL\")"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ComponentProviderTest.java": {
    "testGetResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          44
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(15, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(15, resources.size())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          44
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(16, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(16, resources.size())"
      }
    ],
    "testGetResourcesWithPredicate": [
      {
        "has_assertions": true,
        "assertion_lines": [
          53,
          58,
          62
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"TASKTRACKER\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"TASKTRACKER\").or().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"DATANODE\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(2, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"BadComponent\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertTrue(resources.isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(2, resources.size()), junit.framework.Assert.assertTrue(resources.isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          53,
          58,
          62
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"TASKTRACKER\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"TASKTRACKER\").or().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"DATANODE\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(2, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"BadComponent\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertTrue(resources.isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(2, resources.size()), junit.framework.Assert.assertTrue(resources.isEmpty())"
      }
    ],
    "testCreateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          70
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [
          70
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testUpdateResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          93,
          101,
          109
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"TASKTRACKER\").toPredicate();\n    java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    properties.put(ComponentProvider.COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n    org.apache.ambari.server.controller.spi.Request updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n    properties.put(ComponentProvider.COMPONENT_STATE_PROPERTY_ID, \"INSTALLED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState());\n    properties.put(ComponentProvider.COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState()), junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          93,
          101,
          109
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"TASKTRACKER\").toPredicate();\n    java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    properties.put(ComponentProvider.COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n    org.apache.ambari.server.controller.spi.Request updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n    properties.put(ComponentProvider.COMPONENT_STATE_PROPERTY_ID, \"INSTALLED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState());\n    properties.put(ComponentProvider.COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState()), junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState())"
      }
    ],
    "testDeleteResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          117
        ],
        "commit": "18ab92c9c645353644402a4d51f31d28c9fa12ea",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [
          117
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ComponentProvider provider \u003d new org.apache.ambari.msi.ComponentProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/jobs/JobResourceManager.java": {
    "webhcatSmokeTest": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "128f4e465ea4ad208b510d1b1d5ee01164499098",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "webhcatSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to WebHCat\n *\n * @param context\n * \t\tView Context\n */\npublic static void webhcatSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.pig.templeton.client.TempletonApiFactory templetonApiFactory \u003d new org.apache.ambari.view.pig.templeton.client.TempletonApiFactory(context);\n        org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d templetonApiFactory.connectToTempletonApi();\n        api.status();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "fef680331e741956997cc94ffc7aadbde6d0ac1c",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "webhcatSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to WebHCat\n *\n * @param context\n * \t\tView Context\n */\npublic static void webhcatSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.pig.templeton.client.TempletonApiFactory templetonApiFactory \u003d new org.apache.ambari.view.pig.templeton.client.TempletonApiFactory(context);\n        org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d templetonApiFactory.connectToTempletonApi();\n        api.status();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "5289cb66a50f132afb8fb02b0b843e6e62123963",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "webhcatSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to WebHCat\n *\n * @param context\n * \t\tView Context\n */\npublic static void webhcatSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.pig.templeton.client.TempletonApiFactory templetonApiFactory \u003d new org.apache.ambari.view.pig.templeton.client.TempletonApiFactory(context);\n        org.apache.ambari.view.pig.templeton.client.TempletonApi api \u003d templetonApiFactory.connectToTempletonApi();\n        api.status();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/RequestProviderTest.java": {
    "testGetResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          44
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    clusterDefinition.getRequestResources().add(new org.apache.ambari.server.controller.internal.ResourceImpl(Resource.Type.Request));\n    org.apache.ambari.msi.RequestProvider provider \u003d new org.apache.ambari.msi.RequestProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(1, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size())"
      }
    ],
    "testCreateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          52
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.RequestProvider provider \u003d new org.apache.ambari.msi.RequestProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testUpdateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.RequestProvider provider \u003d new org.apache.ambari.msi.RequestProvider(clusterDefinition);\n    provider.updateResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e(), null), null);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testDeleteResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          73
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.RequestProvider provider \u003d new org.apache.ambari.msi.RequestProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/AbstractResourceProviderTest.java": {
    "testGetResourceProvider": [
      {
        "has_assertions": true,
        "assertion_lines": [
          49
        ],
        "commit": "a6536f3c6fb0fa5415b42b63ff994fd2bc78c621",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResourceProvider[]",
        "body": "@org.junit.Test\npublic void testGetResourceProvider() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    clusterDefinition.setServiceState(\"HDFS\", \"INSTALLED\");\n    for (org.apache.ambari.msi.Resource.Type type : org.apache.ambari.msi.AbstractResourceProviderTest.types) {\n        org.apache.ambari.msi.ResourceProvider provider \u003d org.apache.ambari.msi.AbstractResourceProvider.getResourceProvider(type, clusterDefinition);\n        org.apache.ambari.msi.Set\u003corg.apache.ambari.msi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.msi.PropertyHelper.getReadRequest(), null);\n        for (org.apache.ambari.msi.Resource resource : resources) {\n            org.junit.Assert.assertEquals(type, resource.getType());\n        }\n    }\n}",
        "assertion_type": "for (org.apache.ambari.msi.Resource.Type type : org.apache.ambari.msi.AbstractResourceProviderTest.types) {\n    org.apache.ambari.msi.ResourceProvider provider \u003d org.apache.ambari.msi.AbstractResourceProvider.getResourceProvider(type, clusterDefinition);\n    org.apache.ambari.msi.Set\u003corg.apache.ambari.msi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.msi.PropertyHelper.getReadRequest(), null);\n    for (org.apache.ambari.msi.Resource resource : resources) {\n        org.junit.Assert.assertEquals(type, resource.getType());\n    }\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          54
        ],
        "commit": "227b47926322e8e7bef2ae454bd7007cc3ec77e5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResourceProvider[]",
        "body": "@org.junit.Test\npublic void testGetResourceProvider() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    clusterDefinition.setServiceState(\"HDFS\", \"INSTALLED\");\n    for (org.apache.ambari.server.controller.spi.Resource.Type type : org.apache.ambari.msi.AbstractResourceProviderTest.types) {\n        org.apache.ambari.server.controller.spi.ResourceProvider provider \u003d org.apache.ambari.msi.AbstractResourceProvider.getResourceProvider(type, clusterDefinition);\n        java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n        for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n            org.junit.Assert.assertEquals(type, resource.getType());\n        }\n    }\n}",
        "assertion_type": "for (org.apache.ambari.server.controller.spi.Resource.Type type : org.apache.ambari.msi.AbstractResourceProviderTest.types) {\n    org.apache.ambari.server.controller.spi.ResourceProvider provider \u003d org.apache.ambari.msi.AbstractResourceProvider.getResourceProvider(type, clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        org.junit.Assert.assertEquals(type, resource.getType());\n    }\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          53
        ],
        "commit": "c417961570d98f05709fce07526a4b74cfaf8d64",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResourceProvider[]",
        "body": "@org.junit.Test\npublic void testGetResourceProvider() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    clusterDefinition.setServiceState(\"HDFS\", \"INSTALLED\");\n    for (org.apache.ambari.server.controller.spi.Resource.Type type : org.apache.ambari.msi.AbstractResourceProviderTest.types) {\n        org.apache.ambari.server.controller.spi.ResourceProvider provider \u003d org.apache.ambari.msi.AbstractResourceProvider.getResourceProvider(type, clusterDefinition);\n        java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n        for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n            org.junit.Assert.assertEquals(type, resource.getType());\n        }\n    }\n}",
        "assertion_type": "for (org.apache.ambari.server.controller.spi.Resource.Type type : org.apache.ambari.msi.AbstractResourceProviderTest.types) {\n    org.apache.ambari.server.controller.spi.ResourceProvider provider \u003d org.apache.ambari.msi.AbstractResourceProvider.getResourceProvider(type, clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {\n        org.junit.Assert.assertEquals(type, resource.getType());\n    }\n}"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java": {
    "testGetResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          43
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostProvider provider \u003d new org.apache.ambari.msi.HostProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(13, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(13, resources.size())"
      }
    ],
    "testGetResourcesWithPredicate": [
      {
        "has_assertions": true,
        "assertion_lines": [
          52,
          57,
          61
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostProvider provider \u003d new org.apache.ambari.msi.HostProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostProvider.HOST_NAME_PROPERTY_ID).equals(\"NAMENODE_MASTER.acme.com\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostProvider.HOST_NAME_PROPERTY_ID).equals(\"HBASE_MASTER.acme.com\").or().property(HostProvider.HOST_NAME_PROPERTY_ID).equals(\"slave3.acme.com\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(2, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostProvider.HOST_NAME_PROPERTY_ID).equals(\"unknownHost\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertTrue(resources.isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(2, resources.size()), junit.framework.Assert.assertTrue(resources.isEmpty())"
      }
    ],
    "testGetResourcesHostIP": [
      {
        "has_assertions": true,
        "assertion_lines": [
          70,
          76
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testGetResourcesHostIP[]",
        "body": "@org.junit.Test\npublic void testGetResourcesHostIP() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostProvider provider \u003d new org.apache.ambari.msi.HostProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostProvider.HOST_NAME_PROPERTY_ID).equals(\"NAMENODE_MASTER.acme.com\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    org.apache.ambari.server.controller.spi.Resource resource \u003d resources.iterator().next();\n    java.lang.String ip \u003d ((java.lang.String) (resource.getPropertyValue(HostProvider.HOST_IP_PROPERTY_ID)));\n    junit.framework.Assert.assertEquals(\"127.0.0.1\", ip);\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"127.0.0.1\", ip)"
      }
    ],
    "testGetResourcesCheckState": [
      {
        "has_assertions": true,
        "assertion_lines": [
          86,
          90,
          95,
          98
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckState[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckState() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostProvider provider \u003d new org.apache.ambari.msi.HostProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostProvider.HOST_NAME_PROPERTY_ID).equals(\"slave3.acme.com\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    org.apache.ambari.server.controller.spi.Resource resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"HEALTHY\", resource.getPropertyValue(HostProvider.HOST_STATE_PROPERTY_ID));\n    stateProvider.setState(StateProvider.State.Unknown);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"UNHEALTHY\", resource.getPropertyValue(HostProvider.HOST_STATE_PROPERTY_ID));\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"HEALTHY\", resource.getPropertyValue(HostProvider.HOST_STATE_PROPERTY_ID)), junit.framework.Assert.assertEquals(\"UNHEALTHY\", resource.getPropertyValue(HostProvider.HOST_STATE_PROPERTY_ID))"
      }
    ],
    "testGetResourcesCheckStateFromCategory": [
      {
        "has_assertions": true,
        "assertion_lines": [
          108,
          112,
          117,
          120
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckStateFromCategory[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckStateFromCategory() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostProvider provider \u003d new org.apache.ambari.msi.HostProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(HostProvider.HOST_NAME_PROPERTY_ID).equals(\"slave3.acme.com\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(\"Hosts\"), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    org.apache.ambari.server.controller.spi.Resource resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"HEALTHY\", resource.getPropertyValue(HostProvider.HOST_STATE_PROPERTY_ID));\n    stateProvider.setState(StateProvider.State.Unknown);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"UNHEALTHY\", resource.getPropertyValue(HostProvider.HOST_STATE_PROPERTY_ID));\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"HEALTHY\", resource.getPropertyValue(HostProvider.HOST_STATE_PROPERTY_ID)), junit.framework.Assert.assertEquals(\"UNHEALTHY\", resource.getPropertyValue(HostProvider.HOST_STATE_PROPERTY_ID))"
      }
    ],
    "testCreateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          128
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostProvider provider \u003d new org.apache.ambari.msi.HostProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testUpdateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostProvider provider \u003d new org.apache.ambari.msi.HostProvider(clusterDefinition);\n    provider.updateResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e(), null), null);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testDeleteResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          149
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.HostProvider provider \u003d new org.apache.ambari.msi.HostProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-views/src/test/java/org/apache/ambari/view/NoSuchResourceExceptionTest.java": {
    "testGetResourceId": [
      {
        "has_assertions": true,
        "assertion_lines": [
          30
        ],
        "commit": "89af4f19005c2a87561e2279fed8745a6f8a9645",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResourceId[]",
        "body": "@org.junit.Test\npublic void testGetResourceId() throws java.lang.Exception {\n    org.apache.ambari.view.NoSuchResourceException exception \u003d new org.apache.ambari.view.NoSuchResourceException(\"id\");\n    org.junit.Assert.assertEquals(\"id\", exception.getResourceId());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"id\", exception.getResourceId())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/test/java/org/apache/ambari/view/pig/test/UDFTest.java": {
    "createUDF": [
      {
        "has_assertions": true,
        "assertion_lines": [
          73,
          76,
          77,
          78
        ],
        "commit": "fbd5235e27e1b95318c21d6222eb7f31e5d16a6e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "createUDF[]",
        "body": "@org.junit.Test\npublic void createUDF() {\n    javax.ws.rs.core.Response response \u003d doCreateUDF();\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"udf\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"udf\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId().isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          69,
          72,
          73,
          74
        ],
        "commit": "f830293bfd64babd2520102c4a61a19d5a46aece",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "createUDF[]",
        "body": "@org.junit.Test\npublic void createUDF() {\n    javax.ws.rs.core.Response response \u003d doCreateUDF();\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"udf\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"udf\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId().isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          69,
          72,
          73,
          74
        ],
        "commit": "5eb22214397b55a153594faa75705517f55d945c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "createUDF[]",
        "body": "@org.junit.Test\npublic void createUDF() {\n    javax.ws.rs.core.Response response \u003d doCreateUDF();\n    org.junit.Assert.assertEquals(201, response.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"udf\"));\n    org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId());\n    org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId().isEmpty());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(201, response.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"udf\")), org.junit.Assert.assertNotNull(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId()), org.junit.Assert.assertFalse(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getId().isEmpty())"
      }
    ],
    "udfNotFound": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "fbd5235e27e1b95318c21d6222eb7f31e5d16a6e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "udfNotFound[]",
        "body": "@org.junit.Test\npublic void udfNotFound() {\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);\n    udfService.getUDF(\"4242\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          80
        ],
        "commit": "f830293bfd64babd2520102c4a61a19d5a46aece",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "udfNotFound[]",
        "body": "@org.junit.Test\npublic void udfNotFound() {\n    javax.ws.rs.core.Response response2 \u003d udfService.getUDF(\"4242\");\n    org.junit.Assert.assertEquals(404, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(404, response2.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          80
        ],
        "commit": "5eb22214397b55a153594faa75705517f55d945c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "udfNotFound[]",
        "body": "@org.junit.Test\npublic void udfNotFound() {\n    javax.ws.rs.core.Response response2 \u003d udfService.getUDF(\"4242\");\n    org.junit.Assert.assertEquals(404, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(404, response2.getStatus())"
      }
    ],
    "updateUDF": [
      {
        "has_assertions": true,
        "assertion_lines": [
          98,
          101,
          104,
          105,
          106
        ],
        "commit": "fbd5235e27e1b95318c21d6222eb7f31e5d16a6e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 5,
        "method_signature": "updateUDF[]",
        "body": "@org.junit.Test\npublic void updateUDF() {\n    javax.ws.rs.core.Response createdUDF \u003d doCreateUDF();\n    java.lang.String createdUdfId \u003d ((org.apache.ambari.view.pig.resources.udf.models.UDF) (((org.json.simple.JSONObject) (createdUDF.getEntity())).get(\"udf\"))).getId();\n    org.apache.ambari.view.pig.resources.udf.UDFService.UDFRequest request \u003d new org.apache.ambari.view.pig.resources.udf.UDFService.UDFRequest();\n    request.udf \u003d new org.apache.ambari.view.pig.resources.udf.models.UDF();\n    request.udf.setPath(\"/tmp/updatedUDF.jar\");\n    request.udf.setName(\"TestUDF2\");\n    javax.ws.rs.core.Response response \u003d udfService.updateUDF(request, createdUdfId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d udfService.getUDF(createdUdfId);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"udf\"));\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getName(), request.udf.getName());\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getPath(), request.udf.getPath());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"udf\")), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getName(), request.udf.getName()), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getPath(), request.udf.getPath())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          94,
          97,
          100,
          101,
          102
        ],
        "commit": "f830293bfd64babd2520102c4a61a19d5a46aece",
        "annotations": "@org.junit.Test",
        "assertion_amount": 5,
        "method_signature": "updateUDF[]",
        "body": "@org.junit.Test\npublic void updateUDF() {\n    javax.ws.rs.core.Response createdUDF \u003d doCreateUDF();\n    java.lang.String createdUdfId \u003d ((org.apache.ambari.view.pig.resources.udf.models.UDF) (((org.json.simple.JSONObject) (createdUDF.getEntity())).get(\"udf\"))).getId();\n    org.apache.ambari.view.pig.resources.udf.UDFService.UDFRequest request \u003d new org.apache.ambari.view.pig.resources.udf.UDFService.UDFRequest();\n    request.udf \u003d new org.apache.ambari.view.pig.resources.udf.models.UDF();\n    request.udf.setPath(\"/tmp/updatedUDF.jar\");\n    request.udf.setName(\"TestUDF2\");\n    javax.ws.rs.core.Response response \u003d udfService.updateUDF(request, createdUdfId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d udfService.getUDF(createdUdfId);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"udf\"));\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getName(), request.udf.getName());\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getPath(), request.udf.getPath());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"udf\")), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getName(), request.udf.getName()), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getPath(), request.udf.getPath())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          94,
          97,
          100,
          101,
          102
        ],
        "commit": "5eb22214397b55a153594faa75705517f55d945c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 5,
        "method_signature": "updateUDF[]",
        "body": "@org.junit.Test\npublic void updateUDF() {\n    javax.ws.rs.core.Response createdUDF \u003d doCreateUDF();\n    java.lang.String createdUdfId \u003d ((org.apache.ambari.view.pig.resources.udf.models.UDF) (((org.json.simple.JSONObject) (createdUDF.getEntity())).get(\"udf\"))).getId();\n    org.apache.ambari.view.pig.resources.udf.UDFService.UDFRequest request \u003d new org.apache.ambari.view.pig.resources.udf.UDFService.UDFRequest();\n    request.udf \u003d new org.apache.ambari.view.pig.resources.udf.models.UDF();\n    request.udf.setPath(\"/tmp/updatedUDF.jar\");\n    request.udf.setName(\"TestUDF2\");\n    javax.ws.rs.core.Response response \u003d udfService.updateUDF(request, createdUdfId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d udfService.getUDF(createdUdfId);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n    org.json.simple.JSONObject obj \u003d ((org.json.simple.JSONObject) (response2.getEntity()));\n    org.junit.Assert.assertTrue(obj.containsKey(\"udf\"));\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getName(), request.udf.getName());\n    org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getPath(), request.udf.getPath());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus()), org.junit.Assert.assertTrue(obj.containsKey(\"udf\")), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getName(), request.udf.getName()), org.junit.Assert.assertEquals(((org.apache.ambari.view.pig.resources.udf.models.UDF) (obj.get(\"udf\"))).getPath(), request.udf.getPath())"
      }
    ],
    "deleteUDF": [
      {
        "has_assertions": true,
        "assertion_lines": [
          115
        ],
        "commit": "fbd5235e27e1b95318c21d6222eb7f31e5d16a6e",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "deleteUDF[]",
        "body": "@org.junit.Test\npublic void deleteUDF() {\n    javax.ws.rs.core.Response createdUDF \u003d doCreateUDF();\n    java.lang.String createdUdfId \u003d ((org.apache.ambari.view.pig.resources.udf.models.UDF) (((org.json.simple.JSONObject) (createdUDF.getEntity())).get(\"udf\"))).getId();\n    javax.ws.rs.core.Response response \u003d udfService.deleteUDF(createdUdfId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    thrown.expect(org.apache.ambari.view.pig.utils.NotFoundFormattedException.class);\n    udfService.getUDF(createdUdfId);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          111,
          114
        ],
        "commit": "f830293bfd64babd2520102c4a61a19d5a46aece",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "deleteUDF[]",
        "body": "@org.junit.Test\npublic void deleteUDF() {\n    javax.ws.rs.core.Response createdUDF \u003d doCreateUDF();\n    java.lang.String createdUdfId \u003d ((org.apache.ambari.view.pig.resources.udf.models.UDF) (((org.json.simple.JSONObject) (createdUDF.getEntity())).get(\"udf\"))).getId();\n    javax.ws.rs.core.Response response \u003d udfService.deleteUDF(createdUdfId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d udfService.getUDF(createdUdfId);\n    org.junit.Assert.assertEquals(404, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(404, response2.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          111,
          114
        ],
        "commit": "5eb22214397b55a153594faa75705517f55d945c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "deleteUDF[]",
        "body": "@org.junit.Test\npublic void deleteUDF() {\n    javax.ws.rs.core.Response createdUDF \u003d doCreateUDF();\n    java.lang.String createdUdfId \u003d ((org.apache.ambari.view.pig.resources.udf.models.UDF) (((org.json.simple.JSONObject) (createdUDF.getEntity())).get(\"udf\"))).getId();\n    javax.ws.rs.core.Response response \u003d udfService.deleteUDF(createdUdfId);\n    org.junit.Assert.assertEquals(204, response.getStatus());\n    javax.ws.rs.core.Response response2 \u003d udfService.getUDF(createdUdfId);\n    org.junit.Assert.assertEquals(404, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(204, response.getStatus()), org.junit.Assert.assertEquals(404, response2.getStatus())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/test/java/org/apache/ambari/view/pig/test/ScriptTestUnmanaged.java": {
    "createScriptAutoCreateNoDefaultFS": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "31ebcd2548337621921e0606a26130c7d2f6f554",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "createScriptAutoCreateNoDefaultFS[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoDefaultFS() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    doCreateScript(\"Test\", null);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "4c903848e54134a9c011f1b13b248057864e0902",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "createScriptAutoCreateNoDefaultFS[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoDefaultFS() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    thrown.expect(org.apache.ambari.view.utils.hdfs.HdfsApiException.class);\n    doCreateScript(\"Test\", null);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "1f6ebfedf2ba167c00c44ba2d8fdf1c6e08717b5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "createScriptAutoCreateNoDefaultFS[]",
        "body": "@org.junit.Test\npublic void createScriptAutoCreateNoDefaultFS() {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e();\n    properties.put(\"dataworker.storagePath\", pigStorageFile.toString());\n    properties.put(\"scripts.dir\", \"/tmp/.pigscripts\");\n    expect(context.getProperties()).andReturn(properties).anyTimes();\n    expect(context.getUsername()).andReturn(\"ambari-qa\").anyTimes();\n    replay(handler, context);\n    scriptService \u003d getService(org.apache.ambari.view.pig.resources.scripts.ScriptService.class, handler, context);\n    thrown.expect(org.apache.ambari.view.pig.utils.ServiceFormattedException.class);\n    doCreateScript(\"Test\", null);\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/GetStacksTest.java": {
    "testServerStatus": [
      {
        "has_assertions": true,
        "assertion_lines": [
          79
        ],
        "commit": "39bda71b43c5572f057fd6c3cb6cbd91fcefa698",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testServerStatus[]",
        "body": "/**\n * Waits for the ambari server to startup and then checks it\u0027s\n * status by querying /api/v1/stacks (does not touch the DB)\n */\n@org.junit.Test\npublic void testServerStatus() throws java.io.IOException {\n    /**\n     * Query the ambari server for the list of stacks.\n     * A successful GET returns the list of stacks.\n     * We should get a json like:\n     * {\n     * \"href\" : \"http://localhost:9995/api/v1/stacks\",\n     * \"items\" : [\n     * {\n     * \"href\" : \"http://localhost:9995/api/v1/stacks/HDP\",\n     * \"Stacks\" : {\n     * \"stack_name\" : \"HDP\"\n     * }\n     * }\n     * ]\n     * }\n     */\n    /**\n     * Test URL for GETting the status of the ambari server\n     */\n    java.lang.String stacksPath \u003d \"/api/v1/stacks\";\n    java.lang.String stacksUrl \u003d java.lang.String.format(org.apache.ambari.funtest.server.tests.SERVER_URL_FORMAT, serverPort) + stacksPath;\n    org.apache.http.impl.client.CloseableHttpClient httpClient \u003d org.apache.http.impl.client.HttpClients.createDefault();\n    org.apache.http.client.methods.HttpGet httpGet \u003d new org.apache.http.client.methods.HttpGet(stacksUrl);\n    httpGet.addHeader(\"Authorization\", getBasicAdminAuthentication());\n    httpGet.addHeader(\"X-Requested-By\", \"ambari\");\n    try {\n        org.apache.http.HttpResponse httpResponse \u003d httpClient.execute(httpGet);\n        int statusCode \u003d httpResponse.getStatusLine().getStatusCode();\n        org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_OK, statusCode);// HTTP status code 200\n\n        org.apache.http.HttpEntity entity \u003d httpResponse.getEntity();\n        java.lang.String responseBody \u003d (entity !\u003d null) ? org.apache.http.util.EntityUtils.toString(entity) : null;\n        org.junit.Assert.assertTrue(responseBody !\u003d null);// Make sure response body is valid\n\n        com.google.gson.JsonElement jsonElement \u003d new com.google.gson.JsonParser().parse(new com.google.gson.stream.JsonReader(new java.io.StringReader(responseBody)));\n        org.junit.Assert.assertTrue(jsonElement !\u003d null);// Response was a JSON string\n\n        com.google.gson.JsonObject jsonObject \u003d jsonElement.getAsJsonObject();\n        org.junit.Assert.assertTrue(jsonObject.has(\"items\"));// Should have \"items\" entry\n\n        com.google.gson.JsonArray stacksArray \u003d jsonObject.get(\"items\").getAsJsonArray();\n        org.junit.Assert.assertTrue(stacksArray.size() \u003e 0);// Should have at least one stack\n\n    } finally {\n        httpClient.close();\n    }\n}",
        "assertion_type": "try {\n    org.apache.http.HttpResponse httpResponse \u003d httpClient.execute(httpGet);\n    int statusCode \u003d httpResponse.getStatusLine().getStatusCode();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_OK, statusCode);// HTTP status code 200\n\n    org.apache.http.HttpEntity entity \u003d httpResponse.getEntity();\n    java.lang.String responseBody \u003d (entity !\u003d null) ? org.apache.http.util.EntityUtils.toString(entity) : null;\n    org.junit.Assert.assertTrue(responseBody !\u003d null);// Make sure response body is valid\n\n    com.google.gson.JsonElement jsonElement \u003d new com.google.gson.JsonParser().parse(new com.google.gson.stream.JsonReader(new java.io.StringReader(responseBody)));\n    org.junit.Assert.assertTrue(jsonElement !\u003d null);// Response was a JSON string\n\n    com.google.gson.JsonObject jsonObject \u003d jsonElement.getAsJsonObject();\n    org.junit.Assert.assertTrue(jsonObject.has(\"items\"));// Should have \"items\" entry\n\n    com.google.gson.JsonArray stacksArray \u003d jsonObject.get(\"items\").getAsJsonArray();\n    org.junit.Assert.assertTrue(stacksArray.size() \u003e 0);// Should have at least one stack\n\n} finally {\n    httpClient.close();\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          81
        ],
        "commit": "3c28378fa4e6f4299e7df01c47359b4c8643ef63",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testServerStatus[]",
        "body": "/**\n * Waits for the ambari server to startup and then checks it\u0027s\n * status by querying /api/v1/stacks (does not touch the DB)\n */\n@org.junit.Test\npublic void testServerStatus() throws java.io.IOException {\n    /**\n     * Query the ambari server for the list of stacks.\n     * A successful GET returns the list of stacks.\n     * We should get a json like:\n     * {\n     * \"href\" : \"http://localhost:9995/api/v1/stacks\",\n     * \"items\" : [\n     * {\n     * \"href\" : \"http://localhost:9995/api/v1/stacks/HDP\",\n     * \"Stacks\" : {\n     * \"stack_name\" : \"HDP\"\n     * }\n     * }\n     * ]\n     * }\n     */\n    /**\n     * Test URL for GETting the status of the ambari server\n     */\n    java.lang.String stacksPath \u003d \"/api/v1/stacks\";\n    java.lang.String stacksUrl \u003d java.lang.String.format(org.apache.ambari.funtest.server.tests.SERVER_URL_FORMAT, serverPort) + stacksPath;\n    org.apache.http.impl.client.CloseableHttpClient httpClient \u003d org.apache.http.impl.client.HttpClients.createDefault();\n    org.apache.http.client.methods.HttpGet httpGet \u003d new org.apache.http.client.methods.HttpGet(stacksUrl);\n    httpGet.addHeader(\"Authorization\", getBasicAdminAuthentication());\n    httpGet.addHeader(\"X-Requested-By\", \"ambari\");\n    try {\n        org.apache.http.HttpResponse httpResponse \u003d httpClient.execute(httpGet);\n        int statusCode \u003d httpResponse.getStatusLine().getStatusCode();\n        org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_OK, statusCode);// HTTP status code 200\n\n        org.apache.http.HttpEntity entity \u003d httpResponse.getEntity();\n        java.lang.String responseBody \u003d (entity !\u003d null) ? org.apache.http.util.EntityUtils.toString(entity) : null;\n        org.junit.Assert.assertTrue(responseBody !\u003d null);// Make sure response body is valid\n\n        com.google.gson.JsonElement jsonElement \u003d new com.google.gson.JsonParser().parse(new com.google.gson.stream.JsonReader(new java.io.StringReader(responseBody)));\n        org.junit.Assert.assertTrue(jsonElement !\u003d null);// Response was a JSON string\n\n        com.google.gson.JsonObject jsonObject \u003d jsonElement.getAsJsonObject();\n        org.junit.Assert.assertTrue(jsonObject.has(\"items\"));// Should have \"items\" entry\n\n        com.google.gson.JsonArray stacksArray \u003d jsonObject.get(\"items\").getAsJsonArray();\n        org.junit.Assert.assertTrue(stacksArray.size() \u003e 0);// Should have at least one stack\n\n    } finally {\n        httpClient.close();\n    }\n}",
        "assertion_type": "try {\n    org.apache.http.HttpResponse httpResponse \u003d httpClient.execute(httpGet);\n    int statusCode \u003d httpResponse.getStatusLine().getStatusCode();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_OK, statusCode);// HTTP status code 200\n\n    org.apache.http.HttpEntity entity \u003d httpResponse.getEntity();\n    java.lang.String responseBody \u003d (entity !\u003d null) ? org.apache.http.util.EntityUtils.toString(entity) : null;\n    org.junit.Assert.assertTrue(responseBody !\u003d null);// Make sure response body is valid\n\n    com.google.gson.JsonElement jsonElement \u003d new com.google.gson.JsonParser().parse(new com.google.gson.stream.JsonReader(new java.io.StringReader(responseBody)));\n    org.junit.Assert.assertTrue(jsonElement !\u003d null);// Response was a JSON string\n\n    com.google.gson.JsonObject jsonObject \u003d jsonElement.getAsJsonObject();\n    org.junit.Assert.assertTrue(jsonObject.has(\"items\"));// Should have \"items\" entry\n\n    com.google.gson.JsonArray stacksArray \u003d jsonObject.get(\"items\").getAsJsonArray();\n    org.junit.Assert.assertTrue(stacksArray.size() \u003e 0);// Should have at least one stack\n\n} finally {\n    httpClient.close();\n}"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          80
        ],
        "commit": "b38cdb9b77e489f28f656e89964c04e65f9b326f",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testServerStatus[]",
        "body": "/**\n * Waits for the ambari server to startup and then checks it\u0027s\n * status by querying /api/v1/stacks (does not touch the DB)\n */\n@org.junit.Test\npublic void testServerStatus() throws java.io.IOException {\n    /**\n     * Query the ambari server for the list of stacks.\n     * A successful GET returns the list of stacks.\n     * We should get a json like:\n     * {\n     * \"href\" : \"http://localhost:9995/api/v1/stacks\",\n     * \"items\" : [\n     * {\n     * \"href\" : \"http://localhost:9995/api/v1/stacks/HDP\",\n     * \"Stacks\" : {\n     * \"stack_name\" : \"HDP\"\n     * }\n     * }\n     * ]\n     * }\n     */\n    /**\n     * Test URL for GETting the status of the ambari server\n     */\n    java.lang.String stacksPath \u003d \"/api/v1/stacks\";\n    java.lang.String stacksUrl \u003d java.lang.String.format(org.apache.ambari.funtest.server.tests.SERVER_URL_FORMAT, serverPort) + stacksPath;\n    org.apache.http.impl.client.CloseableHttpClient httpClient \u003d org.apache.http.impl.client.HttpClients.createDefault();\n    org.apache.http.client.methods.HttpGet httpGet \u003d new org.apache.http.client.methods.HttpGet(stacksUrl);\n    httpGet.addHeader(\"Authorization\", getBasicAdminAuthentication());\n    httpGet.addHeader(\"X-Requested-By\", \"ambari\");\n    try {\n        org.apache.http.HttpResponse httpResponse \u003d httpClient.execute(httpGet);\n        int statusCode \u003d httpResponse.getStatusLine().getStatusCode();\n        org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_OK, statusCode);// HTTP status code 200\n\n        org.apache.http.HttpEntity entity \u003d httpResponse.getEntity();\n        java.lang.String responseBody \u003d (entity !\u003d null) ? org.apache.http.util.EntityUtils.toString(entity) : null;\n        org.junit.Assert.assertTrue(responseBody !\u003d null);// Make sure response body is valid\n\n        com.google.gson.JsonElement jsonElement \u003d new com.google.gson.JsonParser().parse(new com.google.gson.stream.JsonReader(new java.io.StringReader(responseBody)));\n        org.junit.Assert.assertTrue(jsonElement !\u003d null);// Response was a JSON string\n\n        com.google.gson.JsonObject jsonObject \u003d jsonElement.getAsJsonObject();\n        org.junit.Assert.assertTrue(jsonObject.has(\"items\"));// Should have \"items\" entry\n\n        com.google.gson.JsonArray stacksArray \u003d jsonObject.get(\"items\").getAsJsonArray();\n        org.junit.Assert.assertTrue(stacksArray.size() \u003e 0);// Should have at least one stack\n\n    } finally {\n        httpClient.close();\n    }\n}",
        "assertion_type": "try {\n    org.apache.http.HttpResponse httpResponse \u003d httpClient.execute(httpGet);\n    int statusCode \u003d httpResponse.getStatusLine().getStatusCode();\n    org.junit.Assert.assertEquals(org.apache.http.HttpStatus.SC_OK, statusCode);// HTTP status code 200\n\n    org.apache.http.HttpEntity entity \u003d httpResponse.getEntity();\n    java.lang.String responseBody \u003d (entity !\u003d null) ? org.apache.http.util.EntityUtils.toString(entity) : null;\n    org.junit.Assert.assertTrue(responseBody !\u003d null);// Make sure response body is valid\n\n    com.google.gson.JsonElement jsonElement \u003d new com.google.gson.JsonParser().parse(new com.google.gson.stream.JsonReader(new java.io.StringReader(responseBody)));\n    org.junit.Assert.assertTrue(jsonElement !\u003d null);// Response was a JSON string\n\n    com.google.gson.JsonObject jsonObject \u003d jsonElement.getAsJsonObject();\n    org.junit.Assert.assertTrue(jsonObject.has(\"items\"));// Should have \"items\" entry\n\n    com.google.gson.JsonArray stacksArray \u003d jsonObject.get(\"items\").getAsJsonArray();\n    org.junit.Assert.assertTrue(stacksArray.size() \u003e 0);// Should have at least one stack\n\n} finally {\n    httpClient.close();\n}"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ConfigurationProviderTest.java": {
    "testConfigurationProvider_init_method_file_doesnt_exists": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "227b47926322e8e7bef2ae454bd7007cc3ec77e5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testConfigurationProvider_init_method_file_doesnt_exists[]",
        "body": "@org.junit.Test\npublic void testConfigurationProvider_init_method_file_doesnt_exists() throws java.lang.Exception {\n    ClusterDefinition clusterDefinitionMock \u003d createStrictMock(org.apache.ambari.msi.ClusterDefinition.class);\n    org.powermock.api.easymock.PowerMock.suppress(org.powermock.api.easymock.PowerMock.methods(org.apache.ambari.msi.ConfigurationProvider.class, \"initConfigurationResources\"));\n    com.thoughtworks.xstream.io.xml.StaxDriver staxDriver \u003d org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.io.xml.StaxDriver.class);\n    com.thoughtworks.xstream.XStream xstream \u003d org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.XStream.class);\n    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.io.xml.StaxDriver.class).andReturn(staxDriver);\n    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.XStream.class, staxDriver).andReturn(xstream);\n    xstream.alias(\"configuration\", java.util.Map.class);\n    expectLastCall();\n    xstream.registerConverter(anyObject(ConfigurationProvider.ScomConfigConverter.class));\n    expectLastCall();\n    org.powermock.api.easymock.PowerMock.replay(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class);\n    replay(clusterDefinitionMock);\n    new ConfigurationProvider(clusterDefinitionMock);\n    org.powermock.api.easymock.PowerMock.verify(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class);\n    verify(clusterDefinitionMock);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testConfigurationProvider_init_method_file_exists": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "227b47926322e8e7bef2ae454bd7007cc3ec77e5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testConfigurationProvider_init_method_file_exists[]",
        "body": "@org.junit.Test\npublic void testConfigurationProvider_init_method_file_exists() throws java.lang.Exception {\n    ClusterDefinition clusterDefinitionMock \u003d createStrictMock(org.apache.ambari.msi.ClusterDefinition.class);\n    org.powermock.api.easymock.PowerMock.suppress(org.powermock.api.easymock.PowerMock.methods(org.apache.ambari.msi.ConfigurationProvider.class, \"initConfigurationResources\"));\n    com.thoughtworks.xstream.io.xml.StaxDriver staxDriver \u003d org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.io.xml.StaxDriver.class);\n    com.thoughtworks.xstream.XStream xstream \u003d org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.XStream.class);\n    org.powermock.api.easymock.PowerMock.mockStatic(java.lang.ClassLoader.class);\n    java.io.InputStream mockInputStream \u003d createMock(java.io.InputStream.class);\n    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.io.xml.StaxDriver.class).andReturn(staxDriver);\n    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.XStream.class, staxDriver).andReturn(xstream);\n    xstream.alias(\"configuration\", java.util.Map.class);\n    expectLastCall();\n    xstream.registerConverter(anyObject(ConfigurationProvider.ScomConfigConverter.class));\n    expectLastCall();\n    expect(java.lang.ClassLoader.getSystemResourceAsStream(anyObject(java.lang.String.class))).andReturn(mockInputStream).times(5);\n    expect(xstream.fromXML(mockInputStream)).andReturn(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e()).times(5);\n    org.powermock.api.easymock.PowerMock.replay(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);\n    replay(clusterDefinitionMock, mockInputStream);\n    new ConfigurationProvider(clusterDefinitionMock);\n    org.powermock.api.easymock.PowerMock.verify(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);\n    verify(clusterDefinitionMock, mockInputStream);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testConfigurationProvider_initConfigurationResources_method": [
      {
        "has_assertions": true,
        "assertion_lines": [
          129
        ],
        "commit": "227b47926322e8e7bef2ae454bd7007cc3ec77e5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testConfigurationProvider_initConfigurationResources_method[]",
        "body": "@org.junit.Test\npublic void testConfigurationProvider_initConfigurationResources_method() throws java.lang.Exception {\n    ClusterDefinition clusterDefinitionMock \u003d createStrictMock(org.apache.ambari.msi.ClusterDefinition.class);\n    com.thoughtworks.xstream.io.xml.StaxDriver staxDriver \u003d org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.io.xml.StaxDriver.class);\n    com.thoughtworks.xstream.XStream xstream \u003d org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.XStream.class);\n    org.powermock.api.easymock.PowerMock.mockStatic(java.lang.ClassLoader.class);\n    java.io.InputStream mockInputStream \u003d createMock(java.io.InputStream.class);\n    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.io.xml.StaxDriver.class).andReturn(staxDriver);\n    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.XStream.class, staxDriver).andReturn(xstream);\n    xstream.alias(\"configuration\", java.util.Map.class);\n    expectLastCall();\n    xstream.registerConverter(anyObject(ConfigurationProvider.ScomConfigConverter.class));\n    expectLastCall();\n    expect(java.lang.ClassLoader.getSystemResourceAsStream(anyObject(java.lang.String.class))).andReturn(mockInputStream).times(5);\n    expect(xstream.fromXML(mockInputStream)).andReturn(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e() {\n        {\n            put(\"property_key\", \"propery_value\");\n        }\n    }).times(5);\n    expect(clusterDefinitionMock.getClusterName()).andReturn(\"ambari\");\n    org.powermock.api.easymock.PowerMock.replay(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);\n    replay(clusterDefinitionMock, mockInputStream);\n    ConfigurationProvider configurationProvider \u003d new ConfigurationProvider(clusterDefinitionMock);\n    org.powermock.api.easymock.PowerMock.verify(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);\n    verify(clusterDefinitionMock, mockInputStream);\n    org.junit.Assert.assertEquals(5, configurationProvider.getResources().size());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(5, configurationProvider.getResources().size())"
      }
    ],
    "testGetResourcesWithPredicate": [
      {
        "has_assertions": true,
        "assertion_lines": [
          168,
          169
        ],
        "commit": "227b47926322e8e7bef2ae454bd7007cc3ec77e5",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    ClusterDefinition clusterDefinitionMock \u003d createStrictMock(org.apache.ambari.msi.ClusterDefinition.class);\n    com.thoughtworks.xstream.io.xml.StaxDriver staxDriver \u003d org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.io.xml.StaxDriver.class);\n    com.thoughtworks.xstream.XStream xstream \u003d org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.XStream.class);\n    org.powermock.api.easymock.PowerMock.mockStatic(java.lang.ClassLoader.class);\n    java.io.InputStream mockInputStream \u003d createMock(java.io.InputStream.class);\n    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.io.xml.StaxDriver.class).andReturn(staxDriver);\n    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.XStream.class, staxDriver).andReturn(xstream);\n    xstream.alias(\"configuration\", java.util.Map.class);\n    expectLastCall();\n    xstream.registerConverter(anyObject(ConfigurationProvider.ScomConfigConverter.class));\n    expectLastCall();\n    expect(java.lang.ClassLoader.getSystemResourceAsStream(anyObject(java.lang.String.class))).andReturn(mockInputStream).times(5);\n    expect(xstream.fromXML(mockInputStream)).andReturn(new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e() {\n        {\n            put(\"property_key\", \"propery_value\");\n        }\n    }).times(5);\n    expect(clusterDefinitionMock.getClusterName()).andReturn(\"ambari\");\n    org.powermock.api.easymock.PowerMock.replay(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);\n    replay(clusterDefinitionMock, mockInputStream);\n    ConfigurationProvider configurationProvider \u003d new ConfigurationProvider(clusterDefinitionMock);\n    org.powermock.api.easymock.PowerMock.verify(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);\n    verify(clusterDefinitionMock, mockInputStream);\n    org.apache.ambari.server.controller.spi.Predicate configPredicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ConfigurationProvider.CONFIGURATION_CLUSTER_NAME_PROPERTY_ID).equals(\"ambari\").and().property(ConfigurationProvider.CONFIGURATION_CONFIG_TYPE_PROPERTY_ID).equals(\"yarn-site\").and().property(ConfigurationProvider.CONFIGURATION_CONFIG_TAG_PROPERTY_ID).equals(\"version1\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d configurationProvider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), configPredicate);\n    org.junit.Assert.assertNotNull(resources);\n    org.junit.Assert.assertEquals(1, resources.size());\n}",
        "assertion_type": "org.junit.Assert.assertNotNull(resources), org.junit.Assert.assertEquals(1, resources.size())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/files/src/test/java/org/apache/ambari/view/filebrowser/FilebrowserTest.java": {
    "testListDir": [
      {
        "has_assertions": true,
        "assertion_lines": [
          117,
          118
        ],
        "commit": "bffc22a7e3108d86474c6aa9665cb824d0b1d8eb",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testListDir[]",
        "body": "@org.junit.Test\npublic void testListDir() throws java.lang.Exception {\n    org.apache.ambari.view.commons.hdfs.FileOperationService.MkdirRequest request \u003d new org.apache.ambari.view.commons.hdfs.FileOperationService.MkdirRequest();\n    request.path \u003d \"/tmp1\";\n    fileBrowserService.fileOps().mkdir(request);\n    javax.ws.rs.core.Response response \u003d fileBrowserService.fileOps().listdir(\"/\", null);\n    org.json.simple.JSONObject responseObject \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.json.simple.JSONArray statuses \u003d ((org.json.simple.JSONArray) (responseObject.get(\"files\")));\n    java.lang.System.out.println(response.getEntity());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.junit.Assert.assertTrue(statuses.size() \u003e 0);\n    java.lang.System.out.println(statuses);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(statuses.size() \u003e 0)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          117,
          118
        ],
        "commit": "f6ecbd1d7fa5f90ec020e64dbb403b3c3c2bdeb3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testListDir[]",
        "body": "@org.junit.Test\npublic void testListDir() throws java.lang.Exception {\n    org.apache.ambari.view.commons.hdfs.FileOperationService.MkdirRequest request \u003d new org.apache.ambari.view.commons.hdfs.FileOperationService.MkdirRequest();\n    request.path \u003d \"/tmp1\";\n    fileBrowserService.fileOps().mkdir(request);\n    javax.ws.rs.core.Response response \u003d fileBrowserService.fileOps().listdir(\"/\", null);\n    org.json.simple.JSONObject responseObject \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.json.simple.JSONArray statuses \u003d ((org.json.simple.JSONArray) (responseObject.get(\"files\")));\n    java.lang.System.out.println(response.getEntity());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.junit.Assert.assertTrue(statuses.size() \u003e 0);\n    java.lang.System.out.println(statuses);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(statuses.size() \u003e 0)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          117,
          118
        ],
        "commit": "827fb206976c0ee68d8cfa6c1b3fdfca5e20a093",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testListDir[]",
        "body": "@org.junit.Test\npublic void testListDir() throws java.lang.Exception {\n    org.apache.ambari.view.commons.hdfs.FileOperationService.MkdirRequest request \u003d new org.apache.ambari.view.commons.hdfs.FileOperationService.MkdirRequest();\n    request.path \u003d \"/tmp1\";\n    fileBrowserService.fileOps().mkdir(request);\n    javax.ws.rs.core.Response response \u003d fileBrowserService.fileOps().listdir(\"/\");\n    org.json.simple.JSONObject responseObject \u003d ((org.json.simple.JSONObject) (response.getEntity()));\n    org.json.simple.JSONArray statuses \u003d ((org.json.simple.JSONArray) (responseObject.get(\"files\")));\n    java.lang.System.out.println(response.getEntity());\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    org.junit.Assert.assertTrue(statuses.size() \u003e 0);\n    java.lang.System.out.println(statuses);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertTrue(statuses.size() \u003e 0)"
      }
    ],
    "testUploadFile": [
      {
        "has_assertions": true,
        "assertion_lines": [
          142,
          148
        ],
        "commit": "bffc22a7e3108d86474c6aa9665cb824d0b1d8eb",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testUploadFile[]",
        "body": "@org.junit.Test\npublic void testUploadFile() throws java.lang.Exception {\n    javax.ws.rs.core.Response response \u003d uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\");\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    javax.ws.rs.core.Response listdir \u003d fileBrowserService.fileOps().listdir(\"/tmp\", null);\n    org.json.simple.JSONObject responseObject \u003d ((org.json.simple.JSONObject) (listdir.getEntity()));\n    org.json.simple.JSONArray statuses \u003d ((org.json.simple.JSONArray) (responseObject.get(\"files\")));\n    java.lang.System.out.println(statuses.size());\n    javax.ws.rs.core.Response response2 \u003d fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, false, httpHeaders, uriInfo);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          142,
          148
        ],
        "commit": "f6ecbd1d7fa5f90ec020e64dbb403b3c3c2bdeb3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testUploadFile[]",
        "body": "@org.junit.Test\npublic void testUploadFile() throws java.lang.Exception {\n    javax.ws.rs.core.Response response \u003d uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\");\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    javax.ws.rs.core.Response listdir \u003d fileBrowserService.fileOps().listdir(\"/tmp\", null);\n    org.json.simple.JSONObject responseObject \u003d ((org.json.simple.JSONObject) (listdir.getEntity()));\n    org.json.simple.JSONArray statuses \u003d ((org.json.simple.JSONArray) (responseObject.get(\"files\")));\n    java.lang.System.out.println(statuses.size());\n    javax.ws.rs.core.Response response2 \u003d fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, false, httpHeaders, uriInfo);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          142,
          148
        ],
        "commit": "827fb206976c0ee68d8cfa6c1b3fdfca5e20a093",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testUploadFile[]",
        "body": "@org.junit.Test\npublic void testUploadFile() throws java.lang.Exception {\n    javax.ws.rs.core.Response response \u003d uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\");\n    org.junit.Assert.assertEquals(200, response.getStatus());\n    javax.ws.rs.core.Response listdir \u003d fileBrowserService.fileOps().listdir(\"/tmp\");\n    org.json.simple.JSONObject responseObject \u003d ((org.json.simple.JSONObject) (listdir.getEntity()));\n    org.json.simple.JSONArray statuses \u003d ((org.json.simple.JSONArray) (responseObject.get(\"files\")));\n    java.lang.System.out.println(statuses.size());\n    javax.ws.rs.core.Response response2 \u003d fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, false, httpHeaders, uriInfo);\n    org.junit.Assert.assertEquals(200, response2.getStatus());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(200, response.getStatus()), org.junit.Assert.assertEquals(200, response2.getStatus())"
      }
    ],
    "testStreamingGzip": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "bffc22a7e3108d86474c6aa9665cb824d0b1d8eb",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testStreamingGzip[]",
        "body": "@org.junit.Test\npublic void testStreamingGzip() throws java.lang.Exception {\n    java.lang.String gzipDir \u003d \"/tmp/testGzip\";\n    createDirectoryWithFiles(gzipDir);\n    org.apache.ambari.view.filebrowser.DownloadService.DownloadRequest dr \u003d new org.apache.ambari.view.filebrowser.DownloadService.DownloadRequest();\n    dr.entries \u003d new java.lang.String[]{ gzipDir };\n    javax.ws.rs.core.Response result \u003d fileBrowserService.download().downloadGZip(dr);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "f6ecbd1d7fa5f90ec020e64dbb403b3c3c2bdeb3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testStreamingGzip[]",
        "body": "@org.junit.Test\npublic void testStreamingGzip() throws java.lang.Exception {\n    java.lang.String gzipDir \u003d \"/tmp/testGzip\";\n    createDirectoryWithFiles(gzipDir);\n    org.apache.ambari.view.filebrowser.DownloadService.DownloadRequest dr \u003d new org.apache.ambari.view.filebrowser.DownloadService.DownloadRequest();\n    dr.entries \u003d new java.lang.String[]{ gzipDir };\n    javax.ws.rs.core.Response result \u003d fileBrowserService.download().downloadGZip(dr);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "827fb206976c0ee68d8cfa6c1b3fdfca5e20a093",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testStreamingGzip[]",
        "body": "@org.junit.Test\npublic void testStreamingGzip() throws java.lang.Exception {\n    java.lang.String gzipDir \u003d \"/tmp/testGzip\";\n    createDirectoryWithFiles(gzipDir);\n    org.apache.ambari.view.filebrowser.DownloadService.DownloadRequest dr \u003d new org.apache.ambari.view.filebrowser.DownloadService.DownloadRequest();\n    dr.entries \u003d new java.lang.String[]{ gzipDir };\n    javax.ws.rs.core.Response result \u003d fileBrowserService.download().downloadGZip(dr);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testStreamingDownloadGzipName": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "bffc22a7e3108d86474c6aa9665cb824d0b1d8eb",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testStreamingDownloadGzipName[]",
        "body": "@org.junit.Test\npublic void testStreamingDownloadGzipName() throws java.lang.Exception {\n    java.lang.String gzipDir \u003d \"/tmp/testGzip1\";\n    createDirectoryWithFiles(gzipDir);\n    // test download 1 folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir }, \"testGzip1.zip\");\n    // test download 1 folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11.txt\" }, \"testGzip11.txt.zip\");\n    java.lang.String gzipDir2 \u003d \"/tmp/testGzip2\";\n    createDirectoryWithFiles(gzipDir2);\n    // test download 2 folders\n    validateDownloadZipName(new java.lang.String[]{ gzipDir, gzipDir2 }, \"hdfs.zip\");\n    // test download 2 files of same folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11\", gzipDir + \"/testGzip12\" }, \"hdfs.zip\");\n    // test download 2 files of different folder -- although I think UI does not allow it\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11\", gzipDir2 + \"/testGzip21\" }, \"hdfs.zip\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "f6ecbd1d7fa5f90ec020e64dbb403b3c3c2bdeb3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testStreamingDownloadGzipName[]",
        "body": "@org.junit.Test\npublic void testStreamingDownloadGzipName() throws java.lang.Exception {\n    java.lang.String gzipDir \u003d \"/tmp/testGzip1\";\n    createDirectoryWithFiles(gzipDir);\n    // test download 1 folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir }, \"testGzip1.zip\");\n    // test download 1 folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11.txt\" }, \"testGzip11.txt.zip\");\n    java.lang.String gzipDir2 \u003d \"/tmp/testGzip2\";\n    createDirectoryWithFiles(gzipDir2);\n    // test download 2 folders\n    validateDownloadZipName(new java.lang.String[]{ gzipDir, gzipDir2 }, \"hdfs.zip\");\n    // test download 2 files of same folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11\", gzipDir + \"/testGzip12\" }, \"hdfs.zip\");\n    // test download 2 files of different folder -- although I think UI does not allow it\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11\", gzipDir2 + \"/testGzip21\" }, \"hdfs.zip\");\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "827fb206976c0ee68d8cfa6c1b3fdfca5e20a093",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testStreamingDownloadGzipName[]",
        "body": "@org.junit.Test\npublic void testStreamingDownloadGzipName() throws java.lang.Exception {\n    java.lang.String gzipDir \u003d \"/tmp/testGzip1\";\n    createDirectoryWithFiles(gzipDir);\n    // test download 1 folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir }, \"testGzip1.zip\");\n    // test download 1 folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11.txt\" }, \"testGzip11.txt.zip\");\n    java.lang.String gzipDir2 \u003d \"/tmp/testGzip2\";\n    createDirectoryWithFiles(gzipDir2);\n    // test download 2 folders\n    validateDownloadZipName(new java.lang.String[]{ gzipDir, gzipDir2 }, \"hdfs.zip\");\n    // test download 2 files of same folder\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11\", gzipDir + \"/testGzip12\" }, \"hdfs.zip\");\n    // test download 2 files of different folder -- although I think UI does not allow it\n    validateDownloadZipName(new java.lang.String[]{ gzipDir + \"/testGzip11\", gzipDir2 + \"/testGzip21\" }, \"hdfs.zip\");\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testUsername": [
      {
        "has_assertions": true,
        "assertion_lines": [
          207,
          209
        ],
        "commit": "bffc22a7e3108d86474c6aa9665cb824d0b1d8eb",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testUsername[]",
        "body": "@org.junit.Test\npublic void testUsername() throws java.lang.Exception {\n    org.junit.Assert.assertEquals(java.lang.System.getProperty(\"user.name\"), fileBrowserService.upload().getDoAsUsername(context));\n    properties.put(\"webhdfs.username\", \"test-user\");\n    org.junit.Assert.assertEquals(\"test-user\", fileBrowserService.upload().getDoAsUsername(context));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.System.getProperty(\"user.name\"), fileBrowserService.upload().getDoAsUsername(context)), org.junit.Assert.assertEquals(\"test-user\", fileBrowserService.upload().getDoAsUsername(context))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          207,
          209
        ],
        "commit": "f6ecbd1d7fa5f90ec020e64dbb403b3c3c2bdeb3",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testUsername[]",
        "body": "@org.junit.Test\npublic void testUsername() throws java.lang.Exception {\n    org.junit.Assert.assertEquals(java.lang.System.getProperty(\"user.name\"), fileBrowserService.upload().getDoAsUsername(context));\n    properties.put(\"webhdfs.username\", \"test-user\");\n    org.junit.Assert.assertEquals(\"test-user\", fileBrowserService.upload().getDoAsUsername(context));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.System.getProperty(\"user.name\"), fileBrowserService.upload().getDoAsUsername(context)), org.junit.Assert.assertEquals(\"test-user\", fileBrowserService.upload().getDoAsUsername(context))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          207,
          209
        ],
        "commit": "827fb206976c0ee68d8cfa6c1b3fdfca5e20a093",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testUsername[]",
        "body": "@org.junit.Test\npublic void testUsername() throws java.lang.Exception {\n    org.junit.Assert.assertEquals(java.lang.System.getProperty(\"user.name\"), fileBrowserService.upload().getDoAsUsername(context));\n    properties.put(\"webhdfs.username\", \"test-user\");\n    org.junit.Assert.assertEquals(\"test-user\", fileBrowserService.upload().getDoAsUsername(context));\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.lang.System.getProperty(\"user.name\"), fileBrowserService.upload().getDoAsUsername(context)), org.junit.Assert.assertEquals(\"test-user\", fileBrowserService.upload().getDoAsUsername(context))"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterProviderTest.java": {
    "testGetResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          44,
          45
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 2,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ClusterProvider provider \u003d new org.apache.ambari.msi.ClusterProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    junit.framework.Assert.assertEquals(\"myCluster\", resources.iterator().next().getPropertyValue(ClusterProvider.CLUSTER_NAME_PROPERTY_ID));\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"myCluster\", resources.iterator().next().getPropertyValue(ClusterProvider.CLUSTER_NAME_PROPERTY_ID))"
      }
    ],
    "testGetResourcesWithPredicate": [
      {
        "has_assertions": true,
        "assertion_lines": [
          56,
          58,
          59,
          63
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ClusterProvider provider \u003d new org.apache.ambari.msi.ClusterProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ClusterProvider.CLUSTER_NAME_PROPERTY_ID).equals(\"myCluster\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    org.apache.ambari.server.controller.spi.Resource next \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"myCluster\", next.getPropertyValue(ClusterProvider.CLUSTER_NAME_PROPERTY_ID));\n    junit.framework.Assert.assertEquals(\"HDP-1.2.9\", next.getPropertyValue(ClusterProvider.CLUSTER_VERSION_PROPERTY_ID));\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ClusterProvider.CLUSTER_NAME_PROPERTY_ID).equals(\"non-existent Cluster\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertTrue(resources.isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"myCluster\", next.getPropertyValue(ClusterProvider.CLUSTER_NAME_PROPERTY_ID)), junit.framework.Assert.assertEquals(\"HDP-1.2.9\", next.getPropertyValue(ClusterProvider.CLUSTER_VERSION_PROPERTY_ID)), junit.framework.Assert.assertTrue(resources.isEmpty())"
      }
    ],
    "testCreateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          71
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ClusterProvider provider \u003d new org.apache.ambari.msi.ClusterProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testUpdateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ClusterProvider provider \u003d new org.apache.ambari.msi.ClusterProvider(clusterDefinition);\n    provider.updateResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e(), null), null);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testDeleteResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          92
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ClusterProvider provider \u003d new org.apache.ambari.msi.ClusterProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilderTest.java": {
    "testAddProtocolMissing": [
      {
        "has_assertions": true,
        "assertion_lines": [
          51
        ],
        "commit": "f26bad435c6b9914e400472ec923e2fddf39ea22",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddProtocolMissing[]",
        "body": "@org.junit.Test\npublic void testAddProtocolMissing() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addProtocolIfMissing(\"namenode.example.com:50070\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          37
        ],
        "commit": "6b04d3e0efa6672b7f49db57914f6bda7071d49c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddProtocolMissing[]",
        "body": "@org.junit.Test\npublic void testAddProtocolMissing() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addProtocolIfMissing(\"namenode.example.com:50070\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          29
        ],
        "commit": "7d793c2b33730184e8ba8cb6d8dfd6589578e21d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddProtocolMissing[]",
        "body": "@org.junit.Test\npublic void testAddProtocolMissing() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addProtocolIfMissing(\"namenode.example.com:50070\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      }
    ],
    "testAddProtocolPresent": [
      {
        "has_assertions": true,
        "assertion_lines": [
          57
        ],
        "commit": "f26bad435c6b9914e400472ec923e2fddf39ea22",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddProtocolPresent[]",
        "body": "@org.junit.Test\npublic void testAddProtocolPresent() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addProtocolIfMissing(\"webhdfs://namenode.example.com\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          43
        ],
        "commit": "6b04d3e0efa6672b7f49db57914f6bda7071d49c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddProtocolPresent[]",
        "body": "@org.junit.Test\npublic void testAddProtocolPresent() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addProtocolIfMissing(\"webhdfs://namenode.example.com\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          35
        ],
        "commit": "7d793c2b33730184e8ba8cb6d8dfd6589578e21d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddProtocolPresent[]",
        "body": "@org.junit.Test\npublic void testAddProtocolPresent() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addProtocolIfMissing(\"webhdfs://namenode.example.com\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com\")"
      }
    ],
    "testAddPortMissing": [
      {
        "has_assertions": true,
        "assertion_lines": [
          63
        ],
        "commit": "f26bad435c6b9914e400472ec923e2fddf39ea22",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddPortMissing[]",
        "body": "@org.junit.Test\npublic void testAddPortMissing() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addPortIfMissing(\"webhdfs://namenode.example.com\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          49
        ],
        "commit": "6b04d3e0efa6672b7f49db57914f6bda7071d49c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddPortMissing[]",
        "body": "@org.junit.Test\npublic void testAddPortMissing() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addPortIfMissing(\"webhdfs://namenode.example.com\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          41
        ],
        "commit": "7d793c2b33730184e8ba8cb6d8dfd6589578e21d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddPortMissing[]",
        "body": "@org.junit.Test\npublic void testAddPortMissing() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addPortIfMissing(\"webhdfs://namenode.example.com\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      }
    ],
    "testAddPortPresent": [
      {
        "has_assertions": true,
        "assertion_lines": [
          69
        ],
        "commit": "f26bad435c6b9914e400472ec923e2fddf39ea22",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddPortPresent[]",
        "body": "@org.junit.Test\npublic void testAddPortPresent() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addPortIfMissing(\"webhdfs://namenode.example.com:50070\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          55
        ],
        "commit": "6b04d3e0efa6672b7f49db57914f6bda7071d49c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddPortPresent[]",
        "body": "@org.junit.Test\npublic void testAddPortPresent() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addPortIfMissing(\"webhdfs://namenode.example.com:50070\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          47
        ],
        "commit": "7d793c2b33730184e8ba8cb6d8dfd6589578e21d",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testAddPortPresent[]",
        "body": "@org.junit.Test\npublic void testAddPortPresent() throws java.lang.Exception {\n    java.lang.String normalized \u003d ConfigurationBuilder.addPortIfMissing(\"webhdfs://namenode.example.com:50070\");\n    org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\");\n}",
        "assertion_type": "org.junit.Assert.assertEquals(normalized, \"webhdfs://namenode.example.com:50070\")"
      }
    ],
    "testGetEncryptionKeyProviderUri": [
      {
        "has_assertions": true,
        "assertion_lines": [
          91
        ],
        "commit": "f26bad435c6b9914e400472ec923e2fddf39ea22",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetEncryptionKeyProviderUri[]",
        "body": "@org.junit.Test\npublic void testGetEncryptionKeyProviderUri() throws java.lang.Exception {\n    // For View with an associated cluster must return the following KeyProvider\n    // For View with NO cluster associated with it, getEncryptionKeyProviderUri() won\u0027t be called\n    java.lang.String keyProvider \u003d \"kms://http@localhost:16000/kms\";\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    org.easymock.EasyMock.expect(cluster.getConfigurationValue(\"hdfs-site\", \"dfs.encryption.key.provider.uri\")).andReturn(keyProvider);\n    org.easymock.EasyMock.replay(cluster);\n    org.apache.ambari.view.ViewContext viewContext \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext.getCluster()).andReturn(cluster).anyTimes();\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e instanceProperties \u003d new java.util.HashMap\u003c\u003e();\n    org.easymock.EasyMock.expect(viewContext.getProperties()).andReturn(instanceProperties).anyTimes();\n    org.easymock.EasyMock.replay(viewContext);\n    ConfigurationBuilder configurationBuilder \u003d new ConfigurationBuilder(viewContext);\n    java.lang.String encryptionKeyProviderUri \u003d configurationBuilder.getEncryptionKeyProviderUri();\n    org.junit.Assert.assertEquals(encryptionKeyProviderUri, keyProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(encryptionKeyProviderUri, keyProvider)"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          77
        ],
        "commit": "6b04d3e0efa6672b7f49db57914f6bda7071d49c",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetEncryptionKeyProviderUri[]",
        "body": "@org.junit.Test\npublic void testGetEncryptionKeyProviderUri() throws java.lang.Exception {\n    // For View with an associated cluster must return the following KeyProvider\n    // For View with NO cluster associated with it, getEncryptionKeyProviderUri() won\u0027t be called\n    java.lang.String keyProvider \u003d \"kms://http@localhost:16000/kms\";\n    org.apache.ambari.view.cluster.Cluster cluster \u003d createNiceMock(org.apache.ambari.view.cluster.Cluster.class);\n    org.easymock.EasyMock.expect(cluster.getConfigurationValue(\"hdfs-site\", \"dfs.encryption.key.provider.uri\")).andReturn(keyProvider);\n    org.easymock.EasyMock.replay(cluster);\n    org.apache.ambari.view.ViewContext viewContext \u003d createNiceMock(org.apache.ambari.view.ViewContext.class);\n    org.easymock.EasyMock.expect(viewContext.getCluster()).andReturn(cluster);\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e instanceProperties \u003d new java.util.HashMap\u003c\u003e();\n    org.easymock.EasyMock.expect(viewContext.getProperties()).andReturn(instanceProperties).anyTimes();\n    org.easymock.EasyMock.replay(viewContext);\n    ConfigurationBuilder configurationBuilder \u003d new ConfigurationBuilder(viewContext);\n    java.lang.String encryptionKeyProviderUri \u003d configurationBuilder.getEncryptionKeyProviderUri();\n    org.junit.Assert.assertEquals(encryptionKeyProviderUri, keyProvider);\n}",
        "assertion_type": "org.junit.Assert.assertEquals(encryptionKeyProviderUri, keyProvider)"
      }
    ],
    "testCopyHAProperties": [
      {
        "has_assertions": true,
        "assertion_lines": [
          119
        ],
        "commit": "f26bad435c6b9914e400472ec923e2fddf39ea22",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testCopyHAProperties[]",
        "body": "@org.junit.Test\npublic void testCopyHAProperties() throws java.lang.Exception {\n    java.util.Map\u003cjava.lang.String, java.lang.String\u003e properties \u003d new java.util.HashMap();\n    java.lang.String[] nnrpc \u003d new java.lang.String[]{ \"nn1rpc\", \"nn2rpc\", \"nn3rpc\" };\n    java.lang.String[] nnhttp \u003d new java.lang.String[]{ \"nn1http\", \"nn2http\", \"nn3http\" };\n    java.lang.String[] nnhttps \u003d new java.lang.String[]{ \"nn1https\", \"nn2https\", \"nn3https\" };\n    java.lang.String nameservice \u003d \"mycluster\";\n    java.lang.String nameNodesString \u003d \"nn1,nn2,nn3\";\n    java.lang.String[] namenodes \u003d nameNodesString.split(\",\");\n    properties.put(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMESERVICES_INSTANCE_PROPERTY, nameservice);\n    properties.put(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.HA_NAMENODES_INSTANCE_PROPERTY, nameNodesString);\n    properties.put(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_RPC_NN_INSTANCE_PROPERTY, com.google.common.base.Joiner.on(\",\").join(java.util.Arrays.asList(nnrpc)));\n    properties.put(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTP_NN_INSTANCE_PROPERTY, com.google.common.base.Joiner.on(\",\").join(java.util.Arrays.asList(nnhttp)));\n    properties.put(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTPS_NN_INSTANCE_PROPERTY, com.google.common.base.Joiner.on(\",\").join(java.util.Arrays.asList(nnhttps)));\n    java.lang.String defaultFS \u003d \"webhdfs://\" + nameservice;\n    org.apache.ambari.view.cluster.Cluster cluster \u003d org.mockito.Mockito.mock(org.apache.ambari.view.cluster.Cluster.class);\n    org.apache.ambari.view.ViewContext viewContext \u003d org.mockito.Mockito.mock(org.apache.ambari.view.ViewContext.class);\n    org.mockito.Mockito.when(viewContext.getCluster()).thenReturn(null);\n    org.mockito.Mockito.when(viewContext.getProperties()).thenReturn(properties);\n    ConfigurationBuilder configurationBuilder \u003d new ConfigurationBuilder(viewContext);\n    configurationBuilder.copyHAProperties(defaultFS);\n    for (int i \u003d 0; i \u003c nnhttp.length; i++) {\n        org.junit.Assert.assertEquals(\"name node rpc address not correct.\", nnrpc[i], configurationBuilder.conf.get(java.lang.String.format(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));\n        org.junit.Assert.assertEquals(\"name node http address not correct.\", nnhttp[i], configurationBuilder.conf.get(java.lang.String.format(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));\n        org.junit.Assert.assertEquals(\"name node https address not correct.\", nnhttps[i], configurationBuilder.conf.get(java.lang.String.format(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));\n    }\n}",
        "assertion_type": "for (int i \u003d 0; i \u003c nnhttp.length; i++) {\n    org.junit.Assert.assertEquals(\"name node rpc address not correct.\", nnrpc[i], configurationBuilder.conf.get(java.lang.String.format(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));\n    org.junit.Assert.assertEquals(\"name node http address not correct.\", nnhttp[i], configurationBuilder.conf.get(java.lang.String.format(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));\n    org.junit.Assert.assertEquals(\"name node https address not correct.\", nnhttps[i], configurationBuilder.conf.get(java.lang.String.format(org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));\n}"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SinkConnectionFactoryTest.java": {
    "testGetDatabaseUrl": [
      {
        "has_assertions": true,
        "assertion_lines": [
          49
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetDatabaseUrl[]",
        "body": "@org.junit.Test\npublic void testGetDatabaseUrl() throws java.lang.Exception {\n    org.apache.ambari.scom.SinkConnectionFactory factory \u003d org.apache.ambari.scom.SinkConnectionFactoryTest.getFactory(\"myURL\", \"myDriver\");\n    org.junit.Assert.assertEquals(\"myURL\", factory.getDatabaseUrl());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"myURL\", factory.getDatabaseUrl())"
      }
    ],
    "testGetDatabaseDriver": [
      {
        "has_assertions": true,
        "assertion_lines": [
          55
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetDatabaseDriver[]",
        "body": "@org.junit.Test\npublic void testGetDatabaseDriver() throws java.lang.Exception {\n    org.apache.ambari.scom.SinkConnectionFactory factory \u003d org.apache.ambari.scom.SinkConnectionFactoryTest.getFactory(\"myURL\", \"myDriver\");\n    org.junit.Assert.assertEquals(\"myDriver\", factory.getDatabaseDriver());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(\"myDriver\", factory.getDatabaseDriver())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ServiceProviderTest.java": {
    "testGetResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          44
        ],
        "commit": "27821a2677692a889b50603f4f66adc7e5ff1434",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(7, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(7, resources.size())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          44
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 1,
        "method_signature": "testGetResources[]",
        "body": "@org.junit.Test\npublic void testGetResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);\n    junit.framework.Assert.assertEquals(8, resources.size());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(8, resources.size())"
      }
    ],
    "testGetResourcesWithPredicate": [
      {
        "has_assertions": true,
        "assertion_lines": [
          53,
          58,
          62
        ],
        "commit": "27821a2677692a889b50603f4f66adc7e5ff1434",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"HDFS\").or().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"FLUME\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(2, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"NO SERVICE\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertTrue(resources.isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(2, resources.size()), junit.framework.Assert.assertTrue(resources.isEmpty())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          53,
          58,
          62
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testGetResourcesWithPredicate[]",
        "body": "@org.junit.Test\npublic void testGetResourcesWithPredicate() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"HDFS\").or().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"FLUME\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(2, resources.size());\n    predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"NO SERVICE\").toPredicate();\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertTrue(resources.isEmpty());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(2, resources.size()), junit.framework.Assert.assertTrue(resources.isEmpty())"
      }
    ],
    "testGetResourcesCheckState": [
      {
        "has_assertions": true,
        "assertion_lines": [
          72,
          76,
          81,
          84
        ],
        "commit": "27821a2677692a889b50603f4f66adc7e5ff1434",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckState[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckState() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    org.apache.ambari.server.controller.spi.Resource resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));\n    stateProvider.setHealthy(false);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID)), junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          72,
          76,
          81,
          84
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckState[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckState() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    org.apache.ambari.server.controller.spi.Resource resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));\n    stateProvider.setHealthy(false);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID)), junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID))"
      }
    ],
    "testGetResourcesCheckStateFromCategory": [
      {
        "has_assertions": true,
        "assertion_lines": [
          94,
          98,
          103,
          106
        ],
        "commit": "27821a2677692a889b50603f4f66adc7e5ff1434",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckStateFromCategory[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckStateFromCategory() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(\"ServiceInfo\"), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    org.apache.ambari.server.controller.spi.Resource resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));\n    stateProvider.setHealthy(false);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID)), junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID))"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          94,
          98,
          103,
          106
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetResourcesCheckStateFromCategory[]",
        "body": "@org.junit.Test\npublic void testGetResourcesCheckStateFromCategory() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.Set\u003corg.apache.ambari.server.controller.spi.Resource\u003e resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(\"ServiceInfo\"), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    org.apache.ambari.server.controller.spi.Resource resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));\n    stateProvider.setHealthy(false);\n    resources \u003d provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);\n    junit.framework.Assert.assertEquals(1, resources.size());\n    resource \u003d resources.iterator().next();\n    junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(1, resources.size()), junit.framework.Assert.assertEquals(\"STARTED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID)), junit.framework.Assert.assertEquals(\"INSTALLED\", resource.getPropertyValue(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID))"
      }
    ],
    "testCreateResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          114
        ],
        "commit": "27821a2677692a889b50603f4f66adc7e5ff1434",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [
          114
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testCreateResources[]",
        "body": "@org.junit.Test\npublic void testCreateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    try {\n        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testUpdateResources": [
      {
        "has_assertions": true,
        "assertion_lines": [
          137,
          145,
          153
        ],
        "commit": "27821a2677692a889b50603f4f66adc7e5ff1434",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    properties.put(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, \"STARTED\");\n    org.apache.ambari.server.controller.spi.Request updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n    properties.put(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, \"INSTALLED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState());\n    properties.put(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, \"STARTED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState()), junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState())"
      },
      {
        "has_assertions": true,
        "assertion_lines": [
          137,
          145,
          153
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 3,
        "method_signature": "testUpdateResources[]",
        "body": "@org.junit.Test\npublic void testUpdateResources() throws java.lang.Exception {\n    org.apache.ambari.msi.TestStateProvider stateProvider \u003d new org.apache.ambari.msi.TestStateProvider();\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    org.apache.ambari.server.controller.spi.Predicate predicate \u003d new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"MAPREDUCE\").toPredicate();\n    java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e properties \u003d new java.util.HashMap\u003cjava.lang.String, java.lang.Object\u003e();\n    properties.put(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, \"STARTED\");\n    org.apache.ambari.server.controller.spi.Request updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n    properties.put(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, \"INSTALLED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState());\n    properties.put(ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, \"STARTED\");\n    updateRequest \u003d org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);\n    provider.updateResources(updateRequest, predicate);\n    junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState());\n}",
        "assertion_type": "junit.framework.Assert.assertEquals(StateProvider.State.Running, stateProvider.getState()), junit.framework.Assert.assertEquals(StateProvider.State.Stopped, stateProvider.getState())"
      }
    ],
    "testDeleteResources": [
      {
        "has_assertions": false,
        "assertion_lines": [
          161
        ],
        "commit": "27821a2677692a889b50603f4f66adc7e5ff1434",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [
          161
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testDeleteResources[]",
        "body": "@org.junit.Test\npublic void testDeleteResources() throws java.lang.Exception {\n    org.apache.ambari.msi.ClusterDefinition clusterDefinition \u003d new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());\n    org.apache.ambari.msi.ServiceProvider provider \u003d new org.apache.ambari.msi.ServiceProvider(clusterDefinition);\n    try {\n        provider.deleteResources(null);\n        junit.framework.Assert.fail(\"Expected UnsupportedOperationException.\");\n    } catch (java.lang.UnsupportedOperationException e) {\n        // expected\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/logging/JpaLoggerTest.java": {
    "testLog": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testLog[]",
        "body": "@org.junit.Test\npublic void testLog() throws java.lang.Exception {\n    org.slf4j.Logger logger \u003d org.easymock.EasyMock.createNiceMock(org.slf4j.Logger.class);\n    org.eclipse.persistence.logging.SessionLogEntry severeEntry \u003d org.easymock.EasyMock.createNiceMock(org.eclipse.persistence.logging.SessionLogEntry.class);\n    org.eclipse.persistence.logging.SessionLogEntry configEntry \u003d org.easymock.EasyMock.createNiceMock(org.eclipse.persistence.logging.SessionLogEntry.class);\n    org.eclipse.persistence.logging.SessionLogEntry finestEntry \u003d org.easymock.EasyMock.createNiceMock(org.eclipse.persistence.logging.SessionLogEntry.class);\n    java.util.logging.Formatter formatter \u003d org.easymock.EasyMock.createNiceMock(java.util.logging.Formatter.class);\n    org.apache.ambari.scom.logging.JpaLogger jpaLogger \u003d new org.apache.ambari.scom.logging.JpaLoggerTest.TestJpaLogger(logger, formatter);\n    // set expectations\n    org.easymock.EasyMock.expect(severeEntry.getLevel()).andReturn(org.eclipse.persistence.logging.SessionLog.SEVERE);\n    org.easymock.EasyMock.expect(formatter.format(((java.util.logging.LogRecord) (org.easymock.EasyMock.anyObject())))).andReturn(\"severe log message\");\n    logger.error(\"severe log message\");\n    org.easymock.EasyMock.expect(configEntry.getLevel()).andReturn(org.eclipse.persistence.logging.SessionLog.CONFIG);\n    org.easymock.EasyMock.expect(formatter.format(((java.util.logging.LogRecord) (org.easymock.EasyMock.anyObject())))).andReturn(\"config log message\");\n    logger.info(\"config log message\");\n    org.easymock.EasyMock.expect(finestEntry.getLevel()).andReturn(org.eclipse.persistence.logging.SessionLog.FINEST);\n    org.easymock.EasyMock.expect(formatter.format(((java.util.logging.LogRecord) (org.easymock.EasyMock.anyObject())))).andReturn(\"finest log message\");\n    logger.debug(\"finest log message\");\n    // replay\n    org.easymock.EasyMock.replay(logger, severeEntry, configEntry, finestEntry, formatter);\n    jpaLogger.log(severeEntry);\n    jpaLogger.log(configEntry);\n    jpaLogger.log(finestEntry);\n    // verify\n    org.easymock.EasyMock.verify(logger, severeEntry, configEntry, finestEntry, formatter);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testThrowing": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "testThrowing[]",
        "body": "@org.junit.Test\npublic void testThrowing() throws java.lang.Exception {\n    org.slf4j.Logger logger \u003d org.easymock.EasyMock.createNiceMock(org.slf4j.Logger.class);\n    java.util.logging.Formatter formatter \u003d org.easymock.EasyMock.createNiceMock(java.util.logging.Formatter.class);\n    java.lang.Exception exception \u003d new java.lang.IllegalStateException(\"Something went wrong!\");\n    org.apache.ambari.scom.logging.JpaLogger jpaLogger \u003d new org.apache.ambari.scom.logging.JpaLoggerTest.TestJpaLogger(logger, formatter);\n    // set expectations\n    logger.error(null, exception);\n    // replay\n    org.easymock.EasyMock.replay(logger, formatter);\n    jpaLogger.throwing(exception);\n    // verify\n    org.easymock.EasyMock.verify(logger, formatter);\n}",
        "assertion_type": "No Assertions"
      }
    ],
    "testShouldLog": [
      {
        "has_assertions": true,
        "assertion_lines": [
          101,
          102,
          103,
          104,
          105,
          108,
          109,
          110,
          111,
          112,
          115,
          116,
          117,
          118,
          119
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 15,
        "method_signature": "testShouldLog[]",
        "body": "@org.junit.Test\npublic void testShouldLog() throws java.lang.Exception {\n    org.apache.ambari.scom.logging.JpaLogger logger \u003d new org.apache.ambari.scom.logging.JpaLogger();\n    org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.SEVERE, \"\"));\n    org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.WARNING, \"\"));\n    org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.CONFIG, \"\"));\n    org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.FINER, \"\"));\n    org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.ALL, \"\"));\n    logger.setLogLevel(java.util.logging.Level.FINER);\n    org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.SEVERE, \"\"));\n    org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.WARNING, \"\"));\n    org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.CONFIG, \"\"));\n    org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.FINER, \"\"));\n    org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.ALL, \"\"));\n    logger.setLogLevel(java.util.logging.Level.SEVERE);\n    org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.SEVERE, \"\"));\n    org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.WARNING, \"\"));\n    org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.CONFIG, \"\"));\n    org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.FINER, \"\"));\n    org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.ALL, \"\"));\n}",
        "assertion_type": "org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.SEVERE, \"\")), org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.WARNING, \"\")), org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.CONFIG, \"\")), org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.FINER, \"\")), org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.ALL, \"\")), org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.CONFIG, \"\")), org.junit.Assert.assertTrue(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.FINER, \"\")), org.junit.Assert.assertFalse(logger.shouldLog(org.eclipse.persistence.logging.SessionLog.WARNING, \"\"))"
      }
    ],
    "testGetSetLogLevel": [
      {
        "has_assertions": true,
        "assertion_lines": [
          125,
          128,
          131,
          134
        ],
        "commit": "873b3502bec3344ff8b03a7a1ffd2240f9de13b4",
        "annotations": "@org.junit.Test",
        "assertion_amount": 4,
        "method_signature": "testGetSetLogLevel[]",
        "body": "@org.junit.Test\npublic void testGetSetLogLevel() throws java.lang.Exception {\n    org.apache.ambari.scom.logging.JpaLogger logger \u003d new org.apache.ambari.scom.logging.JpaLogger();\n    org.junit.Assert.assertEquals(java.util.logging.Level.WARNING, logger.getLogLevel());\n    logger.setLogLevel(java.util.logging.Level.ALL);\n    org.junit.Assert.assertEquals(java.util.logging.Level.ALL, logger.getLogLevel());\n    logger.setLogLevel(java.util.logging.Level.FINER);\n    org.junit.Assert.assertEquals(java.util.logging.Level.FINER, logger.getLogLevel());\n    logger.setLogLevel(java.util.logging.Level.OFF);\n    org.junit.Assert.assertEquals(java.util.logging.Level.OFF, logger.getLogLevel());\n}",
        "assertion_type": "org.junit.Assert.assertEquals(java.util.logging.Level.WARNING, logger.getLogLevel()), org.junit.Assert.assertEquals(java.util.logging.Level.ALL, logger.getLogLevel()), org.junit.Assert.assertEquals(java.util.logging.Level.FINER, logger.getLogLevel()), org.junit.Assert.assertEquals(java.util.logging.Level.OFF, logger.getLogLevel())"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/ambari-utility/src/test/java/org/apache/ambari/checkstyle/UndocumentedRestApiOperationCheckTest.java": {
    "test": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "60248d232b99ca5981d1d99464658b9eee246588",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "test[]",
        "body": "@org.junit.Test\n@org.junit.Ignore(\"Fix later: NoSuchField: WHITESPACE error exception\")\npublic void test() throws java.lang.Exception {\n    final com.puppycrawl.tools.checkstyle.DefaultConfiguration config \u003d createModuleConfig(org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.class);\n    final java.lang.String[] expected \u003d new java.lang.String[]{ \"36: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"53: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"70: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"87: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"104: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"121: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE };\n    verify(config, getPath(\"InputRestApiOperation.java\"), expected);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "ef774a4f8c283040bcdbcdd5570a9155deef3997",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "test[]",
        "body": "@org.junit.Test\npublic void test() throws java.lang.Exception {\n    final com.puppycrawl.tools.checkstyle.DefaultConfiguration config \u003d createModuleConfig(org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.class);\n    final java.lang.String[] expected \u003d new java.lang.String[]{ \"36: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"53: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"70: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"87: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"104: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"121: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE };\n    verify(config, getPath(\"InputRestApiOperation.java\"), expected);\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "1fbb933ef91d5a1ccf704e8d043c0ab0f6c30df7",
        "annotations": "@org.junit.Test",
        "assertion_amount": 0,
        "method_signature": "test[]",
        "body": "@org.junit.Test\npublic void test() throws java.lang.Exception {\n    final com.puppycrawl.tools.checkstyle.DefaultConfiguration config \u003d createCheckConfig(org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.class);\n    final java.lang.String[] expected \u003d new java.lang.String[]{ \"36: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"53: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"70: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"87: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"104: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, \"121: \" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE };\n    verify(config, getPath(\"InputRestApiOperation.java\"), expected);\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/InstanceKeyValueStorage.java": {
    "storageSmokeTest": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "82e72e517f3b86db25d2026b53b77c5c72fa8eab",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "storageSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "public static void storageSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        final java.lang.String property \u003d \"test.smoke.property\";\n        context.putInstanceData(property, \"42\");\n        boolean status \u003d context.getInstanceData(property).equals(\"42\");\n        context.removeInstanceData(property);\n        if (!status) {\n            throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(\"Ambari Views instance data DB doesn\u0027t work properly\", null);\n        }\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "fbd5235e27e1b95318c21d6222eb7f31e5d16a6e",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "storageSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "public static void storageSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        final java.lang.String property \u003d \"test.smoke.property\";\n        context.putInstanceData(property, \"42\");\n        boolean status \u003d context.getInstanceData(property).equals(\"42\");\n        context.removeInstanceData(property);\n        if (!status) {\n            throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(\"Ambari Views instance data DB doesn\u0027t work properly\", null);\n        }\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.pig.utils.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  },
  "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/ambari/contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/HdfsService.java": {
    "hdfsSmokeTest": [
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "9cdd3e8a15f4aa6d1dd7b485ce6d530b06f0f7de",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "hdfsSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to HDFS\n *\n * @param context\n * \t\tView Context\n */\npublic static void hdfsSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.utils.hdfs.HdfsApi api \u003d org.apache.ambari.view.utils.hdfs.HdfsUtil.connectToHDFSApi(context);\n        api.getStatus();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.commons.exceptions.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      },
      {
        "has_assertions": false,
        "assertion_lines": [],
        "commit": "827fb206976c0ee68d8cfa6c1b3fdfca5e20a093",
        "annotations": "No Annotations",
        "assertion_amount": 0,
        "method_signature": "hdfsSmokeTest[org.apache.ambari.view.ViewContext context]",
        "body": "/**\n * Checks connection to HDFS\n *\n * @param context\n * \t\tView Context\n */\npublic static void hdfsSmokeTest(org.apache.ambari.view.ViewContext context) {\n    try {\n        org.apache.ambari.view.utils.hdfs.HdfsApi api \u003d org.apache.ambari.view.utils.hdfs.HdfsUtil.connectToHDFSApi(context);\n        api.getStatus();\n    } catch (javax.ws.rs.WebApplicationException ex) {\n        throw ex;\n    } catch (java.lang.Exception ex) {\n        throw new org.apache.ambari.view.commons.exceptions.ServiceFormattedException(ex.getMessage(), ex);\n    }\n}",
        "assertion_type": "No Assertions"
      }
    ]
  }
}
