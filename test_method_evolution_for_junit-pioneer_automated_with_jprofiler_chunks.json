[
  {
    "chunkId": "verifyInitialState_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreEnvironmentVariablesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        69.0,
        70.0,
        71.0,
        73.0,
        74.0,
        75.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        101.0,
        102.0,
        103.0,
        105.0,
        106.0,
        107.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreEnvironmentVariablesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        101.0,
        102.0,
        103.0,
        105.0,
        106.0,
        107.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        69.0,
        70.0,
        71.0,
        73.0,
        74.0,
        75.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreEnvironmentVariablesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        69.0,
        70.0,
        71.0,
        73.0,
        74.0,
        75.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        101.0,
        102.0,
        103.0,
        105.0,
        106.0,
        107.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreEnvironmentVariablesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        101.0,
        102.0,
        103.0,
        105.0,
        106.0,
        107.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        69.0,
        70.0,
        71.0,
        73.0,
        74.0,
        75.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreEnvironmentVariablesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        69.0,
        70.0,
        71.0,
        73.0,
        74.0,
        75.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        101.0,
        102.0,
        103.0,
        105.0,
        106.0,
        107.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and setenv\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\");\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"A\")).isEqualTo(\"all envar A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"B\")).isEqualTo(\"all envar B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"C\")).isEqualTo(\"all envar C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"N\")).isEqualTo(\"each envar N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"O\")).isEqualTo(\"each envar O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M Nest\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv(\"M\")).isEqualTo(\"each envar M\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "deletingNonExistentFileProducesNoIOException_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/PathDeleterTests.java",
    "methodName": "deletingNonExistentFileProducesNoIOException",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        42.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "deletingNonExistentFileProducesNoIOException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid deletingNonExistentFileProducesNoIOException() throws java.io.IOException {\n    try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) {\n        org.assertj.core.api.Assertions.assertThatCode(() -\u003e PathDeleter.INSTANCE.visitFile(fileSystem.getPath(\"some\", \"arbitrary\", \"file.txt\"), null)).doesNotThrowAnyException();\n    }\n}",
      "assertion_type": "try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) {\n    org.assertj.core.api.Assertions.assertThatCode(() -\u003e PathDeleter.INSTANCE.visitFile(fileSystem.getPath(\"some\", \"arbitrary\", \"file.txt\"), null)).doesNotThrowAnyException();\n}"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        42.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "deletingNonExistentFileProducesNoIOException",
        "methodNameAfter": "deletingNonExistentFileProducesNoIOException",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) { org.junit.jupiter.api.Assertions.assertDoesNotThrow(() -\u003e PathDeleter.INSTANCE.visitFile(fileSystem.getPath(\"some\", \"arbitrary\", \"file.txt\"), null)); }",
          "Removed: try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) { org.assertj.core.api.Assertions.assertThatCode(() -\u003e PathDeleter.INSTANCE.visitFile(fileSystem.getPath(\"some\", \"arbitrary\", \"file.txt\"), null)).doesNotThrowAnyException(); }"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "deletingNonExistentFileProducesNoIOException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid deletingNonExistentFileProducesNoIOException() throws java.io.IOException {\n    try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) {\n        org.junit.jupiter.api.Assertions.assertDoesNotThrow(() -\u003e PathDeleter.INSTANCE.visitFile(fileSystem.getPath(\"some\", \"arbitrary\", \"file.txt\"), null));\n    }\n}",
      "assertion_type": "try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) {\n    org.junit.jupiter.api.Assertions.assertDoesNotThrow(() -\u003e PathDeleter.INSTANCE.visitFile(fileSystem.getPath(\"some\", \"arbitrary\", \"file.txt\"), null));\n}"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "deletingNonExistentFileProducesNoIOException",
      "methodNameAfter": "deletingNonExistentFileProducesNoIOException",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) { org.junit.jupiter.api.Assertions.assertDoesNotThrow(() -\u003e PathDeleter.INSTANCE.visitFile(fileSystem.getPath(\"some\", \"arbitrary\", \"file.txt\"), null)); }",
        "Removed: try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) { org.assertj.core.api.Assertions.assertThatCode(() -\u003e PathDeleter.INSTANCE.visitFile(fileSystem.getPath(\"some\", \"arbitrary\", \"file.txt\"), null)).doesNotThrowAnyException(); }"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "deletingNonExistentDirectoryProducesNoIOException_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/PathDeleterTests.java",
    "methodName": "deletingNonExistentDirectoryProducesNoIOException",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "deletingNonExistentDirectoryProducesNoIOException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid deletingNonExistentDirectoryProducesNoIOException() throws java.io.IOException {\n    try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) {\n        org.assertj.core.api.Assertions.assertThatCode(() -\u003e PathDeleter.INSTANCE.postVisitDirectory(fileSystem.getPath(\"some\", \"arbitrary\", \"directory\"), null)).doesNotThrowAnyException();\n    }\n}",
      "assertion_type": "try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) {\n    org.assertj.core.api.Assertions.assertThatCode(() -\u003e PathDeleter.INSTANCE.postVisitDirectory(fileSystem.getPath(\"some\", \"arbitrary\", \"directory\"), null)).doesNotThrowAnyException();\n}"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        77.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "deletingNonExistentDirectoryProducesNoIOException",
        "methodNameAfter": "deletingNonExistentDirectoryProducesNoIOException",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) { org.junit.jupiter.api.Assertions.assertDoesNotThrow(() -\u003e PathDeleter.INSTANCE.postVisitDirectory(fileSystem.getPath(\"some\", \"arbitrary\", \"directory\"), null)); }",
          "Removed: try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) { org.assertj.core.api.Assertions.assertThatCode(() -\u003e PathDeleter.INSTANCE.postVisitDirectory(fileSystem.getPath(\"some\", \"arbitrary\", \"directory\"), null)).doesNotThrowAnyException(); }"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "deletingNonExistentDirectoryProducesNoIOException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid deletingNonExistentDirectoryProducesNoIOException() throws java.io.IOException {\n    try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) {\n        org.junit.jupiter.api.Assertions.assertDoesNotThrow(() -\u003e PathDeleter.INSTANCE.postVisitDirectory(fileSystem.getPath(\"some\", \"arbitrary\", \"directory\"), null));\n    }\n}",
      "assertion_type": "try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) {\n    org.junit.jupiter.api.Assertions.assertDoesNotThrow(() -\u003e PathDeleter.INSTANCE.postVisitDirectory(fileSystem.getPath(\"some\", \"arbitrary\", \"directory\"), null));\n}"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "deletingNonExistentDirectoryProducesNoIOException",
      "methodNameAfter": "deletingNonExistentDirectoryProducesNoIOException",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) { org.junit.jupiter.api.Assertions.assertDoesNotThrow(() -\u003e PathDeleter.INSTANCE.postVisitDirectory(fileSystem.getPath(\"some\", \"arbitrary\", \"directory\"), null)); }",
        "Removed: try (java.nio.file.FileSystem fileSystem \u003d com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix())) { org.assertj.core.api.Assertions.assertThatCode(() -\u003e PathDeleter.INSTANCE.postVisitDirectory(fileSystem.getPath(\"some\", \"arbitrary\", \"directory\"), null)).doesNotThrowAnyException(); }"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreSystemPropertiesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        110.0,
        111.0,
        112.0,
        114.0,
        115.0,
        116.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");// Shouldn\u0027t be visible in next test\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0,
        144.0,
        146.0,
        147.0,
        148.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreSystemPropertiesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0,
        144.0,
        146.0,
        147.0,
        148.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        110.0,
        111.0,
        112.0,
        114.0,
        115.0,
        116.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");// Shouldn\u0027t be visible in next test\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreSystemPropertiesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        110.0,
        111.0,
        112.0,
        114.0,
        115.0,
        116.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");// Shouldn\u0027t be visible in next test\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0,
        144.0,
        146.0,
        147.0,
        148.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreSystemPropertiesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0,
        144.0,
        146.0,
        147.0,
        148.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        110.0,
        111.0,
        112.0,
        114.0,
        115.0,
        116.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");// Shouldn\u0027t be visible in next test\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "verifyInitialState_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RestoreSystemPropertiesTests.java",
    "methodName": "verifyInitialState",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        110.0,
        111.0,
        112.0,
        114.0,
        115.0,
        116.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"verify initial state from BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");// Shouldn\u0027t be visible in next test\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0,
        144.0,
        146.0,
        147.0,
        148.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "verifyInitialState",
        "methodNameAfter": "verifyInitialState",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "verifyInitialState[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"initial state from nested BeforeAll \u0026 BeforeEach and set prop\")\nvoid verifyInitialState() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\");\n    java.lang.System.setProperty(\"X\", \"method X\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"all sys A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"all sys B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"all sys C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"N\")).isEqualTo(\"each sys N\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"O\")).isEqualTo(\"each sys O\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "verifyInitialState",
      "methodNameAfter": "verifyInitialState",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M Nest\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"M\")).isEqualTo(\"each sys M\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test1",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test1\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test1",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test1\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test1[@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test1(@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test1",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test1(@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test1",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test1\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test1",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test1\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test1[@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test1(@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test1",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test1(@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test1",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test1\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test1",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test1(// we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test1\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test1[@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test1(@java.lang.SuppressWarnings(\"unused\")\nint iteration, // we don\u0027t actually use the resources, we just have them injected to verify whether sharing the\n// same resources prevent the tests from running in parallel\n@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test1Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test2\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test2\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test2",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test2\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test2",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test2\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test2",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test2",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test2\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test2",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test2(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test2\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test2[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test2(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_B_NAME)\njava.nio.file.Path directoryB, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test2Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test3",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test3\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test3",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test3\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test3",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test3",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test3\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test3",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test3\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_8c2aa67ead5aaa6159e66835142bb95f0c1370bc_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test3",
    "beforeCommit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8c2aa67ead5aaa6159e66835142bb95f0c1370bc",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test3",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test3\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesParallelismTests.java",
    "methodName": "test3",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.TestFactory",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.TestFactory\njava.util.stream.Stream\u003corg.junit.jupiter.api.DynamicTest\u003e test3(@java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3\");\n    return org.junit.jupiter.api.DynamicTest.stream(java.util.stream.Stream.of(\"DynamicTest1\", \"DynamicTest2\", \"DynamicTest3\"), name -\u003e \"test3\" + name, org.junitpioneer.jupiter.resource.ResourcesParallelismTests::failIfExecutedInParallel);\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.params.ParameterizedTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "signature modified, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 3",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test3[@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3 })\nvoid test3(@java.lang.SuppressWarnings(\"unused\")\nint iteration, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_C_NAME)\njava.nio.file.Path directoryC, @java.lang.SuppressWarnings(\"unused\")\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d org.junitpioneer.jupiter.resource.ResourcesParallelismTests.SHARED_RESOURCE_A_NAME)\njava.nio.file.Path directoryA) throws java.lang.Exception {\n    org.junitpioneer.jupiter.resource.ResourcesParallelismTests.failIfExecutedInParallel(\"test3Iteration\" + iteration);\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "signature modified, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 3",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        64.0,
        65.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        94.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "5 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "5 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        94.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        257.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        257.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        287.0,
        288.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "5 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "5 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        287.0,
        288.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        325.0,
        326.0,
        327.0,
        328.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 4"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 3 to 6"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(firstTempDir);\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(secondTempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 3 to 6"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 11,
      "assertion_change_types": [
        "Assertion count changed from 2 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        325.0,
        326.0,
        327.0,
        328.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(firstTempDir);\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(secondTempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        413.0,
        414.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 4 to 2"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 1",
          "Statement count changed from 6 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 1",
        "Statement count changed from 6 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 11,
      "assertion_change_types": [
        "Assertion count changed from 4 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        413.0,
        414.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        427.0,
        428.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        427.0,
        428.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 0",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 0"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 0",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 0",
        "Removed",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        64.0,
        65.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 0 to 2",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        64.0,
        65.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        94.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "5 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "5 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        94.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir) {\n    org.junit.jupiter.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir) {\n    org.junit.jupiter.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        287.0,
        288.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 0 to 2",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        287.0,
        288.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        325.0,
        326.0,
        327.0,
        328.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 4"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 3 to 6"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(firstTempDir);\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(secondTempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 3 to 6"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 11,
      "assertion_change_types": [
        "Assertion count changed from 2 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        325.0,
        326.0,
        327.0,
        328.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(firstTempDir);\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(secondTempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        413.0,
        414.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 4 to 2"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 1",
          "Statement count changed from 6 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 1",
        "Statement count changed from 6 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 11,
      "assertion_change_types": [
        "Assertion count changed from 4 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        413.0,
        414.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        427.0,
        428.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        427.0,
        428.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 0",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 0"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 0",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 0",
        "Removed",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        64.0,
        65.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 0 to 2",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        64.0,
        65.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        94.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "5 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "5 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithNewTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        94.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"tempDirPrefix\" })\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir) {\n    org.junit.jupiter.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR.relativize(tempDir)).asString().startsWith(\"tempDirPrefix\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d { \"1\", \"2\" })\njava.nio.file.Path tempDir) {\n    org.junit.jupiter.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        287.0,
        288.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 0 to 2",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        287.0,
        288.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        325.0,
        326.0,
        327.0,
        328.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 4"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 3 to 6"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(firstTempDir);\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(secondTempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSharedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 3 to 6"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 11,
      "assertion_change_types": [
        "Assertion count changed from 2 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        325.0,
        326.0,
        327.0,
        328.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"first-name\")\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"second-name\")\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(firstTempDir);\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoDifferentSharedTempDirParametersTestCases.recordedPaths.add(secondTempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        413.0,
        414.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 4 to 2"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 1",
          "Statement count changed from 6 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "signature modified, 8 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 1",
        "Statement count changed from 6 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 11,
      "assertion_change_types": [
        "Assertion count changed from 4 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        413.0,
        414.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        427.0,
        428.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        427.0,
        428.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.GLOBAL)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 0",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 0"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 0",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 0",
        "Removed",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForImplicit"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPathForExplicit"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "theTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "theTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "theTest",
        "methodNameAfter": "theTest",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
          "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "theTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid theTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\", scope \u003d org.junitpioneer.jupiter.resource.Shared.Scope.SOURCE_FILE)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath \u003d tempDir;\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "theTest",
      "methodNameAfter": "theTest",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath",
        "Removed usage: org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTopLevelTestMethodWithSourceFileScopedTempDirParameterTestCases.recordedPath"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        111.0,
        112.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        153.0,
        154.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
          "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
          "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
        "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
        "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        153.0,
        154.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        111.0,
        112.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
          "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
          "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
        "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
        "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        111.0,
        112.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        153.0,
        154.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
          "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
          "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
        "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
        "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        153.0,
        154.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        111.0,
        112.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
          "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
          "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
        "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
        "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        111.0,
        112.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        153.0,
        154.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
          "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
          "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with new readable and writeable \" + \"temporary directories that are torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithNewReadableAndWriteableTempDirsThatAreTornDownAfterwards",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasSingleSucceededTest()",
        "Added: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2)",
        "Removed: org.assertj.core.api.Assertions.assertThat(TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases).hasSize(2).doesNotHaveDuplicates().allSatisfy(path -\u003e assertThat(path).doesNotExist())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        170.0,
        171.0,
        172.0,
        173.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 7 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 4"
        ],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 2 to 5"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths.addAll(java.util.Arrays.asList(firstTempDir, secondTempDir));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 7 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 4"
      ],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 2 to 5"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 9,
      "assertion_change_types": [
        "Assertion count changed from 1 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        170.0,
        171.0,
        172.0,
        173.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths.addAll(java.util.Arrays.asList(firstTempDir, secondTempDir));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        215.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 7 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 4 to 1"
        ],
        "importChanges": [
          "Removed usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 0",
          "Statement count changed from 5 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 7 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 4 to 1"
      ],
      "importChanges": [
        "Removed usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 0",
        "Statement count changed from 5 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 10,
      "assertion_change_types": [
        "Assertion count changed from 4 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        215.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        366.0,
        367.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [
          "New usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 0 to 1",
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [
        "New usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 0 to 1",
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        366.0,
        367.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        170.0,
        171.0,
        172.0,
        173.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 7 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 4"
        ],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 2 to 5"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths.addAll(java.util.Arrays.asList(firstTempDir, secondTempDir));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 7 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 4"
      ],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 2 to 5"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 9,
      "assertion_change_types": [
        "Assertion count changed from 1 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        170.0,
        171.0,
        172.0,
        173.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths.addAll(java.util.Arrays.asList(firstTempDir, secondTempDir));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        215.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 7 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 4 to 1"
        ],
        "importChanges": [
          "Removed usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 0",
          "Statement count changed from 5 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 7 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 4 to 1"
      ],
      "importChanges": [
        "Removed usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 0",
        "Statement count changed from 5 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 10,
      "assertion_change_types": [
        "Assertion count changed from 4 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        215.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        366.0,
        367.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [
          "New usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 0 to 1",
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [
        "New usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 0 to 1",
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        366.0,
        367.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        170.0,
        171.0,
        172.0,
        173.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 7 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 4"
        ],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 2 to 5"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths.addAll(java.util.Arrays.asList(firstTempDir, secondTempDir));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 7 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 4"
      ],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 2 to 5"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 9,
      "assertion_change_types": [
        "Assertion count changed from 1 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        170.0,
        171.0,
        172.0,
        173.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path firstTempDir, @org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path secondTempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SingleTestMethodWithTwoNewTempDirParametersTestCases.recordedPaths.addAll(java.util.Arrays.asList(firstTempDir, secondTempDir));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        215.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 7 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 4 to 1"
        ],
        "importChanges": [
          "Removed usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 0",
          "Statement count changed from 5 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 7 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(firstTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(secondTempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 4 to 1"
      ],
      "importChanges": [
        "Removed usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 0",
        "Statement count changed from 5 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 10,
      "assertion_change_types": [
        "Assertion count changed from 4 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "firstTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "firstTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        215.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "firstTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        366.0,
        367.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "firstTest",
        "methodNameAfter": "firstTest",
        "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [
          "New usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 0 to 1",
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "firstTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid firstTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "firstTest",
      "methodNameAfter": "firstTest",
      "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [
        "New usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 0 to 1",
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "secondTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "secondTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        134.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        220.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "secondTest",
        "methodNameAfter": "secondTest",
        "diffSummary": "signature modified, 2 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
        ],
        "importChanges": [
          "Removed usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 0",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "secondTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "secondTest",
      "methodNameAfter": "secondTest",
      "diffSummary": "signature modified, 2 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
      ],
      "importChanges": [
        "Removed usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 0",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "secondTest_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "secondTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        220.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "secondTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        375.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "secondTest",
        "methodNameAfter": "secondTest",
        "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [
          "New usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 0 to 1",
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "secondTest",
      "methodNameAfter": "secondTest",
      "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [
        "New usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 0 to 1",
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "secondTest_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "secondTest",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        375.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        134.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "secondTest",
        "methodNameAfter": "secondTest",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "secondTest",
      "methodNameAfter": "secondTest",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "secondTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "secondTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        134.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        220.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "secondTest",
        "methodNameAfter": "secondTest",
        "diffSummary": "signature modified, 2 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
        ],
        "importChanges": [
          "Removed usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 0",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "secondTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "secondTest",
      "methodNameAfter": "secondTest",
      "diffSummary": "signature modified, 2 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
      ],
      "importChanges": [
        "Removed usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 0",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "secondTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "secondTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        220.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "secondTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        375.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "secondTest",
        "methodNameAfter": "secondTest",
        "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [
          "New usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 0 to 1",
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "secondTest",
      "methodNameAfter": "secondTest",
      "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [
        "New usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 0 to 1",
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "secondTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "secondTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        375.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        134.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "secondTest",
        "methodNameAfter": "secondTest",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "secondTest",
      "methodNameAfter": "secondTest",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "secondTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "secondTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        134.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithNewTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        220.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "secondTest",
        "methodNameAfter": "secondTest",
        "diffSummary": "signature modified, 2 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
        ],
        "importChanges": [
          "Removed usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 0",
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "secondTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "secondTest",
      "methodNameAfter": "secondTest",
      "diffSummary": "signature modified, 2 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
      ],
      "importChanges": [
        "Removed usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 0",
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "secondTest_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "secondTest",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        220.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "secondTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest() {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        375.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "secondTest",
        "methodNameAfter": "secondTest",
        "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [
          "New usage: java.nio.file.Path"
        ],
        "logicChanges": [
          "Parameter count changed from 0 to 1",
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "secondTest[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid secondTest(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"some-name\")\njava.nio.file.Path tempDir) {\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile();\n    org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths.add(tempDir);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "secondTest",
      "methodNameAfter": "secondTest",
      "diffSummary": "signature modified, 5 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(tempDir).canReadAndWriteFile()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(recordedPath).isEmptyDirectory().startsWith(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.ROOT_TEMP_DIR).isReadable().isWritable()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [
        "New usage: java.nio.file.Path"
      ],
      "logicChanges": [
        "Parameter count changed from 0 to 1",
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        349.0,
        351.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    java.util.List\u003cjava.nio.file.Path\u003e paths \u003d org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths;\n    org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        398.0,
        399.0,
        401.0,
        402.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "diffSummary": "6 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Removed: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
          "Assertion type unknown count changed from 2 to 4"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 5"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d // \n    org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(// \n    java.util.Arrays.asList(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.class, org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.class));\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "diffSummary": "6 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Removed: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 5"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        398.0,
        399.0,
        401.0,
        402.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d // \n    org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(// \n    java.util.Arrays.asList(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.class, org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.class));\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        349.0,
        351.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "diffSummary": "6 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Assertion type unknown count changed from 4 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 5 to 4"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    java.util.List\u003cjava.nio.file.Path\u003e paths \u003d org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths;\n    org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "diffSummary": "6 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 5 to 4"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 4 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        349.0,
        351.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    java.util.List\u003cjava.nio.file.Path\u003e paths \u003d org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths;\n    org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        398.0,
        399.0,
        401.0,
        402.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "diffSummary": "6 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Removed: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
          "Assertion type unknown count changed from 2 to 4"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 5"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d // \n    org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(// \n    java.util.Arrays.asList(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.class, org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.class));\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "diffSummary": "6 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Removed: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 5"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        398.0,
        399.0,
        401.0,
        402.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d // \n    org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(// \n    java.util.Arrays.asList(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.class, org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.class));\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        349.0,
        351.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "diffSummary": "6 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Assertion type unknown count changed from 4 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 5 to 4"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    java.util.List\u003cjava.nio.file.Path\u003e paths \u003d org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths;\n    org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "diffSummary": "6 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 5 to 4"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 4 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards_7f56ffeac22eec50ddbcec51c96f56108aec8499_to_7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/TemporaryDirectoryTests.java",
    "methodName": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
    "beforeCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "afterCommit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        349.0,
        351.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    java.util.List\u003cjava.nio.file.Path\u003e paths \u003d org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.TwoTestMethodsWithSharedSameNameTempDirParameterTestCases.recordedPaths;\n    org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist());\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        398.0,
        399.0,
        401.0,
        402.0
      ],
      "commit": "7f56ffeac22eec50ddbcec51c96f56108aec8499",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
        "diffSummary": "6 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 4",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
          "Removed: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
          "Assertion type unknown count changed from 2 to 4"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 5"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the parameters are populated with a shared readable and writeable \" + \"temporary directory that is torn down afterwards\")\n@org.junit.jupiter.api.Test\nvoid thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards() {\n    org.junitpioneer.testkit.ExecutionResults executionResults \u003d // \n    org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(// \n    java.util.Arrays.asList(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.class, org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.class));\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(executionResults).hasNumberOfSucceededTests(2), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).isEqualTo(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "methodNameAfter": "thenParametersArePopulatedWithSharedReadableAndWriteableTempDirThatIsTornDownAfterwards",
      "diffSummary": "6 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 4",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases).isEqualTo(TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases)",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.FirstSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(org.junitpioneer.jupiter.resource.TemporaryDirectoryTests.SecondSingleTestMethodWithGlobalTempDirParameterTestCases.recordedPath).doesNotExist()",
        "Removed: org.assertj.core.api.Assertions.assertThat(paths).hasSize(2).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).isEqualTo(paths.get(0))).allSatisfy(path -\u003e org.assertj.core.api.Assertions.assertThat(path).doesNotExist())",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 5"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 2 to 4",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 4"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testIntChars_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/cartesian/CartesianTestExtensionDemo.java",
    "methodName": "testIntChars",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_simple_demo[]\n// tag::cartesian_annotating_parameters[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "testIntChars",
        "methodNameAfter": "testIntChars",
        "diffSummary": "signature modified, import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.time.temporal.ChronoUnit"
        ],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_annotating_parameters[]\n// tag::cartesian_combining_values[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "testIntChars",
      "methodNameAfter": "testIntChars",
      "diffSummary": "signature modified, import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.time.temporal.ChronoUnit"
      ],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testIntChars_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/cartesian/CartesianTestExtensionDemo.java",
    "methodName": "testIntChars",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_annotating_parameters[]\n// tag::cartesian_combining_values[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "testIntChars",
        "methodNameAfter": "testIntChars",
        "diffSummary": "signature modified, import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.time.temporal.ChronoUnit"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_simple_demo[]\n// tag::cartesian_annotating_parameters[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "testIntChars",
      "methodNameAfter": "testIntChars",
      "diffSummary": "signature modified, import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.time.temporal.ChronoUnit"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testIntChars_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/cartesian/CartesianTestExtensionDemo.java",
    "methodName": "testIntChars",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_simple_demo[]\n// tag::cartesian_annotating_parameters[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "testIntChars",
        "methodNameAfter": "testIntChars",
        "diffSummary": "signature modified, import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.time.temporal.ChronoUnit"
        ],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_annotating_parameters[]\n// tag::cartesian_combining_values[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "testIntChars",
      "methodNameAfter": "testIntChars",
      "diffSummary": "signature modified, import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.time.temporal.ChronoUnit"
      ],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testIntChars_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_2038be8c042499bf1b6dcd9219882249d0b9be46",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/cartesian/CartesianTestExtensionDemo.java",
    "methodName": "testIntChars",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "2038be8c042499bf1b6dcd9219882249d0b9be46",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_annotating_parameters[]\n// tag::cartesian_combining_values[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "2038be8c042499bf1b6dcd9219882249d0b9be46",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "testIntChars",
        "methodNameAfter": "testIntChars",
        "diffSummary": "signature modified, import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.time.temporal.ChronoUnit"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 3"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_simple_demo[]\n// tag::cartesian_annotating_parameters[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "testIntChars",
      "methodNameAfter": "testIntChars",
      "diffSummary": "signature modified, import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.time.temporal.ChronoUnit"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 3"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testIntChars_2038be8c042499bf1b6dcd9219882249d0b9be46_to_2038be8c042499bf1b6dcd9219882249d0b9be46",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/cartesian/CartesianTestExtensionDemo.java",
    "methodName": "testIntChars",
    "beforeCommit": "2038be8c042499bf1b6dcd9219882249d0b9be46",
    "afterCommit": "2038be8c042499bf1b6dcd9219882249d0b9be46",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "2038be8c042499bf1b6dcd9219882249d0b9be46",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_simple_demo[]\n// tag::cartesian_annotating_parameters[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.params.ShortRangeSource(from \u003d 1, to \u003d 3, step \u003d 1)\nshort s, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character, @java.lang.Enum\njava.time.temporal.ChronoUnit unit) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "2038be8c042499bf1b6dcd9219882249d0b9be46",
      "annotations": "@org.junitpioneer.jupiter.cartesian.CartesianTest",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "testIntChars",
        "methodNameAfter": "testIntChars",
        "diffSummary": "signature modified, import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.time.temporal.ChronoUnit"
        ],
        "logicChanges": [
          "Parameter count changed from 3 to 2"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "testIntChars[@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::cartesian_annotating_parameters[]\n// tag::cartesian_combining_values[]\n@org.junitpioneer.jupiter.cartesian.CartesianTest\nvoid testIntChars(@org.junitpioneer.jupiter.cartesian.CartesianTest.Values(ints \u003d { 1, 2, 4 })\nint number, @org.junitpioneer.jupiter.cartesian.CartesianTest.Values(strings \u003d { \"A\", \"B\" })\njava.lang.String character) {\n    // passing test code\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "testIntChars",
      "methodNameAfter": "testIntChars",
      "diffSummary": "signature modified, import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.time.temporal.ChronoUnit"
      ],
      "logicChanges": [
        "Parameter count changed from 3 to 2"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testExecutionDisabled_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/params/DisableParameterizedExtensionDemo.java",
    "methodName": "testExecutionDisabled",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        36.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junitpioneer.jupiter.params.DisableIfDisplayName(contains \u003d \"disable\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testExecutionDisabled[java.lang.String reason]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// tag::disable_parameterized_name_contains[]\n// disable invocations whose display name contains \"disable\"\n@org.junitpioneer.jupiter.params.DisableIfDisplayName(contains \u003d \"disable\")\n@org.junit.jupiter.params.ParameterizedTest(name \u003d \"See if enabled with {0}\")\n@org.junit.jupiter.params.provider.ValueSource(strings \u003d // Disabled: 1,2,3,4,5\n// Not disabled: 6\n{ \"disable who\"// 1\n, \"you, disable you\"// 2\n, \"why am I disabled\"// 3\n, \"what has been disabled must stay disabled\"// 4\n, \"fine disable me all you want\"// 5\n, \"not those one, though!\"// 6\n })\nvoid testExecutionDisabled(java.lang.String reason) {\n    if (reason.contains(\"disable\")) {\n        org.assertj.core.api.Assertions.fail(\"Test should\u0027ve been disabled \" + reason);\n    }\n}",
      "assertion_type": "if (reason.contains(\"disable\")) {\n    org.assertj.core.api.Assertions.fail(\"Test should\u0027ve been disabled \" + reason);\n}"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junitpioneer.jupiter.params.DisableIfDisplayName(contains \u003d \"disable\")",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "testExecutionDisabled",
        "methodNameAfter": "testExecutionDisabled",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: if (reason.contains(\"disable\")) { org.assertj.core.api.Assertions.fail(\"Test should\u0027ve been disabled \" + reason); }",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "testExecutionDisabled[java.lang.String reason]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// tag::disable_parameterized_name_contains[]\n// disable invocations whose display name contains \"disable\"\n@org.junitpioneer.jupiter.params.DisableIfDisplayName(contains \u003d \"disable\")\n@org.junit.jupiter.params.ParameterizedTest(name \u003d \"See if enabled with {0}\")\n@org.junit.jupiter.params.provider.ValueSource(strings \u003d // Disabled: 1,2,3,4,5\n// Not disabled: 6\n{ \"disable who\"// 1\n, \"you, disable you\"// 2\n, \"why am I disabled\"// 3\n, \"what has been disabled must stay disabled\"// 4\n, \"fine disable me all you want\"// 5\n, \"not those one, though!\"// 6\n })\nvoid testExecutionDisabled(java.lang.String reason) {\n    if (reason.contains(\"disable\")) {\n        org.junit.jupiter.api.Assertions.fail(\"Test should\u0027ve been disabled \" + reason);\n    }\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "testExecutionDisabled",
      "methodNameAfter": "testExecutionDisabled",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: if (reason.contains(\"disable\")) { org.assertj.core.api.Assertions.fail(\"Test should\u0027ve been disabled \" + reason); }",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testDisplayNameString_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/params/DisableParameterizedExtensionDemo.java",
    "methodName": "testDisplayNameString",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        46.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junitpioneer.jupiter.params.DisableIfDisplayName(contains \u003d { \"1\", \"2\" })",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testDisplayNameString[int num]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::disable_parameterized_name_contains[]\n// tag::disable_parameterized_name_contains_one_or_two[]\n@org.junitpioneer.jupiter.params.DisableIfDisplayName(contains \u003d { \"1\", \"2\" })\n@org.junit.jupiter.params.ParameterizedTest(name \u003d \"See if enabled with {0}\")\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3, 4, 5 })\nvoid testDisplayNameString(int num) {\n    if ((num \u003d\u003d 1) || (num \u003d\u003d 2)) {\n        org.assertj.core.api.Assertions.fail(\"Test should\u0027ve been disabled for \" + num);\n    }\n}",
      "assertion_type": "if ((num \u003d\u003d 1) || (num \u003d\u003d 2)) {\n    org.assertj.core.api.Assertions.fail(\"Test should\u0027ve been disabled for \" + num);\n}"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junitpioneer.jupiter.params.DisableIfDisplayName(contains \u003d { \"1\", \"2\" })",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "testDisplayNameString",
        "methodNameAfter": "testDisplayNameString",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: if ((num \u003d\u003d 1) || (num \u003d\u003d 2)) { org.assertj.core.api.Assertions.fail(\"Test should\u0027ve been disabled for \" + num); }",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "testDisplayNameString[int num]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::disable_parameterized_name_contains[]\n// tag::disable_parameterized_name_contains_one_or_two[]\n@org.junitpioneer.jupiter.params.DisableIfDisplayName(contains \u003d { \"1\", \"2\" })\n@org.junit.jupiter.params.ParameterizedTest(name \u003d \"See if enabled with {0}\")\n@org.junit.jupiter.params.provider.ValueSource(ints \u003d { 1, 2, 3, 4, 5 })\nvoid testDisplayNameString(int num) {\n    if ((num \u003d\u003d 1) || (num \u003d\u003d 2)) {\n        org.junit.jupiter.api.Assertions.fail(\"Test should\u0027ve been disabled for \" + num);\n    }\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "testDisplayNameString",
      "methodNameAfter": "testDisplayNameString",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: if ((num \u003d\u003d 1) || (num \u003d\u003d 2)) { org.assertj.core.api.Assertions.fail(\"Test should\u0027ve been disabled for \" + num); }",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "assertAllCartesianValuesSupplied_c7bb969cfd34eecf5fdbfbc343cc0903969425b1_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/json/JsonClasspathSourceArgumentsProviderTests.java",
    "methodName": "assertAllCartesianValuesSupplied",
    "beforeCommit": "c7bb969cfd34eecf5fdbfbc343cc0903969425b1",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        87.0,
        91.0,
        94.0,
        96.0,
        99.0,
        102.0
      ],
      "commit": "c7bb969cfd34eecf5fdbfbc343cc0903969425b1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "assertAllCartesianValuesSupplied[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid assertAllCartesianValuesSupplied() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProviderTests.JsonClasspathSourceCartesianTests.class);\n    java.util.Map\u003cjava.lang.String, java.util.List\u003cjava.lang.String\u003e\u003e displayNames \u003d results.dynamicallyRegisteredEvents().map(Event::getTestDescriptor).collect(java.util.stream.Collectors.groupingBy(org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProviderTests::testSourceMethodName, java.util.stream.Collectors.mapping(org.junit.platform.engine.TestDescriptor::getDisplayName, java.util.stream.Collectors.toList())));\n    org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"singleObject\", \"singleObjectProperty\", \"deconstructObjectsFromArray\", \"deconstructObjectsFromMultipleFiles\", \"deconstructObjectsFromMultipleFilesIntoComplexType\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleObject\")).containsExactly(\"[1] Jedi {name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Jedi {name\u003d\u0027Yoda\u0027, height\u003d66}\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleObjectProperty\")).containsExactly(\"[1] Luke\", \"[2] Yoda\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromArray\")).containsExactly(\"[1] Luke, 172\", \"[2] Luke, 66\", \"[3] Yoda, 172\", \"[4] Yoda, 66\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFiles\")).containsExactly(\"[1] 66, Yoda\", \"[2] 66, Luke\", \"[3] 172, Yoda\", \"[4] 172, Luke\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFilesIntoComplexType\")).containsExactly(\"[1] Yoda, Location {name\u003d\u0027unknown\u0027}\", \"[2] Yoda, Location {name\u003d\u0027Tatooine\u0027}\", \"[3] Luke, Location {name\u003d\u0027unknown\u0027}\", \"[4] Luke, Location {name\u003d\u0027Tatooine\u0027}\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"singleObject\", \"singleObjectProperty\", \"deconstructObjectsFromArray\", \"deconstructObjectsFromMultipleFiles\", \"deconstructObjectsFromMultipleFilesIntoComplexType\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleObject\")).containsExactly(\"[1] Jedi {name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Jedi {name\u003d\u0027Yoda\u0027, height\u003d66}\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleObjectProperty\")).containsExactly(\"[1] Luke\", \"[2] Yoda\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromArray\")).containsExactly(\"[1] Luke, 172\", \"[2] Luke, 66\", \"[3] Yoda, 172\", \"[4] Yoda, 66\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFiles\")).containsExactly(\"[1] 66, Yoda\", \"[2] 66, Luke\", \"[3] 172, Yoda\", \"[4] 172, Luke\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFilesIntoComplexType\")).containsExactly(\"[1] Yoda, Location {name\u003d\u0027unknown\u0027}\", \"[2] Yoda, Location {name\u003d\u0027Tatooine\u0027}\", \"[3] Luke, Location {name\u003d\u0027unknown\u0027}\", \"[4] Luke, Location {name\u003d\u0027Tatooine\u0027}\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        87.0,
        91.0,
        94.0,
        96.0,
        103.0,
        106.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "assertAllCartesianValuesSupplied",
        "methodNameAfter": "assertAllCartesianValuesSupplied",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: // assertThat(displayNames.get(\"customDataLocation\")) // .containsExactly(\"[1] Snowspeeder, 4.5\", \"[2] Snowspeeder, 3\", \"[3] Imperial Speeder Bike, 4.5\", // \"[4] Imperial Speeder Bike, 3\"); org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFiles\")).containsExactly(\"[1] 66, Yoda\", \"[2] 66, Luke\", \"[3] 172, Yoda\", \"[4] 172, Luke\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFiles\")).containsExactly(\"[1] 66, Yoda\", \"[2] 66, Luke\", \"[3] 172, Yoda\", \"[4] 172, Luke\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "assertAllCartesianValuesSupplied[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid assertAllCartesianValuesSupplied() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProviderTests.JsonClasspathSourceCartesianTests.class);\n    java.util.Map\u003cjava.lang.String, java.util.List\u003cjava.lang.String\u003e\u003e displayNames \u003d results.dynamicallyRegisteredEvents().map(Event::getTestDescriptor).collect(java.util.stream.Collectors.groupingBy(org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProviderTests::testSourceMethodName, java.util.stream.Collectors.mapping(org.junit.platform.engine.TestDescriptor::getDisplayName, java.util.stream.Collectors.toList())));\n    org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"singleObject\", \"singleObjectProperty\", \"deconstructObjectsFromArray\", \"deconstructObjectsFromMultipleFiles\", \"deconstructObjectsFromMultipleFilesIntoComplexType\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleObject\")).containsExactly(\"[1] Jedi {name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Jedi {name\u003d\u0027Yoda\u0027, height\u003d66}\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleObjectProperty\")).containsExactly(\"[1] Luke\", \"[2] Yoda\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromArray\")).containsExactly(\"[1] Luke, 172\", \"[2] Luke, 66\", \"[3] Yoda, 172\", \"[4] Yoda, 66\");\n    // assertThat(displayNames.get(\"customDataLocation\"))\n    // .containsExactly(\"[1] Snowspeeder, 4.5\", \"[2] Snowspeeder, 3\", \"[3] Imperial Speeder Bike, 4.5\",\n    // \"[4] Imperial Speeder Bike, 3\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFiles\")).containsExactly(\"[1] 66, Yoda\", \"[2] 66, Luke\", \"[3] 172, Yoda\", \"[4] 172, Luke\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFilesIntoComplexType\")).containsExactly(\"[1] Yoda, Location {name\u003d\u0027unknown\u0027}\", \"[2] Yoda, Location {name\u003d\u0027Tatooine\u0027}\", \"[3] Luke, Location {name\u003d\u0027unknown\u0027}\", \"[4] Luke, Location {name\u003d\u0027Tatooine\u0027}\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"singleObject\", \"singleObjectProperty\", \"deconstructObjectsFromArray\", \"deconstructObjectsFromMultipleFiles\", \"deconstructObjectsFromMultipleFilesIntoComplexType\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleObject\")).containsExactly(\"[1] Jedi {name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Jedi {name\u003d\u0027Yoda\u0027, height\u003d66}\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleObjectProperty\")).containsExactly(\"[1] Luke\", \"[2] Yoda\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromArray\")).containsExactly(\"[1] Luke, 172\", \"[2] Luke, 66\", \"[3] Yoda, 172\", \"[4] Yoda, 66\"), // assertThat(displayNames.get(\"customDataLocation\"))\n// .containsExactly(\"[1] Snowspeeder, 4.5\", \"[2] Snowspeeder, 3\", \"[3] Imperial Speeder Bike, 4.5\",\n// \"[4] Imperial Speeder Bike, 3\");\norg.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFiles\")).containsExactly(\"[1] 66, Yoda\", \"[2] 66, Luke\", \"[3] 172, Yoda\", \"[4] 172, Luke\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFilesIntoComplexType\")).containsExactly(\"[1] Yoda, Location {name\u003d\u0027unknown\u0027}\", \"[2] Yoda, Location {name\u003d\u0027Tatooine\u0027}\", \"[3] Luke, Location {name\u003d\u0027unknown\u0027}\", \"[4] Luke, Location {name\u003d\u0027Tatooine\u0027}\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "assertAllCartesianValuesSupplied",
      "methodNameAfter": "assertAllCartesianValuesSupplied",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: // assertThat(displayNames.get(\"customDataLocation\")) // .containsExactly(\"[1] Snowspeeder, 4.5\", \"[2] Snowspeeder, 3\", \"[3] Imperial Speeder Bike, 4.5\", // \"[4] Imperial Speeder Bike, 3\"); org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFiles\")).containsExactly(\"[1] 66, Yoda\", \"[2] 66, Luke\", \"[3] 172, Yoda\", \"[4] 172, Luke\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructObjectsFromMultipleFiles\")).containsExactly(\"[1] 66, Yoda\", \"[2] 66, Luke\", \"[3] 172, Yoda\", \"[4] 172, Luke\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "assertAllValuesSupplied_c7bb969cfd34eecf5fdbfbc343cc0903969425b1_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/json/JsonSourceArgumentsProviderTests.java",
    "methodName": "assertAllValuesSupplied",
    "beforeCommit": "c7bb969cfd34eecf5fdbfbc343cc0903969425b1",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        52.0,
        57.0,
        59.0,
        62.0,
        65.0,
        68.0,
        70.0
      ],
      "commit": "c7bb969cfd34eecf5fdbfbc343cc0903969425b1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 7.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "assertAllValuesSupplied[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid assertAllValuesSupplied() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.json.JsonSourceArgumentsProviderTests.JsonSourceTests.class);\n    java.util.Map\u003cjava.lang.String, java.util.List\u003cjava.lang.String\u003e\u003e displayNames \u003d results.dynamicallyRegisteredEvents().map(Event::getTestDescriptor).collect(java.util.stream.Collectors.groupingBy(org.junitpioneer.jupiter.json.JsonSourceArgumentsProviderTests::testSourceMethodName, java.util.stream.Collectors.mapping(org.junit.platform.engine.TestDescriptor::getDisplayName, java.util.stream.Collectors.toList())));\n    org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"deconstructCustomerFromArray\", \"deconstructCustomerMultipleValues\", \"deconstructCustomerMultipleLinesComplexType\", \"singleCustomer\", \"singleCustomerName\", \"allowsTrailingComma\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerFromArray\")).containsExactly(\"[1] Luke, 172\", \"[2] Yoda, 66\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerMultipleValues\")).containsExactly(\"[1] 66, Yoda\", \"[2] 172, Luke\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerMultipleLinesComplexType\")).containsExactly(\"[1] Yoda, Location{name\u003d\u0027unknown\u0027}\", \"[2] Luke, Location{name\u003d\u0027Tatooine\u0027}\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleCustomer\")).containsExactly(\"[1] Customer{name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Customer{name\u003d\u0027Yoda\u0027, height\u003d66}\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleCustomerName\")).containsExactly(\"[1] Luke\", \"[2] Yoda\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"allowsTrailingComma\")).containsExactly(\"[1] Customer{name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Customer{name\u003d\u0027Yoda\u0027, height\u003d66}\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"deconstructCustomerFromArray\", \"deconstructCustomerMultipleValues\", \"deconstructCustomerMultipleLinesComplexType\", \"singleCustomer\", \"singleCustomerName\", \"allowsTrailingComma\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerFromArray\")).containsExactly(\"[1] Luke, 172\", \"[2] Yoda, 66\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerMultipleValues\")).containsExactly(\"[1] 66, Yoda\", \"[2] 172, Luke\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerMultipleLinesComplexType\")).containsExactly(\"[1] Yoda, Location{name\u003d\u0027unknown\u0027}\", \"[2] Luke, Location{name\u003d\u0027Tatooine\u0027}\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleCustomer\")).containsExactly(\"[1] Customer{name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Customer{name\u003d\u0027Yoda\u0027, height\u003d66}\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleCustomerName\")).containsExactly(\"[1] Luke\", \"[2] Yoda\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"allowsTrailingComma\")).containsExactly(\"[1] Customer{name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Customer{name\u003d\u0027Yoda\u0027, height\u003d66}\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        52.0,
        56.0,
        58.0,
        61.0,
        64.0,
        67.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "assertAllValuesSupplied",
        "methodNameAfter": "assertAllValuesSupplied",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 7 to 6",
          "Added: org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"deconstructCustomerFromArray\", \"deconstructCustomerMultipleValues\", \"deconstructCustomerMultipleLinesComplexType\", \"singleCustomer\", \"singleCustomerName\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"deconstructCustomerFromArray\", \"deconstructCustomerMultipleValues\", \"deconstructCustomerMultipleLinesComplexType\", \"singleCustomer\", \"singleCustomerName\", \"allowsTrailingComma\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(displayNames.get(\"allowsTrailingComma\")).containsExactly(\"[1] Customer{name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Customer{name\u003d\u0027Yoda\u0027, height\u003d66}\")",
          "Assertion type unknown count changed from 7 to 6"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 9 to 8"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "assertAllValuesSupplied[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid assertAllValuesSupplied() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.json.JsonSourceArgumentsProviderTests.JsonSourceTests.class);\n    java.util.Map\u003cjava.lang.String, java.util.List\u003cjava.lang.String\u003e\u003e displayNames \u003d results.dynamicallyRegisteredEvents().map(Event::getTestDescriptor).collect(java.util.stream.Collectors.groupingBy(org.junitpioneer.jupiter.json.JsonSourceArgumentsProviderTests::testSourceMethodName, java.util.stream.Collectors.mapping(org.junit.platform.engine.TestDescriptor::getDisplayName, java.util.stream.Collectors.toList())));\n    org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"deconstructCustomerFromArray\", \"deconstructCustomerMultipleValues\", \"deconstructCustomerMultipleLinesComplexType\", \"singleCustomer\", \"singleCustomerName\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerFromArray\")).containsExactly(\"[1] Luke, 172\", \"[2] Yoda, 66\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerMultipleValues\")).containsExactly(\"[1] 66, Yoda\", \"[2] 172, Luke\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerMultipleLinesComplexType\")).containsExactly(\"[1] Yoda, Location{name\u003d\u0027unknown\u0027}\", \"[2] Luke, Location{name\u003d\u0027Tatooine\u0027}\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleCustomer\")).containsExactly(\"[1] Customer{name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Customer{name\u003d\u0027Yoda\u0027, height\u003d66}\");\n    org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleCustomerName\")).containsExactly(\"[1] Luke\", \"[2] Yoda\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"deconstructCustomerFromArray\", \"deconstructCustomerMultipleValues\", \"deconstructCustomerMultipleLinesComplexType\", \"singleCustomer\", \"singleCustomerName\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerFromArray\")).containsExactly(\"[1] Luke, 172\", \"[2] Yoda, 66\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerMultipleValues\")).containsExactly(\"[1] 66, Yoda\", \"[2] 172, Luke\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"deconstructCustomerMultipleLinesComplexType\")).containsExactly(\"[1] Yoda, Location{name\u003d\u0027unknown\u0027}\", \"[2] Luke, Location{name\u003d\u0027Tatooine\u0027}\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleCustomer\")).containsExactly(\"[1] Customer{name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Customer{name\u003d\u0027Yoda\u0027, height\u003d66}\"), org.assertj.core.api.Assertions.assertThat(displayNames.get(\"singleCustomerName\")).containsExactly(\"[1] Luke\", \"[2] Yoda\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "assertAllValuesSupplied",
      "methodNameAfter": "assertAllValuesSupplied",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 7 to 6",
        "Added: org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"deconstructCustomerFromArray\", \"deconstructCustomerMultipleValues\", \"deconstructCustomerMultipleLinesComplexType\", \"singleCustomer\", \"singleCustomerName\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(displayNames).containsOnlyKeys(\"deconstructCustomerFromArray\", \"deconstructCustomerMultipleValues\", \"deconstructCustomerMultipleLinesComplexType\", \"singleCustomer\", \"singleCustomerName\", \"allowsTrailingComma\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(displayNames.get(\"allowsTrailingComma\")).containsExactly(\"[1] Customer{name\u003d\u0027Luke\u0027, height\u003d172}\", \"[2] Customer{name\u003d\u0027Yoda\u0027, height\u003d66}\")",
        "Assertion type unknown count changed from 7 to 6"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 9 to 8"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 7 to 6",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 7 to 6"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/resource/ResourceExtensionDemo.java",
    "methodName": "test1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        27.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// tag::create_new_resources_demo[]\n@org.junit.jupiter.api.Test\nvoid test1(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    // Test code goes here, e.g.,\n    org.assertj.core.api.Assertions.assertThat(tempDir).exists();\n}",
      "assertion_type": "// Test code goes here, e.g.,\norg.assertj.core.api.Assertions.assertThat(tempDir).exists()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        27.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: // Test code goes here, e.g., org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(tempDir))",
          "Removed: // Test code goes here, e.g., org.assertj.core.api.Assertions.assertThat(tempDir).exists()",
          "Assertion type unknown count changed from 1 to 0",
          "New assertion type: assertTrue"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// tag::create_new_resources_demo[]\n@org.junit.jupiter.api.Test\nvoid test1(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.TemporaryDirectory.class)\njava.nio.file.Path tempDir) {\n    // Test code goes here, e.g.,\n    org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(tempDir));\n}",
      "assertion_type": "// Test code goes here, e.g.,\norg.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(tempDir))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: // Test code goes here, e.g., org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(tempDir))",
        "Removed: // Test code goes here, e.g., org.assertj.core.api.Assertions.assertThat(tempDir).exists()",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type: assertTrue"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "dirTest1_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/resource/ResourceExtensionDemo.java",
    "methodName": "dirTest1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        40.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "dirTest1[@org.junitpioneer.jupiter.resource.Dir\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::create_new_resources_demo[]\n// tag::create_new_dir_demo[]\n@org.junit.jupiter.api.Test\nvoid dirTest1(@org.junitpioneer.jupiter.resource.Dir\njava.nio.file.Path tempDir) {\n    // Test code goes here, e.g.,\n    org.assertj.core.api.Assertions.assertThat(tempDir).exists();\n}",
      "assertion_type": "// Test code goes here, e.g.,\norg.assertj.core.api.Assertions.assertThat(tempDir).exists()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        40.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "dirTest1",
        "methodNameAfter": "dirTest1",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: // Test code goes here, e.g., org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(tempDir))",
          "Removed: // Test code goes here, e.g., org.assertj.core.api.Assertions.assertThat(tempDir).exists()",
          "Assertion type unknown count changed from 1 to 0",
          "New assertion type: assertTrue"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "dirTest1[@org.junitpioneer.jupiter.resource.Dir\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::create_new_resources_demo[]\n// tag::create_new_dir_demo[]\n@org.junit.jupiter.api.Test\nvoid dirTest1(@org.junitpioneer.jupiter.resource.Dir\njava.nio.file.Path tempDir) {\n    // Test code goes here, e.g.,\n    org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(tempDir));\n}",
      "assertion_type": "// Test code goes here, e.g.,\norg.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(tempDir))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "dirTest1",
      "methodNameAfter": "dirTest1",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: // Test code goes here, e.g., org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(tempDir))",
        "Removed: // Test code goes here, e.g., org.assertj.core.api.Assertions.assertThat(tempDir).exists()",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type: assertTrue"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testWithArg_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/resource/ResourceExtensionDemo.java",
    "methodName": "testWithArg",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        57.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testWithArg[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d \"customPrefix\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::create_new_dir_demo[]\n// @formatter:off\n// tag::create_new_resource_with_arg_demo[]\n@org.junit.jupiter.api.Test\nvoid testWithArg(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d \"customPrefix\")\njava.nio.file.Path tempDir) {\n    // Test code goes here, e.g.,\n    java.nio.file.Path rootTempDir \u003d java.nio.file.Paths.get(java.lang.System.getProperty(\"java.io.tmpdir\"));\n    org.assertj.core.api.Assertions.assertThat(rootTempDir.relativize(tempDir)).asString().startsWith(\"customPrefix\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(rootTempDir.relativize(tempDir)).asString().startsWith(\"customPrefix\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        57.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "testWithArg",
        "methodNameAfter": "testWithArg",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).toString().startsWith(\"customPrefix\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(rootTempDir.relativize(tempDir)).asString().startsWith(\"customPrefix\")",
          "Assertion type unknown count changed from 1 to 0",
          "New assertion type: assertTrue"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "testWithArg[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d \"customPrefix\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::create_new_dir_demo[]\n// @formatter:off\n// tag::create_new_resource_with_arg_demo[]\n@org.junit.jupiter.api.Test\nvoid testWithArg(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d \"customPrefix\")\njava.nio.file.Path tempDir) {\n    // Test code goes here, e.g.,\n    java.nio.file.Path rootTempDir \u003d java.nio.file.Paths.get(java.lang.System.getProperty(\"java.io.tmpdir\"));\n    org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).toString().startsWith(\"customPrefix\"));\n}",
      "assertion_type": "org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).toString().startsWith(\"customPrefix\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "testWithArg",
      "methodNameAfter": "testWithArg",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).toString().startsWith(\"customPrefix\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(rootTempDir.relativize(tempDir)).asString().startsWith(\"customPrefix\")",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type: assertTrue"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testWithArg_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/resource/ResourceExtensionDemo.java",
    "methodName": "testWithArg",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        57.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testWithArg[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d \"customPrefix\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::create_new_dir_demo[]\n// @formatter:off\n// tag::create_new_resource_with_arg_demo[]\n@org.junit.jupiter.api.Test\nvoid testWithArg(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d \"customPrefix\")\njava.nio.file.Path tempDir) {\n    // Test code goes here, e.g.,\n    java.nio.file.Path rootTempDir \u003d java.nio.file.Paths.get(java.lang.System.getProperty(\"java.io.tmpdir\"));\n    org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).toString().startsWith(\"customPrefix\"));\n}",
      "assertion_type": "org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).toString().startsWith(\"customPrefix\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        50.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "No Annotations",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "testWithArg",
        "methodNameAfter": "testWithArg",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).startsWith(\"customPrefix\"))",
          "Removed: org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).toString().startsWith(\"customPrefix\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "testWithArg[@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d \"customPrefix\")\njava.nio.file.Path tempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::create_new_dir_demo[]\n// @formatter:off\n// tag::create_new_resource_with_arg_demo[]\nvoid testWithArg(@org.junitpioneer.jupiter.resource.New(value \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, arguments \u003d \"customPrefix\")\njava.nio.file.Path tempDir) {\n    // Test code goes here, e.g.,\n    java.nio.file.Path rootTempDir \u003d java.nio.file.Paths.get(java.lang.System.getProperty(\"java.io.tmpdir\"));\n    org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).startsWith(\"customPrefix\"));\n}",
      "assertion_type": "org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).startsWith(\"customPrefix\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "testWithArg",
      "methodNameAfter": "testWithArg",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).startsWith(\"customPrefix\"))",
        "Removed: org.junit.jupiter.api.Assertions.assertTrue(rootTempDir.relativize(tempDir).toString().startsWith(\"customPrefix\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "sharedResourceTest1_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/resource/ResourceExtensionDemo.java",
    "methodName": "sharedResourceTest1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        69.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "sharedResourceTest1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"sharedTempDir\")\njava.nio.file.Path sharedTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::create_new_resource_with_arg_demo[]\n// @formatter:on\n// @formatter:off\n// tag::create_shared_resource_demo[]\n@org.junit.jupiter.api.Test\nvoid sharedResourceTest1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"sharedTempDir\")\njava.nio.file.Path sharedTempDir) {\n    // Test code goes here, e.g.,\n    org.assertj.core.api.Assertions.assertThat(sharedTempDir).exists();\n}",
      "assertion_type": "// Test code goes here, e.g.,\norg.assertj.core.api.Assertions.assertThat(sharedTempDir).exists()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        69.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "sharedResourceTest1",
        "methodNameAfter": "sharedResourceTest1",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: // Test code goes here, e.g., org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(sharedTempDir))",
          "Removed: // Test code goes here, e.g., org.assertj.core.api.Assertions.assertThat(sharedTempDir).exists()",
          "Assertion type unknown count changed from 1 to 0",
          "New assertion type: assertTrue"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "sharedResourceTest1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"sharedTempDir\")\njava.nio.file.Path sharedTempDir]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::create_new_resource_with_arg_demo[]\n// @formatter:on\n// @formatter:off\n// tag::create_shared_resource_demo[]\n@org.junit.jupiter.api.Test\nvoid sharedResourceTest1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.TemporaryDirectory.class, name \u003d \"sharedTempDir\")\njava.nio.file.Path sharedTempDir) {\n    // Test code goes here, e.g.,\n    org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(sharedTempDir));\n}",
      "assertion_type": "// Test code goes here, e.g.,\norg.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(sharedTempDir))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "sharedResourceTest1",
      "methodNameAfter": "sharedResourceTest1",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: // Test code goes here, e.g., org.junit.jupiter.api.Assertions.assertTrue(java.nio.file.Files.exists(sharedTempDir))",
        "Removed: // Test code goes here, e.g., org.assertj.core.api.Assertions.assertThat(sharedTempDir).exists()",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type: assertTrue"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        105.0,
        107.0,
        108.0,
        109.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar B\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        137.0,
        138.0,
        139.0,
        141.0,
        142.0,
        143.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"clear envvar D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        137.0,
        138.0,
        139.0,
        141.0,
        142.0,
        143.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"clear envvar D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        105.0,
        107.0,
        108.0,
        109.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar B\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        105.0,
        107.0,
        108.0,
        109.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar B\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        137.0,
        138.0,
        139.0,
        141.0,
        142.0,
        143.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"clear envvar D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        137.0,
        138.0,
        139.0,
        141.0,
        142.0,
        143.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"clear envvar D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        105.0,
        107.0,
        108.0,
        109.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar B\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        105.0,
        107.0,
        108.0,
        109.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar B\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        137.0,
        138.0,
        139.0,
        141.0,
        142.0,
        143.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
          "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"clear envvar D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar E\")).isNull(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isEqualTo(\"new D\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isEqualTo(\"new A\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isEqualTo(\"new B\")",
        "Added: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isEqualTo(\"old C\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"clear envvar D\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar B\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar C\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        254.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        270.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
          "Added: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    // Set in SetClearRestoreOnClass\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "// Set in SetClearRestoreOnClass\norg.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
        "Added: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        270.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    // Set in SetClearRestoreOnClass\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "// Set in SetClearRestoreOnClass\norg.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        318.0,
        319.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
          "Removed: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from prior method should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
        "Removed: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        703.0,
        704.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        254.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        254.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        270.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
          "Added: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    // Set in SetClearRestoreOnClass\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "// Set in SetClearRestoreOnClass\norg.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
        "Added: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        270.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    // Set in SetClearRestoreOnClass\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "// Set in SetClearRestoreOnClass\norg.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        318.0,
        319.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
          "Removed: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from prior method should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
        "Removed: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        703.0,
        704.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        254.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        254.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        270.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
          "Added: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    // Set in SetClearRestoreOnClass\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "// Set in SetClearRestoreOnClass\norg.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)",
        "Added: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        270.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    // Set in SetClearRestoreOnClass\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "// Set in SetClearRestoreOnClass\norg.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        318.0,
        319.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
          "Removed: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from prior method should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getenv()).containsExactlyInAnyOrderEntriesOf(initialState)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"Restore\")).isNull()",
        "Removed: // Set in SetClearRestoreOnClass org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"XXX\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameEnvironmentVariable_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameEnvironmentVariable",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        546.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same environment variable\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameEnvironmentVariable\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same variable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameEnvironmentVariable_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameEnvironmentVariable",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same variable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        546.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same environment variable\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameEnvironmentVariable\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameEnvironmentVariable_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameEnvironmentVariable",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        546.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same environment variable\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameEnvironmentVariable\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same variable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameEnvironmentVariable_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameEnvironmentVariable",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same variable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        546.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same environment variable\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameEnvironmentVariable\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameEnvironmentVariable_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameEnvironmentVariable",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        546.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same environment variable\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameEnvironmentVariable\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameEnvironmentVariable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same variable\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameEnvironmentVariable() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "methodNameAfter": "shouldFailWhenClearAndSetSameEnvironmentVariable",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameEnvironmentVariableTwice_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearSameEnvironmentVariableTwice",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        558.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same environment variable twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0",
          "Control flow \u0027for\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0",
        "Control flow \u0027for\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameEnvironmentVariableTwice_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearSameEnvironmentVariableTwice",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        558.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2",
          "Control flow \u0027for\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same environment variable twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2",
        "Control flow \u0027for\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameEnvironmentVariableTwice_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearSameEnvironmentVariableTwice",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        558.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same environment variable twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0",
          "Control flow \u0027for\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0",
        "Control flow \u0027for\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameEnvironmentVariableTwice_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearSameEnvironmentVariableTwice",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        558.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2",
          "Control flow \u0027for\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same environment variable twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2",
        "Control flow \u0027for\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameEnvironmentVariableTwice_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenClearSameEnvironmentVariableTwice",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        558.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same environment variable twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0",
          "Control flow \u0027for\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\n@org.junitpioneer.jupiter.ClearEnvironmentVariable(key \u003d \"set envvar A\")\nvoid shouldFailWhenClearSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenClearSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0",
        "Control flow \u0027for\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameEnvironmentVariableTwice_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenSetSameEnvironmentVariableTwice",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        567.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same environment variable twice\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameEnvironmentVariableTwice_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenSetSameEnvironmentVariableTwice",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        567.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same environment variable twice\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameEnvironmentVariableTwice_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenSetSameEnvironmentVariableTwice",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        567.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same environment variable twice\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameEnvironmentVariableTwice_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenSetSameEnvironmentVariableTwice",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        567.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same environment variable twice\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameEnvironmentVariableTwice_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldFailWhenSetSameEnvironmentVariableTwice",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        567.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same environment variable twice\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameEnvironmentVariableTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameEnvironmentVariableTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetEnvironmentVariable(key \u003d \"set envvar A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameEnvironmentVariableTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "methodNameAfter": "shouldFailWhenSetSameEnvironmentVariableTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldNotReportWarningIfExtensionNotUsed_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldNotReportWarningIfExtensionNotUsed",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        592.0,
        593.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldNotReportWarningIfExtensionNotUsed[org.junitpioneer.jupiter.StdOut out]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo\nvoid shouldNotReportWarningIfExtensionNotUsed(org.junitpioneer.jupiter.StdOut out) {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.ReportWarningTestCases.class, \"testWithoutExtension\");\n    org.assertj.core.api.Assertions.assertThat(results).hasNoReportEntries();\n    org.assertj.core.api.Assertions.assertThat(out.capturedLines()).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasNoReportEntries(), org.assertj.core.api.Assertions.assertThat(out.capturedLines()).isEmpty()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        592.0,
        593.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldNotReportWarningIfExtensionNotUsed",
        "methodNameAfter": "shouldNotReportWarningIfExtensionNotUsed",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(out.capturedLines()).containsExactly(\"\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(out.capturedLines()).isEmpty()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldNotReportWarningIfExtensionNotUsed[org.junitpioneer.jupiter.StdOut out]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo\nvoid shouldNotReportWarningIfExtensionNotUsed(org.junitpioneer.jupiter.StdOut out) {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.ReportWarningTestCases.class, \"testWithoutExtension\");\n    org.assertj.core.api.Assertions.assertThat(results).hasNoReportEntries();\n    org.assertj.core.api.Assertions.assertThat(out.capturedLines()).containsExactly(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasNoReportEntries(), org.assertj.core.api.Assertions.assertThat(out.capturedLines()).containsExactly(\"\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldNotReportWarningIfExtensionNotUsed",
      "methodNameAfter": "shouldNotReportWarningIfExtensionNotUsed",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(out.capturedLines()).containsExactly(\"\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(out.capturedLines()).isEmpty()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldInheritInNestedClass_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldInheritInNestedClass",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        723.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    // Shouldn\u0027t be visible in the next test\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"Restore\", \"Restore Me\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        747.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldInheritInNestedClass",
        "methodNameAfter": "shouldInheritInNestedClass",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull();// Should be restored\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldInheritInNestedClass",
      "methodNameAfter": "shouldInheritInNestedClass",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldInheritInNestedClass_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldInheritInNestedClass",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        747.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull();// Should be restored\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        723.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldInheritInNestedClass",
        "methodNameAfter": "shouldInheritInNestedClass",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    // Shouldn\u0027t be visible in the next test\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"Restore\", \"Restore Me\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldInheritInNestedClass",
      "methodNameAfter": "shouldInheritInNestedClass",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldInheritInNestedClass_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldInheritInNestedClass",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        723.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    // Shouldn\u0027t be visible in the next test\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"Restore\", \"Restore Me\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        747.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldInheritInNestedClass",
        "methodNameAfter": "shouldInheritInNestedClass",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull();// Should be restored\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldInheritInNestedClass",
      "methodNameAfter": "shouldInheritInNestedClass",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldInheritInNestedClass_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldInheritInNestedClass",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        747.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull();// Should be restored\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        723.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldInheritInNestedClass",
        "methodNameAfter": "shouldInheritInNestedClass",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    // Shouldn\u0027t be visible in the next test\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"Restore\", \"Restore Me\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldInheritInNestedClass",
      "methodNameAfter": "shouldInheritInNestedClass",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldInheritInNestedClass_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/EnvironmentVariableExtensionTests.java",
    "methodName": "shouldInheritInNestedClass",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        723.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull();\n    // Shouldn\u0027t be visible in the next test\n    org.junitpioneer.jupiter.EnvironmentVariableUtils.set(\"Restore\", \"Restore Me\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        747.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldInheritInNestedClass",
        "methodNameAfter": "shouldInheritInNestedClass",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull();// Should be restored\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldInheritInNestedClass",
      "methodNameAfter": "shouldInheritInNestedClass",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"RestoreAll\")).isNull()// Should be restored",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.systemEnvironmentVariable(\"set envvar A\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testReadLines_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/StdInOutExtensionDemo.java",
    "methodName": "testReadLines",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        104.0,
        107.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testReadLines[org.junitpioneer.jupiter.StdIn in]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo({ \"line1\", \"line2\", \"line3\" })\nvoid testReadLines(org.junitpioneer.jupiter.StdIn in) throws java.io.IOException {\n    org.junitpioneer.jupiter.StdInOutExtensionDemo.ConsoleReader consoleReader \u003d new org.junitpioneer.jupiter.StdInOutExtensionDemo.ConsoleReader();\n    consoleReader.readLines();\n    java.lang.String[] lines \u003d in.capturedLines();\n    // This is failing\n    // assertThat(lines).containsExactly(\"line1\", \"line2\");\n    // This is passing\n    // assertThat(lines).containsExactly(\"line1\", \"line2\", \"line3\");\n}",
      "assertion_type": "// assertThat(lines).containsExactly(\"line1\", \"line2\");, // assertThat(lines).containsExactly(\"line1\", \"line2\", \"line3\");"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        104.0,
        107.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "testReadLines",
        "methodNameAfter": "testReadLines",
        "diffSummary": "6 assertion changes",
        "assertionChanges": [
          "Added: // assertEquals(lines, \"line1\", \"line2\", \"line3\");",
          "Added: // assertEquals(lines, \"line1\", \"line2\");",
          "Removed: // assertThat(lines).containsExactly(\"line1\", \"line2\");",
          "Removed: // assertThat(lines).containsExactly(\"line1\", \"line2\", \"line3\");",
          "Assertion type unknown count changed from 2 to 0",
          "New assertion type: assertEquals"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "testReadLines[org.junitpioneer.jupiter.StdIn in]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo({ \"line1\", \"line2\", \"line3\" })\nvoid testReadLines(org.junitpioneer.jupiter.StdIn in) throws java.io.IOException {\n    org.junitpioneer.jupiter.StdInOutExtensionDemo.ConsoleReader consoleReader \u003d new org.junitpioneer.jupiter.StdInOutExtensionDemo.ConsoleReader();\n    consoleReader.readLines();\n    java.lang.String[] lines \u003d in.capturedLines();\n    // This is failing\n    // assertEquals(lines, \"line1\", \"line2\");\n    // This is passing\n    // assertEquals(lines, \"line1\", \"line2\", \"line3\");\n}",
      "assertion_type": "// assertEquals(lines, \"line1\", \"line2\");, // assertEquals(lines, \"line1\", \"line2\", \"line3\");"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "testReadLines",
      "methodNameAfter": "testReadLines",
      "diffSummary": "6 assertion changes",
      "assertionChanges": [
        "Added: // assertEquals(lines, \"line1\", \"line2\", \"line3\");",
        "Added: // assertEquals(lines, \"line1\", \"line2\");",
        "Removed: // assertThat(lines).containsExactly(\"line1\", \"line2\");",
        "Removed: // assertThat(lines).containsExactly(\"line1\", \"line2\", \"line3\");",
        "Assertion type unknown count changed from 2 to 0",
        "New assertion type: assertEquals"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 0",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        106.0,
        110.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        222.0,
        223.0,
        225.0,
        229.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        222.0,
        223.0,
        225.0,
        229.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        358.0,
        359.0,
        361.0,
        365.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        358.0,
        359.0,
        361.0,
        365.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        551.0,
        552.0,
        554.0,
        558.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        551.0,
        552.0,
        554.0,
        558.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        106.0,
        110.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        106.0,
        110.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        222.0,
        223.0,
        225.0,
        229.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        222.0,
        223.0,
        225.0,
        229.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        358.0,
        359.0,
        361.0,
        365.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        358.0,
        359.0,
        361.0,
        365.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        551.0,
        552.0,
        554.0,
        558.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        551.0,
        552.0,
        554.0,
        558.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        106.0,
        110.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        103.0,
        104.0,
        106.0,
        110.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        222.0,
        223.0,
        225.0,
        229.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isEffectivelyEqualsTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isStrictlyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        222.0,
        223.0,
        225.0,
        229.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        358.0,
        359.0,
        361.0,
        365.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isStrictlyEqualTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isEffectivelyEqualsTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "compareIdentical_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "compareIdentical",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        358.0,
        359.0,
        361.0,
        365.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        551.0,
        552.0,
        554.0,
        558.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "compareIdentical",
        "methodNameAfter": "compareIdentical",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "compareIdentical[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Effectively and strictly same for identical\")\nvoid compareIdentical() {\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "compareIdentical",
      "methodNameAfter": "compareIdentical",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isStrictlyEqualTo(objProp2wDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0,
        123.0,
        127.0,
        128.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"C\", \"I am not in set 2\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        239.0,
        243.0,
        247.0,
        251.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    objProp1.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        239.0,
        243.0,
        247.0,
        251.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    objProp1.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        378.0,
        382.0,
        383.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"E\", \"I am not in \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        378.0,
        382.0,
        383.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"E\", \"I am not in \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        568.0,
        572.0,
        576.0,
        580.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    objProp1.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        568.0,
        572.0,
        576.0,
        580.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    objProp1.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0,
        123.0,
        127.0,
        128.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"C\", \"I am not in set 2\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0,
        123.0,
        127.0,
        128.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"C\", \"I am not in set 2\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        239.0,
        243.0,
        247.0,
        251.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    objProp1.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        239.0,
        243.0,
        247.0,
        251.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    objProp1.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        378.0,
        382.0,
        383.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"E\", \"I am not in \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        378.0,
        382.0,
        383.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"E\", \"I am not in \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        568.0,
        572.0,
        576.0,
        580.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    objProp1.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        568.0,
        572.0,
        576.0,
        580.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    objProp1.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0,
        123.0,
        127.0,
        128.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"C\", \"I am not in set 2\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0,
        123.0,
        127.0,
        128.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"C\", \"I am not in set 2\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        239.0,
        243.0,
        247.0,
        251.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    objProp1.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        239.0,
        243.0,
        247.0,
        251.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual value\")\nvoid addedActualValue() {\n    objProp1.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        378.0,
        382.0,
        383.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"E\", \"I am not in \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        374.0,
        378.0,
        382.0,
        383.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    strPropAB1.setProperty(\"E\", \"I am not in \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        568.0,
        572.0,
        576.0,
        580.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedActualValue",
        "methodNameAfter": "addedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for added actual default value\")\nvoid addedActualValue() {\n    objProp1.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedActualValue",
      "methodNameAfter": "addedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        135.0,
        139.0,
        143.0,
        144.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"C\", \"I am not in set 1\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        259.0,
        263.0,
        267.0,
        270.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        259.0,
        263.0,
        267.0,
        270.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        390.0,
        394.0,
        398.0,
        399.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"E\", \"I am not in \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        390.0,
        394.0,
        398.0,
        399.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"E\", \"I am not in \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        588.0,
        592.0,
        596.0,
        600.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        588.0,
        592.0,
        596.0,
        600.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        135.0,
        139.0,
        143.0,
        144.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"C\", \"I am not in set 1\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        135.0,
        139.0,
        143.0,
        144.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"C\", \"I am not in set 1\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        259.0,
        263.0,
        267.0,
        270.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        259.0,
        263.0,
        267.0,
        270.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        390.0,
        394.0,
        398.0,
        399.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"E\", \"I am not in \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        390.0,
        394.0,
        398.0,
        399.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"E\", \"I am not in \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        588.0,
        592.0,
        596.0,
        600.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        588.0,
        592.0,
        596.0,
        600.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        135.0,
        139.0,
        143.0,
        144.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"C\", \"I am not in set 1\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        135.0,
        139.0,
        143.0,
        144.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"C\", \"I am not in set 1\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        259.0,
        263.0,
        267.0,
        270.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        259.0,
        263.0,
        267.0,
        270.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"Q\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        390.0,
        394.0,
        398.0,
        399.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"E\", \"I am not in \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "addedExpectedValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "addedExpectedValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        390.0,
        394.0,
        398.0,
        399.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    strPropAB2.setProperty(\"E\", \"I am not in \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        588.0,
        592.0,
        596.0,
        600.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "addedExpectedValue",
        "methodNameAfter": "addedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "addedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same added exp value\")\nvoid addedExpectedValue() {\n    objProp2.put(\"X\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "addedExpectedValue",
      "methodNameAfter": "addedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        151.0,
        155.0,
        159.0,
        160.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        278.0,
        282.0,
        286.0,
        289.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        278.0,
        282.0,
        286.0,
        289.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        406.0,
        410.0,
        414.0,
        415.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different than \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        406.0,
        410.0,
        414.0,
        415.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different than \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        608.0,
        612.0,
        616.0,
        619.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        608.0,
        612.0,
        616.0,
        619.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        151.0,
        155.0,
        159.0,
        160.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        151.0,
        155.0,
        159.0,
        160.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        278.0,
        282.0,
        286.0,
        289.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        278.0,
        282.0,
        286.0,
        289.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        406.0,
        410.0,
        414.0,
        415.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different than \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        406.0,
        410.0,
        414.0,
        415.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different than \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        608.0,
        612.0,
        616.0,
        619.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        608.0,
        612.0,
        616.0,
        619.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        151.0,
        155.0,
        159.0,
        160.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        151.0,
        155.0,
        159.0,
        160.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        278.0,
        282.0,
        286.0,
        289.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        278.0,
        282.0,
        286.0,
        289.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        406.0,
        410.0,
        414.0,
        415.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different than \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        406.0,
        410.0,
        414.0,
        415.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    strPropAB1.setProperty(\"B\", \"I am different than \u00272\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        608.0,
        612.0,
        616.0,
        619.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedActualValue",
        "methodNameAfter": "changedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same changed actual value\")\nvoid changedActualValue() {\n    objProp1.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedActualValue",
      "methodNameAfter": "changedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        167.0,
        171.0,
        175.0,
        176.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        297.0,
        301.0,
        305.0,
        308.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        297.0,
        301.0,
        305.0,
        308.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        422.0,
        426.0,
        430.0,
        431.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different than \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        422.0,
        426.0,
        430.0,
        431.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different than \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        627.0,
        631.0,
        635.0,
        638.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        627.0,
        631.0,
        635.0,
        638.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        167.0,
        171.0,
        175.0,
        176.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        167.0,
        171.0,
        175.0,
        176.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        297.0,
        301.0,
        305.0,
        308.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        297.0,
        301.0,
        305.0,
        308.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        422.0,
        426.0,
        430.0,
        431.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different than \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        422.0,
        426.0,
        430.0,
        431.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different than \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        627.0,
        631.0,
        635.0,
        638.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        627.0,
        631.0,
        635.0,
        638.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        167.0,
        171.0,
        175.0,
        176.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        167.0,
        171.0,
        175.0,
        176.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        297.0,
        301.0,
        305.0,
        308.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        297.0,
        301.0,
        305.0,
        308.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        422.0,
        426.0,
        430.0,
        431.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different than \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "changedExpectedValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "changedExpectedValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        422.0,
        426.0,
        430.0,
        431.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    strPropAB2.setProperty(\"B\", \"I am different than \u00271\u0027 and set in the default prop instance\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        627.0,
        631.0,
        635.0,
        638.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "changedExpectedValue",
        "methodNameAfter": "changedExpectedValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "changedExpectedValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for changed exp value\")\nvoid changedExpectedValue() {\n    objProp2.put(\"P\", new java.lang.Object());\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "changedExpectedValue",
      "methodNameAfter": "changedExpectedValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        183.0,
        187.0,
        191.0,
        192.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        316.0,
        320.0,
        324.0,
        327.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        316.0,
        320.0,
        324.0,
        327.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        438.0,
        442.0,
        446.0,
        447.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        438.0,
        442.0,
        446.0,
        447.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        646.0,
        650.0,
        654.0,
        657.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        646.0,
        650.0,
        654.0,
        657.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        183.0,
        187.0,
        191.0,
        192.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        183.0,
        187.0,
        191.0,
        192.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        316.0,
        320.0,
        324.0,
        327.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        316.0,
        320.0,
        324.0,
        327.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        438.0,
        442.0,
        446.0,
        447.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        438.0,
        442.0,
        446.0,
        447.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        646.0,
        650.0,
        654.0,
        657.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        646.0,
        650.0,
        654.0,
        657.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        183.0,
        187.0,
        191.0,
        192.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        183.0,
        187.0,
        191.0,
        192.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        316.0,
        320.0,
        324.0,
        327.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        316.0,
        320.0,
        324.0,
        327.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        438.0,
        442.0,
        446.0,
        447.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedActualValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedActualValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        438.0,
        442.0,
        446.0,
        447.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    strPropAB1.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        646.0,
        650.0,
        654.0,
        657.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedActualValue",
        "methodNameAfter": "removedActualValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedActualValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed actual value\")\nvoid removedActualValue() {\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedActualValue",
      "methodNameAfter": "removedActualValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0,
        203.0,
        207.0,
        208.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0,
        339.0,
        343.0,
        346.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0,
        339.0,
        343.0,
        346.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        454.0,
        458.0,
        462.0,
        463.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        454.0,
        458.0,
        462.0,
        463.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        665.0,
        669.0,
        673.0,
        676.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        665.0,
        669.0,
        673.0,
        676.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0,
        203.0,
        207.0,
        208.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0,
        203.0,
        207.0,
        208.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0,
        339.0,
        343.0,
        346.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0,
        339.0,
        343.0,
        346.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        454.0,
        458.0,
        462.0,
        463.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        454.0,
        458.0,
        462.0,
        463.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        665.0,
        669.0,
        673.0,
        676.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        665.0,
        669.0,
        673.0,
        676.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0,
        203.0,
        207.0,
        208.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0,
        203.0,
        207.0,
        208.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0,
        339.0,
        343.0,
        346.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotStrictlyEqualTo(strPropAB2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1).isNotEffectivelyEqualTo(strPropAB2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0,
        339.0,
        343.0,
        346.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        454.0,
        458.0,
        462.0,
        463.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).withFailMessage(\"Unable to see object value differences\").isEffectivelyEqualsTo(objProp2)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1).isNotStrictlyEqualTo(objProp2)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2); }).isInstanceOf(java.lang.AssertionError.class)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "removedExpValue_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "removedExpValue",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        454.0,
        458.0,
        462.0,
        463.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    strPropAB2.remove(\"B\");\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        665.0,
        669.0,
        673.0,
        676.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "removedExpValue",
        "methodNameAfter": "removedExpValue",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "removedExpValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Not same for removed exp value\")\nvoid removedExpValue() {\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "removedExpValue",
      "methodNameAfter": "removedExpValue",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotEffectivelyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isEffectivelyEqualsTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromDefaultToTopLevel_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromDefaultToTopLevel",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        472.0,
        474.0,
        478.0,
        482.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    strPropAB1CDwDefaults.put(\"B\", strPropAB1.getProperty(\"B\"));\n    strPropAB1.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        685.0,
        689.0,
        693.0,
        697.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
        "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    objProp1wDefaults.put(\"P\", objProp1.get(\"P\"));\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
      "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromDefaultToTopLevel_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromDefaultToTopLevel",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        685.0,
        689.0,
        693.0,
        697.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    objProp1wDefaults.put(\"P\", objProp1.get(\"P\"));\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        472.0,
        474.0,
        478.0,
        482.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
        "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    strPropAB1CDwDefaults.put(\"B\", strPropAB1.getProperty(\"B\"));\n    strPropAB1.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
      "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromDefaultToTopLevel_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromDefaultToTopLevel",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        472.0,
        474.0,
        478.0,
        482.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    strPropAB1CDwDefaults.put(\"B\", strPropAB1.getProperty(\"B\"));\n    strPropAB1.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        685.0,
        689.0,
        693.0,
        697.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
        "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    objProp1wDefaults.put(\"P\", objProp1.get(\"P\"));\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
      "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromDefaultToTopLevel_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromDefaultToTopLevel",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        685.0,
        689.0,
        693.0,
        697.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    objProp1wDefaults.put(\"P\", objProp1.get(\"P\"));\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        472.0,
        474.0,
        478.0,
        482.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
        "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    strPropAB1CDwDefaults.put(\"B\", strPropAB1.getProperty(\"B\"));\n    strPropAB1.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
      "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromDefaultToTopLevel_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromDefaultToTopLevel",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        472.0,
        474.0,
        478.0,
        482.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    strPropAB1CDwDefaults.put(\"B\", strPropAB1.getProperty(\"B\"));\n    strPropAB1.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        685.0,
        689.0,
        693.0,
        697.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
        "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from default to top level\")\nvoid moveActualValueFromDefaultToTopLevel() {\n    objProp1wDefaults.put(\"P\", objProp1.get(\"P\"));\n    objProp1.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromDefaultToTopLevel",
      "methodNameAfter": "moveActualValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromTopLevelToDefault_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromTopLevelToDefault",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        491.0,
        493.0,
        497.0,
        501.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    strPropAB1.put(\"D\", strPropAB1CDwDefaults.getProperty(\"D\"));\n    strPropAB1CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        706.0,
        710.0,
        714.0,
        718.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromTopLevelToDefault",
        "methodNameAfter": "moveActualValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    objProp1.put(\"R\", objProp1wDefaults.get(\"R\"));\n    objProp1wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromTopLevelToDefault",
      "methodNameAfter": "moveActualValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromTopLevelToDefault_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromTopLevelToDefault",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        706.0,
        710.0,
        714.0,
        718.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    objProp1.put(\"R\", objProp1wDefaults.get(\"R\"));\n    objProp1wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        491.0,
        493.0,
        497.0,
        501.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromTopLevelToDefault",
        "methodNameAfter": "moveActualValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    strPropAB1.put(\"D\", strPropAB1CDwDefaults.getProperty(\"D\"));\n    strPropAB1CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromTopLevelToDefault",
      "methodNameAfter": "moveActualValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromTopLevelToDefault_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromTopLevelToDefault",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        491.0,
        493.0,
        497.0,
        501.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    strPropAB1.put(\"D\", strPropAB1CDwDefaults.getProperty(\"D\"));\n    strPropAB1CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        706.0,
        710.0,
        714.0,
        718.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromTopLevelToDefault",
        "methodNameAfter": "moveActualValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    objProp1.put(\"R\", objProp1wDefaults.get(\"R\"));\n    objProp1wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromTopLevelToDefault",
      "methodNameAfter": "moveActualValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromTopLevelToDefault_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromTopLevelToDefault",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        706.0,
        710.0,
        714.0,
        718.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    objProp1.put(\"R\", objProp1wDefaults.get(\"R\"));\n    objProp1wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        491.0,
        493.0,
        497.0,
        501.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromTopLevelToDefault",
        "methodNameAfter": "moveActualValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    strPropAB1.put(\"D\", strPropAB1CDwDefaults.getProperty(\"D\"));\n    strPropAB1CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromTopLevelToDefault",
      "methodNameAfter": "moveActualValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveActualValueFromTopLevelToDefault_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveActualValueFromTopLevelToDefault",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        491.0,
        493.0,
        497.0,
        501.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    strPropAB1.put(\"D\", strPropAB1CDwDefaults.getProperty(\"D\"));\n    strPropAB1CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        706.0,
        710.0,
        714.0,
        718.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveActualValueFromTopLevelToDefault",
        "methodNameAfter": "moveActualValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveActualValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move actual value from top level to default\")\nvoid moveActualValueFromTopLevelToDefault() {\n    objProp1.put(\"R\", objProp1wDefaults.get(\"R\"));\n    objProp1wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveActualValueFromTopLevelToDefault",
      "methodNameAfter": "moveActualValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromDefaultToTopLevel_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromDefaultToTopLevel",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        510.0,
        512.0,
        516.0,
        520.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    strPropAB2CDwDefaults.put(\"B\", strPropAB2.getProperty(\"B\"));\n    strPropAB2.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        727.0,
        731.0,
        735.0,
        739.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
        "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    objProp2wDefaults.put(\"P\", objProp2.get(\"P\"));\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
      "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromDefaultToTopLevel_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromDefaultToTopLevel",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        727.0,
        731.0,
        735.0,
        739.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    objProp2wDefaults.put(\"P\", objProp2.get(\"P\"));\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        510.0,
        512.0,
        516.0,
        520.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
        "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    strPropAB2CDwDefaults.put(\"B\", strPropAB2.getProperty(\"B\"));\n    strPropAB2.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
      "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromDefaultToTopLevel_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromDefaultToTopLevel",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        510.0,
        512.0,
        516.0,
        520.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    strPropAB2CDwDefaults.put(\"B\", strPropAB2.getProperty(\"B\"));\n    strPropAB2.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        727.0,
        731.0,
        735.0,
        739.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
        "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    objProp2wDefaults.put(\"P\", objProp2.get(\"P\"));\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
      "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromDefaultToTopLevel_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromDefaultToTopLevel",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        727.0,
        731.0,
        735.0,
        739.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    objProp2wDefaults.put(\"P\", objProp2.get(\"P\"));\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        510.0,
        512.0,
        516.0,
        520.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
        "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    strPropAB2CDwDefaults.put(\"B\", strPropAB2.getProperty(\"B\"));\n    strPropAB2.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
      "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromDefaultToTopLevel_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromDefaultToTopLevel",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        510.0,
        512.0,
        516.0,
        520.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    strPropAB2CDwDefaults.put(\"B\", strPropAB2.getProperty(\"B\"));\n    strPropAB2.remove(\"B\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        727.0,
        731.0,
        735.0,
        739.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
        "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromDefaultToTopLevel[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from default to top level\")\nvoid moveExpValueFromDefaultToTopLevel() {\n    objProp2wDefaults.put(\"P\", objProp2.get(\"P\"));\n    objProp2.remove(\"P\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromDefaultToTopLevel",
      "methodNameAfter": "moveExpValueFromDefaultToTopLevel",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromTopLevelToDefault_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromTopLevelToDefault",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        529.0,
        531.0,
        535.0,
        539.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    strPropAB2.put(\"D\", strPropAB2CDwDefaults.getProperty(\"D\"));\n    strPropAB2CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        748.0,
        752.0,
        755.0,
        758.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromTopLevelToDefault",
        "methodNameAfter": "moveExpValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    objProp2.put(\"R\", objProp2wDefaults.get(\"R\"));\n    objProp2wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromTopLevelToDefault",
      "methodNameAfter": "moveExpValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromTopLevelToDefault_31e7e03410d6d54265bc13d831267ad6f7ae83a4_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromTopLevelToDefault",
    "beforeCommit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        748.0,
        752.0,
        755.0,
        758.0
      ],
      "commit": "31e7e03410d6d54265bc13d831267ad6f7ae83a4",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    objProp2.put(\"R\", objProp2wDefaults.get(\"R\"));\n    objProp2wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        529.0,
        531.0,
        535.0,
        539.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromTopLevelToDefault",
        "methodNameAfter": "moveExpValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    strPropAB2.put(\"D\", strPropAB2CDwDefaults.getProperty(\"D\"));\n    strPropAB2CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromTopLevelToDefault",
      "methodNameAfter": "moveExpValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromTopLevelToDefault_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromTopLevelToDefault",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        529.0,
        531.0,
        535.0,
        539.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    strPropAB2.put(\"D\", strPropAB2CDwDefaults.getProperty(\"D\"));\n    strPropAB2CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        748.0,
        752.0,
        755.0,
        758.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromTopLevelToDefault",
        "methodNameAfter": "moveExpValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    objProp2.put(\"R\", objProp2wDefaults.get(\"R\"));\n    objProp2wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromTopLevelToDefault",
      "methodNameAfter": "moveExpValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromTopLevelToDefault_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromTopLevelToDefault",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        748.0,
        752.0,
        755.0,
        758.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    objProp2.put(\"R\", objProp2wDefaults.get(\"R\"));\n    objProp2wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        529.0,
        531.0,
        535.0,
        539.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromTopLevelToDefault",
        "methodNameAfter": "moveExpValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    strPropAB2.put(\"D\", strPropAB2CDwDefaults.getProperty(\"D\"));\n    strPropAB2CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromTopLevelToDefault",
      "methodNameAfter": "moveExpValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "moveExpValueFromTopLevelToDefault_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/testkit/assertion/PropertiesAssertTests.java",
    "methodName": "moveExpValueFromTopLevelToDefault",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        529.0,
        531.0,
        535.0,
        539.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    strPropAB2.put(\"D\", strPropAB2CDwDefaults.getProperty(\"D\"));\n    strPropAB2CDwDefaults.remove(\"D\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n        new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n    }).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e {\n    new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults);\n}).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        748.0,
        752.0,
        755.0,
        758.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "moveExpValueFromTopLevelToDefault",
        "methodNameAfter": "moveExpValueFromTopLevelToDefault",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
          "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
          "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "moveExpValueFromTopLevelToDefault[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Move exp value from top level to default\")\nvoid moveExpValueFromTopLevelToDefault() {\n    objProp2.put(\"R\", objProp2wDefaults.get(\"R\"));\n    objProp2wDefaults.remove(\"R\");\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class);\n    new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults);\n}",
      "assertion_type": "new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class), new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "moveExpValueFromTopLevelToDefault",
      "methodNameAfter": "moveExpValueFromTopLevelToDefault",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).withFailMessage(\"\u0027Effective\u0027 should treat object values as null\").isEffectivelyEqualsTo(objProp2wDefaults)",
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e new \u003corg.junitpioneer.testkit.assertion.objProp1wDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.objProp2wDefaults)).isInstanceOf(java.lang.AssertionError.class)",
        "Added: new org.junitpioneer.testkit.assertion.PropertiesAssert(objProp1wDefaults).isNotStrictlyEqualTo(objProp2wDefaults)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isNotEffectivelyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e { new \u003corg.junitpioneer.testkit.assertion.strPropAB1CDwDefaults\u003eorg.junitpioneer.testkit.assertion.PropertiesAssert().isStrictlyEqualTo(org.junitpioneer.testkit.assertion.strPropAB2CDwDefaults); }).isInstanceOf(java.lang.AssertionError.class)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isEffectivelyEqualsTo(strPropAB2CDwDefaults)",
        "Removed: new org.junitpioneer.testkit.assertion.PropertiesAssert(strPropAB1CDwDefaults).isNotStrictlyEqualTo(strPropAB2CDwDefaults)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        41.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.assertj.core.api.Assertions.fail(\"fails\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"fails\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        67.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: // fails test with assertion org.assertj.core.api.Assertions.assertThat(false).isTrue()",
          "Removed: org.assertj.core.api.Assertions.fail(\"fails\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fails test with assertion\n    org.assertj.core.api.Assertions.assertThat(false).isTrue();\n}",
      "assertion_type": "// fails test with assertion\norg.assertj.core.api.Assertions.assertThat(false).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: // fails test with assertion org.assertj.core.api.Assertions.assertThat(false).isTrue()",
        "Removed: org.assertj.core.api.Assertions.fail(\"fails\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        67.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fails test with assertion\n    org.assertj.core.api.Assertions.assertThat(false).isTrue();\n}",
      "assertion_type": "// fails test with assertion\norg.assertj.core.api.Assertions.assertThat(false).isTrue()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes, import usage changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: // fails test with assertion org.assertj.core.api.Assertions.assertThat(false).isTrue()",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes, import usage changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: // fails test with assertion org.assertj.core.api.Assertions.assertThat(false).isTrue()",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test2",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        67.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: // fails test with assertion org.junit.jupiter.api.Assertions.assertTrue(false)",
          "New assertion type: assertTrue"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fails test with assertion\n    org.junit.jupiter.api.Assertions.assertTrue(false);\n}",
      "assertion_type": "// fails test with assertion\norg.junit.jupiter.api.Assertions.assertTrue(false)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: // fails test with assertion org.junit.jupiter.api.Assertions.assertTrue(false)",
        "New assertion type: assertTrue"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test2",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        67.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fails test with assertion\n    org.junit.jupiter.api.Assertions.assertTrue(false);\n}",
      "assertion_type": "// fails test with assertion\norg.junit.jupiter.api.Assertions.assertTrue(false)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes, import usage changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: // fails test with assertion org.junit.jupiter.api.Assertions.assertTrue(false)",
          "Assertion type assertTrue count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes, import usage changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: // fails test with assertion org.junit.jupiter.api.Assertions.assertTrue(false)",
        "Assertion type assertTrue count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type assertTrue count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test2",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        65.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: // fails test with assertion org.junit.jupiter.api.Assertions.assertTrue(false)",
          "New assertion type: assertTrue"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fails test with assertion\n    org.junit.jupiter.api.Assertions.assertTrue(false);\n}",
      "assertion_type": "// fails test with assertion\norg.junit.jupiter.api.Assertions.assertTrue(false)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: // fails test with assertion org.junit.jupiter.api.Assertions.assertTrue(false)",
        "New assertion type: assertTrue"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        65.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fails test with assertion\n    org.junit.jupiter.api.Assertions.assertTrue(false);\n}",
      "assertion_type": "// fails test with assertion\norg.junit.jupiter.api.Assertions.assertTrue(false)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes, import usage changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: // fails test with assertion org.junit.jupiter.api.Assertions.assertTrue(false)",
          "Assertion type assertTrue count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes, import usage changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: // fails test with assertion org.junit.jupiter.api.Assertions.assertTrue(false)",
        "Assertion type assertTrue count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type assertTrue count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test3",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_125159303a7165411f24e378273969de0c415754_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test3",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test3",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test3",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test3_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DisableIfTestFailsExtensionDemo.java",
    "methodName": "test3",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test3",
        "methodNameAfter": "test3",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test3[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(3)\nvoid test3() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test3",
      "methodNameAfter": "test3",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        92.0,
        93.0,
        94.0,
        96.0,
        97.0,
        98.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        126.0,
        127.0,
        128.0,
        130.0,
        131.0,
        132.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        126.0,
        127.0,
        128.0,
        130.0,
        131.0,
        132.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        92.0,
        93.0,
        94.0,
        96.0,
        97.0,
        98.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        92.0,
        93.0,
        94.0,
        96.0,
        97.0,
        98.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        126.0,
        127.0,
        128.0,
        130.0,
        131.0,
        132.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_15013fcd9100891f708124cc947e8215096b94fa_to_cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        126.0,
        127.0,
        128.0,
        130.0,
        131.0,
        132.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        80.0,
        81.0,
        82.0,
        84.0,
        85.0,
        86.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldBeRepeatable_cc36ad4e07e51110fb52c2014ed98cbccb252abb_to_cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldBeRepeatable",
    "beforeCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "afterCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        80.0,
        81.0,
        82.0,
        84.0,
        85.0,
        86.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"C\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        114.0,
        115.0,
        116.0,
        118.0,
        119.0,
        120.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 6.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldBeRepeatable",
        "methodNameAfter": "shouldBeRepeatable",
        "diffSummary": "8 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldBeRepeatable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should be repeatable\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"B\", value \u003d \"new B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop D\", value \u003d \"new D\")\nvoid shouldBeRepeatable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldBeRepeatable",
      "methodNameAfter": "shouldBeRepeatable",
      "diffSummary": "8 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isEqualTo(\"new A\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isEqualTo(\"new B\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 8,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "clearSetRestoreShouldBeCombinable_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "clearSetRestoreShouldBeCombinable",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        223.0,
        231.0,
        232.0,
        235.0,
        236.0,
        237.0,
        239.0,
        240.0,
        241.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 9.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "clearSetRestoreShouldBeCombinable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Set, Clear on method w/ direct set Sys Prop\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop E\", value \u003d \"new E\")\nvoid clearSetRestoreShouldBeCombinable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState);\n    // Direct modification - shouldn\u0027t be visible in next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n    java.lang.System.getProperties().put(\"XYZ\", this);\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this);\n    // All the others\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this), // All the others\norg.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        290.0,
        299.0,
        300.0,
        301.0,
        303.0,
        304.0,
        305.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 7.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "clearSetRestoreShouldBeCombinable",
        "methodNameAfter": "clearSetRestoreShouldBeCombinable",
        "diffSummary": "4 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 9 to 7",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this)",
          "Assertion type unknown count changed from 9 to 7"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 11 to 9"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "clearSetRestoreShouldBeCombinable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Set, Clear \u0026 Restore on method w/ direct set Sys Prop\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop E\", value \u003d \"new E\")\n@org.junitpioneer.jupiter.RestoreSystemProperties\nvoid clearSetRestoreShouldBeCombinable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState);\n    // Direct modification - shouldn\u0027t be visible in the next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n    java.lang.System.getProperties().put(\"XYZ\", this);\n    // All the others\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState), // All the others\norg.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "clearSetRestoreShouldBeCombinable",
      "methodNameAfter": "clearSetRestoreShouldBeCombinable",
      "diffSummary": "4 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 9 to 7",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this)",
        "Assertion type unknown count changed from 9 to 7"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 11 to 9"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 9 to 7",
        "Removed",
        "Assertion type unknown count changed from 9 to 7"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "clearSetRestoreShouldBeCombinable_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "clearSetRestoreShouldBeCombinable",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        290.0,
        299.0,
        300.0,
        301.0,
        303.0,
        304.0,
        305.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 7.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "clearSetRestoreShouldBeCombinable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Set, Clear \u0026 Restore on method w/ direct set Sys Prop\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop E\", value \u003d \"new E\")\n@org.junitpioneer.jupiter.RestoreSystemProperties\nvoid clearSetRestoreShouldBeCombinable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState);\n    // Direct modification - shouldn\u0027t be visible in the next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n    java.lang.System.getProperties().put(\"XYZ\", this);\n    // All the others\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState), // All the others\norg.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        223.0,
        231.0,
        232.0,
        235.0,
        236.0,
        237.0,
        239.0,
        240.0,
        241.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 9.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "clearSetRestoreShouldBeCombinable",
        "methodNameAfter": "clearSetRestoreShouldBeCombinable",
        "diffSummary": "4 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 7 to 9",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\")",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this)",
          "Assertion type unknown count changed from 7 to 9"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 9 to 11"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "clearSetRestoreShouldBeCombinable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Set, Clear on method w/ direct set Sys Prop\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop E\", value \u003d \"new E\")\nvoid clearSetRestoreShouldBeCombinable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState);\n    // Direct modification - shouldn\u0027t be visible in next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n    java.lang.System.getProperties().put(\"XYZ\", this);\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this);\n    // All the others\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this), // All the others\norg.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "clearSetRestoreShouldBeCombinable",
      "methodNameAfter": "clearSetRestoreShouldBeCombinable",
      "diffSummary": "4 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 7 to 9",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\")",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this)",
        "Assertion type unknown count changed from 7 to 9"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 9 to 11"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 7 to 9",
        "Added",
        "Assertion type unknown count changed from 7 to 9"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "clearSetRestoreShouldBeCombinable_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "clearSetRestoreShouldBeCombinable",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        223.0,
        231.0,
        232.0,
        235.0,
        236.0,
        237.0,
        239.0,
        240.0,
        241.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 9.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "clearSetRestoreShouldBeCombinable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Set, Clear on method w/ direct set Sys Prop\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop E\", value \u003d \"new E\")\nvoid clearSetRestoreShouldBeCombinable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState);\n    // Direct modification - shouldn\u0027t be visible in next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n    java.lang.System.getProperties().put(\"XYZ\", this);\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this);\n    // All the others\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this), // All the others\norg.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        290.0,
        299.0,
        300.0,
        301.0,
        303.0,
        304.0,
        305.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 7.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "clearSetRestoreShouldBeCombinable",
        "methodNameAfter": "clearSetRestoreShouldBeCombinable",
        "diffSummary": "4 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 9 to 7",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this)",
          "Assertion type unknown count changed from 9 to 7"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 11 to 9"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "clearSetRestoreShouldBeCombinable[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Set, Clear \u0026 Restore on method w/ direct set Sys Prop\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"B\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"clear prop E\", value \u003d \"new E\")\n@org.junitpioneer.jupiter.RestoreSystemProperties\nvoid clearSetRestoreShouldBeCombinable() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState);\n    // Direct modification - shouldn\u0027t be visible in the next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n    java.lang.System.getProperties().put(\"XYZ\", this);\n    // All the others\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\");\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).withFailMessage(\"Restore should swap out the Sys Properties instance\").isNotSameAs(initialState), // All the others\norg.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"B\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"C\")).isEqualTo(\"old C\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop D\")).isEqualTo(\"new D\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop E\")).isEqualTo(\"new E\"), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"clear prop F\")).isNull()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "clearSetRestoreShouldBeCombinable",
      "methodNameAfter": "clearSetRestoreShouldBeCombinable",
      "diffSummary": "4 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 9 to 7",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isEqualTo(\"Restore Me\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isSameAs(this)",
        "Assertion type unknown count changed from 9 to 7"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 11 to 9"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 9 to 7",
        "Removed",
        "Assertion type unknown count changed from 9 to 7"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        248.0,
        249.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\n@org.junit.jupiter.api.Order(2)\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        262.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        262.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        312.0,
        313.0,
        314.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "4 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 3",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull()",
          "Assertion type unknown count changed from 1 to 3"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from prior method should restore direct mods\")\n@org.junit.jupiter.api.Order(2)\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "4 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 3",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull()",
        "Assertion type unknown count changed from 1 to 3"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 3",
        "Added",
        "Assertion type unknown count changed from 1 to 3"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        657.0,
        658.0,
        659.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        248.0,
        249.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 3 to 2",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)",
          "Assertion type unknown count changed from 3 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\n@org.junit.jupiter.api.Order(2)\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 3 to 2",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)",
        "Assertion type unknown count changed from 3 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 3 to 2",
        "Removed",
        "Assertion type unknown count changed from 3 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        248.0,
        249.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\n@org.junit.jupiter.api.Order(2)\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        262.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull()",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull()",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "restoreShouldHaveRevertedDirectModification_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "restoreShouldHaveRevertedDirectModification",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        262.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from class should restore direct mods\")\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        312.0,
        313.0,
        314.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
        "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
        "diffSummary": "4 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 3",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()",
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull()",
          "Assertion type unknown count changed from 1 to 3"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "restoreShouldHaveRevertedDirectModification[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Restore from prior method should restore direct mods\")\n@org.junit.jupiter.api.Order(2)\nvoid restoreShouldHaveRevertedDirectModification() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull();\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull(), org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties()).isStrictlyEqualTo(initialState)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "restoreShouldHaveRevertedDirectModification",
      "methodNameAfter": "restoreShouldHaveRevertedDirectModification",
      "diffSummary": "4 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 3",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperties().get(\"XYZ\")).isNull()",
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"Restore\")).isNull()",
        "Assertion type unknown count changed from 1 to 3"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 3",
        "Added",
        "Assertion type unknown count changed from 1 to 3"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameSystemProperty_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameSystemProperty",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        564.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same system property\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameSystemProperty\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
        "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same property\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
      "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameSystemProperty_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameSystemProperty",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same property\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        564.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
        "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same system property\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameSystemProperty\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
      "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameSystemProperty_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameSystemProperty",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        564.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same system property\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameSystemProperty\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
        "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same property\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
      "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameSystemProperty_15013fcd9100891f708124cc947e8215096b94fa_to_cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameSystemProperty",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same property\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        305.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
        "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same system property\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameSystemProperty\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
      "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearAndSetSameSystemProperty_cc36ad4e07e51110fb52c2014ed98cbccb252abb_to_cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearAndSetSameSystemProperty",
    "beforeCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "afterCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        305.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear and set same system property\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearAndSetSameSystemProperty\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
        "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearAndSetSameSystemProperty[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"clearing and setting the same property\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\nvoid shouldFailWhenClearAndSetSameSystemProperty() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearAndSetSameSystemProperty",
      "methodNameAfter": "shouldFailWhenClearAndSetSameSystemProperty",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameSystemPropertyTwice_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearSameSystemPropertyTwice",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        576.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same system property twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0",
          "Control flow \u0027for\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0",
        "Control flow \u0027for\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameSystemPropertyTwice_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearSameSystemPropertyTwice",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        576.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2",
          "Control flow \u0027for\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same system property twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2",
        "Control flow \u0027for\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameSystemPropertyTwice_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearSameSystemPropertyTwice",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        576.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same system property twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0",
          "Control flow \u0027for\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0",
        "Control flow \u0027for\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameSystemPropertyTwice_15013fcd9100891f708124cc947e8215096b94fa_to_cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearSameSystemPropertyTwice",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        317.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2",
          "Control flow \u0027for\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same system property twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2",
        "Control flow \u0027for\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenClearSameSystemPropertyTwice_cc36ad4e07e51110fb52c2014ed98cbccb252abb_to_cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenClearSameSystemPropertyTwice",
    "beforeCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "afterCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        317.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when clear same system property twice\")\n@org.junit.jupiter.api.Disabled((\"This can\u0027t happen at the moment, because Jupiter\u0027s annotation tooling \" + \"deduplicates identical annotations like the ones required for this test: \") + \"https://github.com/junit-team/junit5/issues/2131\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenClearSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0",
          "Control flow \u0027for\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenClearSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\n@org.junitpioneer.jupiter.ClearSystemProperty(key \u003d \"A\")\nvoid shouldFailWhenClearSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenClearSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenClearSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0",
        "Control flow \u0027for\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameSystemPropertyTwice_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenSetSameSystemPropertyTwice",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        584.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same system property twice\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameSystemPropertyTwice_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenSetSameSystemPropertyTwice",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        584.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same system property twice\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameSystemPropertyTwice_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenSetSameSystemPropertyTwice",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        584.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same system property twice\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameSystemPropertyTwice_15013fcd9100891f708124cc947e8215096b94fa_to_cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenSetSameSystemPropertyTwice",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        325.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same system property twice\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldFailWhenSetSameSystemPropertyTwice_cc36ad4e07e51110fb52c2014ed98cbccb252abb_to_cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldFailWhenSetSameSystemPropertyTwice",
    "beforeCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "afterCommit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        325.0
      ],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should fail when set same system property twice\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.SystemPropertyExtensionTests.MethodLevelInitializationFailureTestCases.class, \"shouldFailWhenSetSameSystemPropertyTwice\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "cc36ad4e07e51110fb52c2014ed98cbccb252abb",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
        "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldFailWhenSetSameSystemPropertyTwice[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new A\")\n@org.junitpioneer.jupiter.SetSystemProperty(key \u003d \"A\", value \u003d \"new B\")\nvoid shouldFailWhenSetSameSystemPropertyTwice() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "shouldFailWhenSetSameSystemPropertyTwice",
      "methodNameAfter": "shouldFailWhenSetSameSystemPropertyTwice",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class)",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldInheritInNestedClass_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldInheritInNestedClass",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        678.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    // Shouldn\u0027t be visible in the next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        702.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldInheritInNestedClass",
        "methodNameAfter": "shouldInheritInNestedClass",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull();// Should be restored\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldInheritInNestedClass",
      "methodNameAfter": "shouldInheritInNestedClass",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldInheritInNestedClass_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldInheritInNestedClass",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        702.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull();// Should be restored\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        678.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldInheritInNestedClass",
        "methodNameAfter": "shouldInheritInNestedClass",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    // Shouldn\u0027t be visible in the next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldInheritInNestedClass",
      "methodNameAfter": "shouldInheritInNestedClass",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldInheritInNestedClass_15013fcd9100891f708124cc947e8215096b94fa_to_15013fcd9100891f708124cc947e8215096b94fa",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/SystemPropertyExtensionTests.java",
    "methodName": "shouldInheritInNestedClass",
    "beforeCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "afterCommit": "15013fcd9100891f708124cc947e8215096b94fa",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        678.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull();\n    // Shouldn\u0027t be visible in the next test\n    java.lang.System.setProperty(\"Restore\", \"Restore Me\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        702.0
      ],
      "commit": "15013fcd9100891f708124cc947e8215096b94fa",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldInheritInNestedClass",
        "methodNameAfter": "shouldInheritInNestedClass",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldInheritInNestedClass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Inherit values and restore behavior\")\nvoid shouldInheritInNestedClass() {\n    org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull();// Should be restored\n\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldInheritInNestedClass",
      "methodNameAfter": "shouldInheritInNestedClass",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"RestoreAll\")).isNull()// Should be restored",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.lang.System.getProperty(\"A\")).isNull()"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        34.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        70.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullInput",
        "methodNameAfter": "nullInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if object is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullInput",
      "methodNameAfter": "nullInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        70.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if object is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        34.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullInput",
        "methodNameAfter": "nullInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullInput",
      "methodNameAfter": "nullInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        34.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        70.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullInput",
        "methodNameAfter": "nullInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if object is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullInput",
      "methodNameAfter": "nullInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        70.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if object is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        35.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullInput",
        "methodNameAfter": "nullInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullInput",
      "methodNameAfter": "nullInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullInput_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullInput",
    "beforeCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        35.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        71.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullInput",
        "methodNameAfter": "nullInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if object is null\")\nvoid nullInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullInput",
      "methodNameAfter": "nullInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notNull(null, \"Input must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Input must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "emptyInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "emptyInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        42.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "emptyInput",
        "methodNameAfter": "emptyInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "emptyInput",
      "methodNameAfter": "emptyInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "emptyInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "emptyInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "emptyInput",
        "methodNameAfter": "emptyInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "emptyInput",
      "methodNameAfter": "emptyInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "emptyInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "emptyInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        42.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "emptyInput",
        "methodNameAfter": "emptyInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "emptyInput",
      "methodNameAfter": "emptyInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "emptyInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "emptyInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        42.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "emptyInput",
        "methodNameAfter": "emptyInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "emptyInput",
      "methodNameAfter": "emptyInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "emptyInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "emptyInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "emptyInput",
        "methodNameAfter": "emptyInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "emptyInput",
      "methodNameAfter": "emptyInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "emptyInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "emptyInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        127.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        43.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "emptyInput",
        "methodNameAfter": "emptyInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "emptyInput",
      "methodNameAfter": "emptyInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Set.of(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "emptyInput_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "emptyInput",
    "beforeCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        43.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if string is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        99.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "emptyInput",
        "methodNameAfter": "emptyInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "emptyInput",
      "methodNameAfter": "emptyInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notBlank(\"\", \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "emptyInput_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "emptyInput",
    "beforeCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        99.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        129.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "emptyInput",
        "methodNameAfter": "emptyInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "emptyInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is empty\")\nvoid emptyInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "emptyInput",
      "methodNameAfter": "emptyInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Collection must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must be provided\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(java.util.Collections.emptySet(), \"Value must be provided\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must be provided\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        58.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return string if it is not blank\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return object if it is not null\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return object if it is not null\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        107.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d java.util.List.of(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        107.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d java.util.List.of(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        136.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d java.util.List.of(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        136.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d java.util.List.of(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        58.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return string if it is not blank\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        58.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return string if it is not blank\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return object if it is not null\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return object if it is not null\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        107.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d java.util.List.of(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        107.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d java.util.List.of(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        136.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d java.util.List.of(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        136.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d java.util.List.of(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        59.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return string if it is not blank\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        59.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return string if it is not blank\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        79.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return object if it is not null\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notBlank(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        79.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return object if it is not null\")\nvoid validInput() {\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        109.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d new java.util.ArrayList\u003c\u003e();\n    collection.add(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notNull(\"testValue\", \"Value must be provided\")).isEqualTo(\"testValue\")"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "validInput_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "validInput",
    "beforeCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        109.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d new java.util.ArrayList\u003c\u003e();\n    collection.add(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        140.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "validInput",
        "methodNameAfter": "validInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "validInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should return collection if it is not empty\")\nvoid validInput() {\n    java.util.List\u003cjava.lang.String\u003e collection \u003d new java.util.ArrayList\u003c\u003e();\n    collection.add(\"testValue\");\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "validInput",
      "methodNameAfter": "validInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Collection must be provided\")).isSameAs(collection)",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.internal.PioneerPreconditions.notEmpty(collection, \"Value must be provided\")).isSameAs(collection)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullCollectionInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullCollectionInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        90.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullCollectionInput",
        "methodNameAfter": "nullCollectionInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullCollectionInput",
      "methodNameAfter": "nullCollectionInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullCollectionInput_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullCollectionInput",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        90.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullCollectionInput",
        "methodNameAfter": "nullCollectionInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullCollectionInput",
      "methodNameAfter": "nullCollectionInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullCollectionInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_5c255d9961d657beb18c4509eca61bacdfefd319",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullCollectionInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        90.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullCollectionInput",
        "methodNameAfter": "nullCollectionInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullCollectionInput",
      "methodNameAfter": "nullCollectionInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullCollectionInput_5c255d9961d657beb18c4509eca61bacdfefd319_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullCollectionInput",
    "beforeCommit": "5c255d9961d657beb18c4509eca61bacdfefd319",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0
      ],
      "commit": "5c255d9961d657beb18c4509eca61bacdfefd319",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        91.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullCollectionInput",
        "methodNameAfter": "nullCollectionInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullCollectionInput",
      "methodNameAfter": "nullCollectionInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nullCollectionInput_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1_to_1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerPreconditionsTests.java",
    "methodName": "nullCollectionInput",
    "beforeCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "afterCommit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        91.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        121.0
      ],
      "commit": "1f0739520226a5e5d41d8d18d31b8a23cddfdfd1",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nullCollectionInput",
        "methodNameAfter": "nullCollectionInput",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")",
          "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nullCollectionInput[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"should throw violation exception if collection is null\")\nvoid nullCollectionInput() {\n    org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nullCollectionInput",
      "methodNameAfter": "nullCollectionInput",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Collection must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Collection must not be null\")",
        "Removed: org.assertj.core.api.Assertions.assertThatThrownBy(() -\u003e org.junitpioneer.internal.PioneerPreconditions.notEmpty(null, \"Value must not be null\")).isInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessage(\"Value must not be null\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenCreateIsCalled_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenCreateIsCalled",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        45.0,
        46.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        605.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenCreateIsCalled",
        "methodNameAfter": "thenCreateIsCalled",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenCreateIsCalled",
      "methodNameAfter": "thenCreateIsCalled",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenCreateIsCalled_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenCreateIsCalled",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        605.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        44.0,
        45.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenCreateIsCalled",
        "methodNameAfter": "thenCreateIsCalled",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenCreateIsCalled",
      "methodNameAfter": "thenCreateIsCalled",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenCreateIsCalled_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenCreateIsCalled",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        44.0,
        45.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        604.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenCreateIsCalled",
        "methodNameAfter": "thenCreateIsCalled",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenCreateIsCalled",
      "methodNameAfter": "thenCreateIsCalled",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenCreateIsCalled_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenCreateIsCalled",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        604.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        43.0,
        44.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenCreateIsCalled",
        "methodNameAfter": "thenCreateIsCalled",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenCreateIsCalled",
      "methodNameAfter": "thenCreateIsCalled",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenCreateIsCalled_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenCreateIsCalled",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        43.0,
        44.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n    org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest(), org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        597.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenCreateIsCalled",
        "methodNameAfter": "thenCreateIsCalled",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenCreateIsCalled[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then ::create is called\")\n@org.junit.jupiter.api.Test\nvoid thenCreateIsCalled() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2TestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenCreateIsCalled",
      "methodNameAfter": "thenCreateIsCalled",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.assertj.core.api.Assertions.assertThat(org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory1.createCalls).isEqualTo(1)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        58.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        120.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        120.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        141.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        141.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        617.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        617.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        679.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        679.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        700.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        700.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        57.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        57.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        119.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        140.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        140.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        616.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        616.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        678.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        678.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        699.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        699.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        56.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        56.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        115.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        115.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        136.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        136.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        609.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        609.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCreateTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        668.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to create a resource from `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRFCreateResourceFactory.class.getTypeName()) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CREATE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsWrappedAndPropagated_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsWrappedAndPropagated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        668.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is wrapped and propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRGetTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        689.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
        "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsWrappedAndPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsWrappedAndPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsWrappedAndPropagated",
      "methodNameAfter": "thenThrownExceptionIsWrappedAndPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage((\"Unable to get the contents of the resource created by `\" + org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnRGetResourceFactory.class) + \"`\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_R_GET_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsPropagated_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsPropagated",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        79.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        638.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsPropagated",
        "methodNameAfter": "thenThrownExceptionIsPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsPropagated",
      "methodNameAfter": "thenThrownExceptionIsPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsPropagated_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsPropagated",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        638.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsPropagated",
        "methodNameAfter": "thenThrownExceptionIsPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsPropagated",
      "methodNameAfter": "thenThrownExceptionIsPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsPropagated_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsPropagated",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        637.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsPropagated",
        "methodNameAfter": "thenThrownExceptionIsPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsPropagated",
      "methodNameAfter": "thenThrownExceptionIsPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsPropagated_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsPropagated",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        637.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        77.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsPropagated",
        "methodNameAfter": "thenThrownExceptionIsPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsPropagated",
      "methodNameAfter": "thenThrownExceptionIsPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.JUnitException.class).hasMessage(\"Failed to close extension context\").cause().isInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenThrownExceptionIsPropagated_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenThrownExceptionIsPropagated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        77.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnNewRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        630.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenThrownExceptionIsPropagated",
        "methodNameAfter": "thenThrownExceptionIsPropagated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenThrownExceptionIsPropagated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then the thrown exception is propagated\")\n@org.junit.jupiter.api.Test\nvoid thenThrownExceptionIsPropagated() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.ThrowOnSharedRFCloseTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(org.junitpioneer.jupiter.resource.ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenThrownExceptionIsPropagated",
      "methodNameAfter": "thenThrownExceptionIsPropagated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getClass()).hasMessage(ResourcesTests.EXPECTED_THROW_ON_RF_CLOSE_EXCEPTION.getMessage())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        99.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        161.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        161.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        178.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithMismatchedParamsTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        178.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithMismatchedParamsTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        658.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        658.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        720.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        720.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        160.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        160.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        177.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithMismatchedParamsTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        177.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithMismatchedParamsTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        657.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        657.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        719.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        719.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        94.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        94.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        153.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        153.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.NewRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        170.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithMismatchedParamsTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        170.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithMismatchedParamsTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        647.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\"Parameter.*is not of the correct target type.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenProperExceptionIsThrown_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenProperExceptionIsThrown",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        647.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRFCreateReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        706.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenProperExceptionIsThrown",
        "methodNameAfter": "thenProperExceptionIsThrown",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenProperExceptionIsThrown[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then a proper exception is thrown\")\n@org.junit.jupiter.api.Test\nvoid thenProperExceptionIsThrown() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SharedRGetReturnsNullTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenProperExceptionIsThrown",
      "methodNameAfter": "thenProperExceptionIsThrown",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*resource.*was null.*\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessageMatching(\".*`Resource` instance.*was null.*\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.RGetReturnsNullResourceFactory.class)\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.RGetReturnsNullResourceFactory.class)\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        403.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Object"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.Object to java.lang.String",
          "Parameter 0 renamed from object to param",
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Object"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.Object to java.lang.String",
        "Parameter 0 renamed from object to param",
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        403.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from first to second"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from first to second"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        559.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: java.lang.Number",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Number",
          "Parameter 0 renamed from second to number",
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: java.lang.Number",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Number",
        "Parameter 0 renamed from second to number",
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        559.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Number"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Number"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 3,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.RGetReturnsNullResourceFactory.class)\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.RGetReturnsNullResourceFactory.class)\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        402.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Object"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.Object to java.lang.String",
          "Parameter 0 renamed from object to param",
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Object"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.Object to java.lang.String",
        "Parameter 0 renamed from object to param",
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        402.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from first to second"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from first to second"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        558.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: java.lang.Number",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Number",
          "Parameter 0 renamed from second to number",
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: java.lang.Number",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Number",
        "Parameter 0 renamed from second to number",
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        558.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Number"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Number"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 3,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.RGetReturnsNullResourceFactory.class)\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.RGetReturnsNullResourceFactory.class)\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        395.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Object"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.Object to java.lang.String",
          "Parameter 0 renamed from object to param",
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Object"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.Object to java.lang.String",
        "Parameter 0 renamed from object to param",
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        395.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\n@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String param) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from first to second"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from first to second"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-2\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        551.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: java.lang.Number",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Number",
          "Parameter 0 renamed from second to number",
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: java.lang.Number",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Number",
        "Parameter 0 renamed from second to number",
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        551.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.New(org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class)\njava.lang.Number number) {\n    org.assertj.core.api.Assertions.fail(\"We should not get this far.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"We should not get this far.\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, 3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Number"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, 3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"We should not get this far.\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Number"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String first, @org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "signature modified, import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory2.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "signature modified, import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 3,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenItThrowsAnException_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenItThrowsAnException",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        429.0,
        439.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SingleTestMethodWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        496.0,
        508.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenItThrowsAnException",
        "methodNameAfter": "thenItThrowsAnException",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentScopesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(java.util.List.of(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases1.class, org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases2.class));\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\")), org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenItThrowsAnException",
      "methodNameAfter": "thenItThrowsAnException",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenItThrowsAnException_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenItThrowsAnException",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        496.0,
        508.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentScopesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(java.util.List.of(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases1.class, org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases2.class));\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\")), org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        576.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenItThrowsAnException",
        "methodNameAfter": "thenItThrowsAnException",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithTwoParamsWithSameSharedAnnotationTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenItThrowsAnException",
      "methodNameAfter": "thenItThrowsAnException",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenItThrowsAnException_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenItThrowsAnException",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        576.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithTwoParamsWithSameSharedAnnotationTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        428.0,
        438.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenItThrowsAnException",
        "methodNameAfter": "thenItThrowsAnException",
        "diffSummary": "4 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 4"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SingleTestMethodWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenItThrowsAnException",
      "methodNameAfter": "thenItThrowsAnException",
      "diffSummary": "4 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 4"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenItThrowsAnException_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenItThrowsAnException",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        428.0,
        438.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SingleTestMethodWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        495.0,
        507.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenItThrowsAnException",
        "methodNameAfter": "thenItThrowsAnException",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentScopesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(java.util.List.of(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases1.class, org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases2.class));\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\")), org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenItThrowsAnException",
      "methodNameAfter": "thenItThrowsAnException",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenItThrowsAnException_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenItThrowsAnException",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        495.0,
        507.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentScopesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(java.util.List.of(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases1.class, org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases2.class));\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\")), org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        575.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenItThrowsAnException",
        "methodNameAfter": "thenItThrowsAnException",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithTwoParamsWithSameSharedAnnotationTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenItThrowsAnException",
      "methodNameAfter": "thenItThrowsAnException",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenItThrowsAnException_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenItThrowsAnException",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        575.0
      ],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithTwoParamsWithSameSharedAnnotationTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        421.0,
        431.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenItThrowsAnException",
        "methodNameAfter": "thenItThrowsAnException",
        "diffSummary": "4 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 4"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SingleTestMethodWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenItThrowsAnException",
      "methodNameAfter": "thenItThrowsAnException",
      "diffSummary": "4 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 4"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenItThrowsAnException_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenItThrowsAnException",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        421.0,
        431.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.SingleTestMethodWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentTypesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        488.0,
        500.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "thenItThrowsAnException",
        "methodNameAfter": "thenItThrowsAnException",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentScopesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(java.util.List.of(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases1.class, org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases2.class));\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\")), org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "thenItThrowsAnException",
      "methodNameAfter": "thenItThrowsAnException",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with the \" + \"name \\\"%s\\\" but with different factory classes\", \"some-name\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "thenItThrowsAnException_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "thenItThrowsAnException",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        488.0,
        500.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TwoTestMethodsWithParamsWithSharedSameNameButDifferentScopesTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"));\n    results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClasses(java.util.List.of(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases1.class, org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithParamsWithSharedSameNameButDifferentScopesTestCases2.class));\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\")), org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        568.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "thenItThrowsAnException",
        "methodNameAfter": "thenItThrowsAnException",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "thenItThrowsAnException[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.DisplayName(\"then it throws an exception\")\n@org.junit.jupiter.api.Test\nvoid thenItThrowsAnException() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestClass(org.junitpioneer.jupiter.resource.ResourcesTests.TestMethodWithTwoParamsWithSameSharedAnnotationTestCases.class);\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "thenItThrowsAnException",
      "methodNameAfter": "thenItThrowsAnException",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(\"A test method has 2 parameters annotated with @Shared with the same \" + \"factory type and name; this is redundant, so it is not allowed\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-1\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ParameterResolutionException.class).hasMessage(java.lang.String.format(\"Two or more parameters are annotated with @Shared annotations with \" + \"the name \\\"%s\\\" but with different scopes\", \"some-name-2\"))",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_1_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_1",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_1",
        "methodNameAfter": "test_1",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from foo to first"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_1",
      "methodNameAfter": "test_1",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from foo to first"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_1_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_1",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_1",
        "methodNameAfter": "test_1",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Object",
          "Parameter 0 renamed from first to object"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_1",
      "methodNameAfter": "test_1",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Object",
        "Parameter 0 renamed from first to object"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_1_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_1",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_1",
        "methodNameAfter": "test_1",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Object"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.Object to java.lang.String",
          "Parameter 0 renamed from object to foo"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_1",
      "methodNameAfter": "test_1",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Object"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.Object to java.lang.String",
        "Parameter 0 renamed from object to foo"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_1_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_1",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_1",
        "methodNameAfter": "test_1",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from foo to first"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_1",
      "methodNameAfter": "test_1",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from foo to first"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_1_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_1",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_1",
        "methodNameAfter": "test_1",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Object",
          "Parameter 0 renamed from first to object"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_1",
      "methodNameAfter": "test_1",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Object",
        "Parameter 0 renamed from first to object"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_1_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_1",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_1",
        "methodNameAfter": "test_1",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Object"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.Object to java.lang.String",
          "Parameter 0 renamed from object to foo"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_1",
      "methodNameAfter": "test_1",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Object"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.Object to java.lang.String",
        "Parameter 0 renamed from object to foo"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_1_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name\")\njava.lang.String foo) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_1",
        "methodNameAfter": "test_1",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from foo to first"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_1",
      "methodNameAfter": "test_1",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from foo to first"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_1_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.GLOBAL)\njava.lang.String first) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_1",
        "methodNameAfter": "test_1",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Object",
          "Parameter 0 renamed from first to object"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_1[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_1(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_1",
      "methodNameAfter": "test_1",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Object",
        "Parameter 0 renamed from first to object"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_2_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_2",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_2",
        "methodNameAfter": "test_2",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from bar to second"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_2",
      "methodNameAfter": "test_2",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from bar to second"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_2_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_2",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_2",
        "methodNameAfter": "test_2",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Object",
          "Parameter 0 renamed from second to object"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_2",
      "methodNameAfter": "test_2",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Object",
        "Parameter 0 renamed from second to object"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_2_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_2",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_2",
        "methodNameAfter": "test_2",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Object"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.Object to java.lang.String",
          "Parameter 0 renamed from object to bar"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_2",
      "methodNameAfter": "test_2",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Object"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.Object to java.lang.String",
        "Parameter 0 renamed from object to bar"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_2_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_2",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_2",
        "methodNameAfter": "test_2",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from bar to second"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_2",
      "methodNameAfter": "test_2",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from bar to second"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_2_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_2",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_2",
        "methodNameAfter": "test_2",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Object",
          "Parameter 0 renamed from second to object"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_2",
      "methodNameAfter": "test_2",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Object",
        "Parameter 0 renamed from second to object"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_2_3b2ae595df32269700bdb62a994bf03410ca9b9e_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_2",
    "beforeCommit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "3b2ae595df32269700bdb62a994bf03410ca9b9e",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_2",
        "methodNameAfter": "test_2",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.String",
          "Removed usage: java.lang.Object"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.Object to java.lang.String",
          "Parameter 0 renamed from object to bar"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_2",
      "methodNameAfter": "test_2",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.String",
        "Removed usage: java.lang.Object"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.Object to java.lang.String",
        "Parameter 0 renamed from object to bar"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.OtherResourceFactory.class, name \u003d \"some-name\")\njava.lang.String bar) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_2",
        "methodNameAfter": "test_2",
        "diffSummary": "signature modified, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Parameter 0 renamed from bar to second"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_2",
      "methodNameAfter": "test_2",
      "diffSummary": "signature modified, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Parameter 0 renamed from bar to second"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/resource/ResourcesTests.java",
    "methodName": "test_2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.DummyResourceFactory.class, name \u003d \"some-name-1\", scope \u003d Shared.Scope.SOURCE_FILE)\njava.lang.String second) {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "test_2",
        "methodNameAfter": "test_2",
        "diffSummary": "signature modified, import usage changes, 2 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.Object",
          "Removed usage: java.lang.String"
        ],
        "logicChanges": [
          "Parameter 0 type changed from java.lang.String to java.lang.Object",
          "Parameter 0 renamed from second to object"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "test_2[@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@java.lang.SuppressWarnings(\"unused\")\nvoid test_2(@org.junitpioneer.jupiter.resource.Shared(factory \u003d org.junitpioneer.jupiter.resource.ResourcesTests.CountingResourceFactory3.class, name \u003d \"some-name\")\njava.lang.Object object) {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "test_2",
      "methodNameAfter": "test_2",
      "diffSummary": "signature modified, import usage changes, 2 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.Object",
        "Removed usage: java.lang.String"
      ],
      "logicChanges": [
        "Parameter 0 type changed from java.lang.String to java.lang.Object",
        "Parameter 0 renamed from second to object"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 4,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "catchesOut_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java",
    "methodName": "catchesOut",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        63.0,
        66.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "catchesOut[org.junitpioneer.jupiter.StdOut out]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo\n@org.junit.jupiter.api.DisplayName(\"catches the output on the standard out\")\nvoid catchesOut(org.junitpioneer.jupiter.StdOut out) {\n    app.write();\n    org.assertj.core.api.Assertions.assertThat(out.capturedString()).isEqualTo(org.junitpioneer.jupiter.StdIoExtensionTests.linesAsString(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\"));\n    org.assertj.core.api.Assertions.assertThat(out.capturedLines()).containsExactly(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(out.capturedString()).isEqualTo(org.junitpioneer.jupiter.StdIoExtensionTests.linesAsString(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\")), org.assertj.core.api.Assertions.assertThat(out.capturedLines()).containsExactly(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        63.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "catchesOut",
        "methodNameAfter": "catchesOut",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.assertj.core.api.Assertions.assertThat(out.capturedString()).isEqualTo(StdIoExtensionTests.linesAsString(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\"))",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "catchesOut[org.junitpioneer.jupiter.StdOut out]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo\n@org.junit.jupiter.api.DisplayName(\"catches the output on the standard out as lines\")\nvoid catchesOut(org.junitpioneer.jupiter.StdOut out) {\n    app.write();\n    org.assertj.core.api.Assertions.assertThat(out.capturedLines()).containsExactly(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(out.capturedLines()).containsExactly(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "catchesOut",
      "methodNameAfter": "catchesOut",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.assertj.core.api.Assertions.assertThat(out.capturedString()).isEqualTo(StdIoExtensionTests.linesAsString(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\"))",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "catchesErr_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java",
    "methodName": "catchesErr",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        136.0,
        139.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "catchesErr[org.junitpioneer.jupiter.StdErr err]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo\n@org.junit.jupiter.api.DisplayName(\"catches the output on the standard err\")\nvoid catchesErr(org.junitpioneer.jupiter.StdErr err) {\n    app.writeErr();\n    org.assertj.core.api.Assertions.assertThat(err.capturedString()).isEqualTo(org.junitpioneer.jupiter.StdIoExtensionTests.linesAsString(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\"));\n    org.assertj.core.api.Assertions.assertThat(err.capturedLines()).containsExactly(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(err.capturedString()).isEqualTo(org.junitpioneer.jupiter.StdIoExtensionTests.linesAsString(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\")), org.assertj.core.api.Assertions.assertThat(err.capturedLines()).containsExactly(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        85.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "catchesErr",
        "methodNameAfter": "catchesErr",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.assertj.core.api.Assertions.assertThat(err.capturedString()).isEqualTo(StdIoExtensionTests.linesAsString(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\"))",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "catchesErr[org.junitpioneer.jupiter.StdErr err]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo\n@org.junit.jupiter.api.DisplayName(\"catches the output on the standard err as lines\")\nvoid catchesErr(org.junitpioneer.jupiter.StdErr err) {\n    app.writeErr();\n    org.assertj.core.api.Assertions.assertThat(err.capturedLines()).containsExactly(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(err.capturedLines()).containsExactly(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "catchesErr",
      "methodNameAfter": "catchesErr",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.assertj.core.api.Assertions.assertThat(err.capturedString()).isEqualTo(StdIoExtensionTests.linesAsString(\"Lo! in the orient when the gracious light\", \"Lifts up his burning head, each under eye\"))",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "catchesIn_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java",
    "methodName": "catchesIn",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        150.0,
        153.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "catchesIn[org.junitpioneer.jupiter.StdIn in]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo({ \"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\" })\n@org.junit.jupiter.api.DisplayName(\"catches the input from the standard in\")\nvoid catchesIn(org.junitpioneer.jupiter.StdIn in) throws java.io.IOException {\n    app.read();\n    org.assertj.core.api.Assertions.assertThat(in.capturedString()).isEqualTo(org.junitpioneer.jupiter.StdIoExtensionTests.linesAsString(\"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\"));\n    org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(in.capturedString()).isEqualTo(org.junitpioneer.jupiter.StdIoExtensionTests.linesAsString(\"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\")), org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        96.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "catchesIn",
        "methodNameAfter": "catchesIn",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.assertj.core.api.Assertions.assertThat(in.capturedString()).isEqualTo(StdIoExtensionTests.linesAsString(\"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\"))",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "catchesIn[org.junitpioneer.jupiter.StdIn in]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo({ \"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\" })\n@org.junit.jupiter.api.DisplayName(\"catches the input from the standard in\")\nvoid catchesIn(org.junitpioneer.jupiter.StdIn in) throws java.io.IOException {\n    app.read();\n    org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "catchesIn",
      "methodNameAfter": "catchesIn",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.assertj.core.api.Assertions.assertThat(in.capturedString()).isEqualTo(StdIoExtensionTests.linesAsString(\"Doth homage to his new-appearing sight\", \"Serving with looks his sacred majesty;\"))",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "nothingAvailableWhenEmpty_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java",
    "methodName": "nothingAvailableWhenEmpty",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        207.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "nothingAvailableWhenEmpty[org.junitpioneer.jupiter.StdIn in]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo(\"\")\n@org.junit.jupiter.api.DisplayName(\"for empty input, available() returns 0 available bytes\")\nvoid nothingAvailableWhenEmpty(org.junitpioneer.jupiter.StdIn in) throws java.io.IOException {\n    org.assertj.core.api.Assertions.assertThat(in.available()).isEqualTo(org.junitpioneer.jupiter.StdIoExtensionTests.linesAsString(\"\").length());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(in.available()).isEqualTo(org.junitpioneer.jupiter.StdIoExtensionTests.linesAsString(\"\").length())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        134.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "nothingAvailableWhenEmpty",
        "methodNameAfter": "nothingAvailableWhenEmpty",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(in.available()).isEqualTo(0)",
          "Removed: org.assertj.core.api.Assertions.assertThat(in.available()).isEqualTo(StdIoExtensionTests.linesAsString(\"\").length())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "nothingAvailableWhenEmpty[org.junitpioneer.jupiter.StdIn in]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo(\"\")\n@org.junit.jupiter.api.DisplayName(\"for empty input, available() returns 0 available bytes\")\nvoid nothingAvailableWhenEmpty(org.junitpioneer.jupiter.StdIn in) throws java.io.IOException {\n    org.assertj.core.api.Assertions.assertThat(in.available()).isEqualTo(0);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(in.available()).isEqualTo(0)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "nothingAvailableWhenEmpty",
      "methodNameAfter": "nothingAvailableWhenEmpty",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(in.available()).isEqualTo(0)",
        "Removed: org.assertj.core.api.Assertions.assertThat(in.available()).isEqualTo(StdIoExtensionTests.linesAsString(\"\").length())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "catchesInWithoutParameter_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java",
    "methodName": "catchesInWithoutParameter",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        230.0
      ],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "catchesInWithoutParameter[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo({ \"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\", \"The eyes, \u0027fore duteous, now converted are\" })\n@org.junit.jupiter.api.DisplayName(\"catches the input from the standard in, even without StdIn parameter\")\nvoid catchesInWithoutParameter() throws java.io.IOException {\n    app.read();\n    org.assertj.core.api.Assertions.assertThat(app.lines).containsExactly(\"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\", \"The eyes, \u0027fore duteous, now converted are\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(app.lines).containsExactly(\"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\", \"The eyes, \u0027fore duteous, now converted are\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        157.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "catchesInWithoutParameter",
        "methodNameAfter": "catchesInWithoutParameter",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(app.lines).containsExactly(\"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(app.lines).containsExactly(\"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\", \"The eyes, \u0027fore duteous, now converted are\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "catchesInWithoutParameter[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo({ \"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\", \"The eyes, \u0027fore duteous, now converted are\" })\n@org.junit.jupiter.api.DisplayName(\"catches the input from the standard in, even without StdIn parameter\")\nvoid catchesInWithoutParameter() throws java.io.IOException {\n    app.read();\n    org.assertj.core.api.Assertions.assertThat(app.lines).containsExactly(\"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(app.lines).containsExactly(\"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "catchesInWithoutParameter",
      "methodNameAfter": "catchesInWithoutParameter",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(app.lines).containsExactly(\"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(app.lines).containsExactly(\"But when from highmost pitch, with weary car,\", \"Like feeble age, he reeleth from the day,\", \"The eyes, \u0027fore duteous, now converted are\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "catchesNothing_299a87470caca40cd8d9cd20fafe177cb1c256a3_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java",
    "methodName": "catchesNothing",
    "beforeCommit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "299a87470caca40cd8d9cd20fafe177cb1c256a3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "catchesNothing[org.junitpioneer.jupiter.StdIn in, org.junit.jupiter.api.TestReporter reporter]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo(\"\")\n@org.junit.jupiter.api.DisplayName(\"does not catch unrelated parameters\")\nvoid catchesNothing(org.junitpioneer.jupiter.StdIn in, org.junit.jupiter.api.TestReporter reporter) {\n    // if the extension supports `TestReporter`, Jupiter will throw:\n    // ParameterResolutionException: Discovered multiple competing ParameterResolvers\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        105.0,
        106.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "catchesNothing",
        "methodNameAfter": "catchesNothing",
        "diffSummary": "signature modified, 4 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 2",
          "Added: org.assertj.core.api.Assertions.assertThatCode(app::read).doesNotThrowAnyException()",
          "Added: org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"\")",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "Removed usage: org.junit.jupiter.api.TestReporter"
        ],
        "logicChanges": [
          "Parameter count changed from 2 to 1",
          "Control flow \u0027if\u0027 usage changed from 1 to 0",
          "Control flow \u0027catch\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "catchesNothing[org.junitpioneer.jupiter.StdIn in]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo(\"\")\n@org.junit.jupiter.api.DisplayName(\"catches empty input and reads nothing\")\nvoid catchesNothing(org.junitpioneer.jupiter.StdIn in) {\n    org.assertj.core.api.Assertions.assertThatCode(app::read).doesNotThrowAnyException();\n    org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatCode(app::read).doesNotThrowAnyException(), org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"\")"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "catchesNothing",
      "methodNameAfter": "catchesNothing",
      "diffSummary": "signature modified, 4 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 2",
        "Added: org.assertj.core.api.Assertions.assertThatCode(app::read).doesNotThrowAnyException()",
        "Added: org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"\")",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "Removed usage: org.junit.jupiter.api.TestReporter"
      ],
      "logicChanges": [
        "Parameter count changed from 2 to 1",
        "Control flow \u0027if\u0027 usage changed from 1 to 0",
        "Control flow \u0027catch\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 0 to 2",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "catchesNothing_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java",
    "methodName": "catchesNothing",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        105.0,
        106.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "catchesNothing[org.junitpioneer.jupiter.StdIn in]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo(\"\")\n@org.junit.jupiter.api.DisplayName(\"catches empty input and reads nothing\")\nvoid catchesNothing(org.junitpioneer.jupiter.StdIn in) {\n    org.assertj.core.api.Assertions.assertThatCode(app::read).doesNotThrowAnyException();\n    org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThatCode(app::read).doesNotThrowAnyException(), org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "signature change",
        "refactoringType": "SIGNATURE_CHANGE",
        "methodNameBefore": "catchesNothing",
        "methodNameAfter": "catchesNothing",
        "diffSummary": "signature modified, 4 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThatCode(app::read).doesNotThrowAnyException()",
          "Removed: org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"\")",
          "Assertion type unknown count changed from 2 to 0"
        ],
        "importChanges": [
          "New usage: org.junit.jupiter.api.TestReporter"
        ],
        "logicChanges": [
          "Parameter count changed from 1 to 2",
          "Control flow \u0027if\u0027 usage changed from 0 to 1",
          "Control flow \u0027catch\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": true,
        "metadata": {}
      },
      "method_signature": "catchesNothing[org.junitpioneer.jupiter.StdIn in, org.junit.jupiter.api.TestReporter reporter]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.StdIo(\"\")\n@org.junit.jupiter.api.DisplayName(\"does not catch unrelated parameters\")\nvoid catchesNothing(org.junitpioneer.jupiter.StdIn in, org.junit.jupiter.api.TestReporter reporter) {\n    // if the extension supports `TestReporter`, Jupiter will throw:\n    // ParameterResolutionException: Discovered multiple competing ParameterResolvers\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "signature change",
      "refactoringType": "SIGNATURE_CHANGE",
      "methodNameBefore": "catchesNothing",
      "methodNameAfter": "catchesNothing",
      "diffSummary": "signature modified, 4 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThatCode(app::read).doesNotThrowAnyException()",
        "Removed: org.assertj.core.api.Assertions.assertThat(in.capturedLines()).containsExactly(\"\")",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "importChanges": [
        "New usage: org.junit.jupiter.api.TestReporter"
      ],
      "logicChanges": [
        "Parameter count changed from 1 to 2",
        "Control flow \u0027if\u0027 usage changed from 0 to 1",
        "Control flow \u0027catch\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": true,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": true,
      "refactoring_type": "SIGNATURE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 8,
      "assertion_change_types": [
        "Assertion count changed from 2 to 0",
        "Removed",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "single_correctTestsSkipped_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "single_correctTestsSkipped",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        41.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        74.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "single_correctTestsSkipped",
        "methodNameAfter": "single_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "single_correctTestsSkipped",
      "methodNameAfter": "single_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "single_correctTestsSkipped_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "single_correctTestsSkipped",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        74.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        41.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "single_correctTestsSkipped",
        "methodNameAfter": "single_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "single_correctTestsSkipped",
      "methodNameAfter": "single_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "single_correctTestsSkipped_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "single_correctTestsSkipped",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        41.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        74.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "single_correctTestsSkipped",
        "methodNameAfter": "single_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "single_correctTestsSkipped",
      "methodNameAfter": "single_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "single_correctTestsSkipped_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "single_correctTestsSkipped",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        74.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        41.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "single_correctTestsSkipped",
        "methodNameAfter": "single_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "single_correctTestsSkipped",
      "methodNameAfter": "single_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "single_correctTestsSkipped_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "single_correctTestsSkipped",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        41.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        74.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "single_correctTestsSkipped",
        "methodNameAfter": "single_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "single_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables a single test correctly\")\nvoid single_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"single\", java.lang.String.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "single_correctTestsSkipped",
      "methodNameAfter": "single_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(2).hasNumberOfSkippedTests(4)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(1).hasNumberOfSkippedTests(5)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "multiple_correctTestsSkipped_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "multiple_correctTestsSkipped",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        50.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        83.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "multiple_correctTestsSkipped",
        "methodNameAfter": "multiple_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "multiple_correctTestsSkipped",
      "methodNameAfter": "multiple_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "multiple_correctTestsSkipped_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "multiple_correctTestsSkipped",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        83.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        50.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "multiple_correctTestsSkipped",
        "methodNameAfter": "multiple_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "multiple_correctTestsSkipped",
      "methodNameAfter": "multiple_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "multiple_correctTestsSkipped_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "multiple_correctTestsSkipped",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        50.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        83.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "multiple_correctTestsSkipped",
        "methodNameAfter": "multiple_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "multiple_correctTestsSkipped",
      "methodNameAfter": "multiple_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "multiple_correctTestsSkipped_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "multiple_correctTestsSkipped",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        83.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        50.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "multiple_correctTestsSkipped",
        "methodNameAfter": "multiple_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "multiple_correctTestsSkipped",
      "methodNameAfter": "multiple_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "multiple_correctTestsSkipped_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java",
    "methodName": "multiple_correctTestsSkipped",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        50.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.SubstringTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        83.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "multiple_correctTestsSkipped",
        "methodNameAfter": "multiple_correctTestsSkipped",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "multiple_correctTestsSkipped[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"disables multiple tests correctly\")\nvoid multiple_correctTestsSkipped() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.params.DisabledIfNameExtensionTests.RegExpTestCases.class, \"multiple\", int.class);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "multiple_correctTestsSkipped",
      "methodNameAfter": "multiple_correctTestsSkipped",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSkippedTests(3).hasNumberOfSucceededTests(2)",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfFailedTests(0).hasNumberOfSucceededTests(3).hasNumberOfSkippedTests(2)"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "parameterizedWithCartesianValues_0f17b7167445ef1bafe4130b5e0aed8f29350a7d_to_4cba07cb8250340894c1f99f2eabc33996c0fed3",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/cartesian/CartesianTestExtensionTests.java",
    "methodName": "parameterizedWithCartesianValues",
    "beforeCommit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
    "afterCommit": "4cba07cb8250340894c1f99f2eabc33996c0fed3",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        744.0
      ],
      "commit": "0f17b7167445ef1bafe4130b5e0aed8f29350a7d",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "parameterizedWithCartesianValues[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"ParameterizedTest does not work with @CartesianTest.Values\")\nvoid parameterizedWithCartesianValues() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.cartesian.CartesianTestExtensionTests.ArgumentsSourceTestCases.class, \"parameterizedTest\", int.class);\n    // CartesianValueArgumentsProvider does not get initialized because it does not implement AnnotationConsumer\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessageContaining(\"You must configure at least one arguments source for this @ParameterizedTest\");\n}",
      "assertion_type": "// CartesianValueArgumentsProvider does not get initialized because it does not implement AnnotationConsumer\norg.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessageContaining(\"You must configure at least one arguments source for this @ParameterizedTest\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        744.0
      ],
      "commit": "4cba07cb8250340894c1f99f2eabc33996c0fed3",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "parameterizedWithCartesianValues",
        "methodNameAfter": "parameterizedWithCartesianValues",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: // CartesianValueArgumentsProvider does not get initialized because it does not implement AnnotationConsumer org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessageContaining(\"You must configure at least one set of arguments for this @ParameterizedTest\")",
          "Removed: // CartesianValueArgumentsProvider does not get initialized because it does not implement AnnotationConsumer org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessageContaining(\"You must configure at least one arguments source for this @ParameterizedTest\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "parameterizedWithCartesianValues[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"ParameterizedTest does not work with @CartesianTest.Values\")\nvoid parameterizedWithCartesianValues() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes(org.junitpioneer.jupiter.cartesian.CartesianTestExtensionTests.ArgumentsSourceTestCases.class, \"parameterizedTest\", int.class);\n    // CartesianValueArgumentsProvider does not get initialized because it does not implement AnnotationConsumer\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessageContaining(\"You must configure at least one set of arguments for this @ParameterizedTest\");\n}",
      "assertion_type": "// CartesianValueArgumentsProvider does not get initialized because it does not implement AnnotationConsumer\norg.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessageContaining(\"You must configure at least one set of arguments for this @ParameterizedTest\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "parameterizedWithCartesianValues",
      "methodNameAfter": "parameterizedWithCartesianValues",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: // CartesianValueArgumentsProvider does not get initialized because it does not implement AnnotationConsumer org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessageContaining(\"You must configure at least one set of arguments for this @ParameterizedTest\")",
        "Removed: // CartesianValueArgumentsProvider does not get initialized because it does not implement AnnotationConsumer org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedContainer().withExceptionInstanceOf(org.junit.platform.commons.PreconditionViolationException.class).hasMessageContaining(\"You must configure at least one arguments source for this @ParameterizedTest\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldDisableTestWithUntilDateInTheFuture_ef7ff7cb4e033a9476131ab74ef1fdd5942b23b7_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisabledUntilExtensionTests.java",
    "methodName": "shouldDisableTestWithUntilDateInTheFuture",
    "beforeCommit": "ef7ff7cb4e033a9476131ab74ef1fdd5942b23b7",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        68.0,
        69.0,
        70.0
      ],
      "commit": "ef7ff7cb4e033a9476131ab74ef1fdd5942b23b7",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldDisableTestWithUntilDateInTheFuture[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Should disable test with `date` in the future\")\nvoid shouldDisableTestWithUntilDateInTheFuture() {\n    final org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DisabledUntilExtensionTests.DisabledUntilTestCases.class, \"testIsAnnotatedWithDateInTheFuture\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(0);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSkippedTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().firstValue().contains(\"2199-01-01\", \"reproduce\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(0), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSkippedTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().firstValue().contains(\"2199-01-01\", \"reproduce\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        68.0,
        69.0,
        70.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldDisableTestWithUntilDateInTheFuture",
        "methodNameAfter": "shouldDisableTestWithUntilDateInTheFuture",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNoReportEntries()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().firstValue().contains(\"2199-01-01\", \"reproduce\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldDisableTestWithUntilDateInTheFuture[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Should disable test with `date` in the future\")\nvoid shouldDisableTestWithUntilDateInTheFuture() {\n    final org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DisabledUntilExtensionTests.DisabledUntilTestCases.class, \"testIsAnnotatedWithDateInTheFuture\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(0);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSkippedTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNoReportEntries();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(0), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSkippedTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNoReportEntries()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldDisableTestWithUntilDateInTheFuture",
      "methodNameAfter": "shouldDisableTestWithUntilDateInTheFuture",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNoReportEntries()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().firstValue().contains(\"2199-01-01\", \"reproduce\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated_ef7ff7cb4e033a9476131ab74ef1fdd5942b23b7_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisabledUntilExtensionTests.java",
    "methodName": "shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated",
    "beforeCommit": "ef7ff7cb4e033a9476131ab74ef1fdd5942b23b7",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0,
        79.0,
        80.0,
        81.0
      ],
      "commit": "ef7ff7cb4e033a9476131ab74ef1fdd5942b23b7",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Should disable nested test with `date` in the future when meta annotated by higher level container\")\nvoid shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated() {\n    final org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DisabledUntilExtensionTests.DisabledUntilTestCases.NestedTestCases.class, \"shouldRetrieveFromClass\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSkippedContainer();// NestedDummyTestClass is skipped as container\n\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(0);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfSkippedTests(0);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().firstValue().contains(\"2199-01-01\", \"reproduce\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSkippedContainer()// NestedDummyTestClass is skipped as container, org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(0), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfSkippedTests(0), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().firstValue().contains(\"2199-01-01\", \"reproduce\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        78.0,
        79.0,
        80.0,
        81.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated",
        "methodNameAfter": "shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNoReportEntries()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().firstValue().contains(\"2199-01-01\", \"reproduce\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"Should disable nested test with `date` in the future when meta annotated by higher level container\")\nvoid shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated() {\n    final org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DisabledUntilExtensionTests.DisabledUntilTestCases.NestedTestCases.class, \"shouldRetrieveFromClass\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSkippedContainer();// NestedDummyTestClass is skipped as container\n\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(0);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfSkippedTests(0);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNoReportEntries();\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSkippedContainer()// NestedDummyTestClass is skipped as container, org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(0), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfSkippedTests(0), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNoReportEntries()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated",
      "methodNameAfter": "shouldDisableNestedTestWithUntilDateInTheFutureWhenMetaAnnotated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNoReportEntries()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().firstValue().contains(\"2199-01-01\", \"reproduce\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/ExpectedToFailExtensionDemo.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        24.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// tag::expected_to_fail[]\n@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    int actual \u003d brokenMethod();\n    org.assertj.core.api.Assertions.assertThat(actual).isEqualTo(10);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(actual).isEqualTo(10)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        24.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: org.junit.jupiter.api.Assertions.assertEquals(10, actual)",
          "Removed: org.assertj.core.api.Assertions.assertThat(actual).isEqualTo(10)",
          "Assertion type unknown count changed from 1 to 0",
          "New assertion type: assertEquals"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// tag::expected_to_fail[]\n@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    int actual \u003d brokenMethod();\n    org.junit.jupiter.api.Assertions.assertEquals(10, actual);\n}",
      "assertion_type": "org.junit.jupiter.api.Assertions.assertEquals(10, actual)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: org.junit.jupiter.api.Assertions.assertEquals(10, actual)",
        "Removed: org.assertj.core.api.Assertions.assertThat(actual).isEqualTo(10)",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type: assertEquals"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "doSomething_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/ExpectedToFailExtensionDemo.java",
    "methodName": "doSomething",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        33.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "doSomething[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::expected_to_fail[]\n// tag::expected_to_fail_message[]\n@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail(\"Implementation bug in brokenMethod()\")\nvoid doSomething() {\n    int actual \u003d brokenMethod();\n    org.assertj.core.api.Assertions.assertThat(actual).isEqualTo(10);\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(actual).isEqualTo(10)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        33.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "doSomething",
        "methodNameAfter": "doSomething",
        "diffSummary": "4 assertion changes",
        "assertionChanges": [
          "Added: org.junit.jupiter.api.Assertions.assertEquals(10, actual)",
          "Removed: org.assertj.core.api.Assertions.assertThat(actual).isEqualTo(10)",
          "Assertion type unknown count changed from 1 to 0",
          "New assertion type: assertEquals"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "doSomething[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "// end::expected_to_fail[]\n// tag::expected_to_fail_message[]\n@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail(\"Implementation bug in brokenMethod()\")\nvoid doSomething() {\n    int actual \u003d brokenMethod();\n    org.junit.jupiter.api.Assertions.assertEquals(10, actual);\n}",
      "assertion_type": "org.junit.jupiter.api.Assertions.assertEquals(10, actual)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "doSomething",
      "methodNameAfter": "doSomething",
      "diffSummary": "4 assertion changes",
      "assertionChanges": [
        "Added: org.junit.jupiter.api.Assertions.assertEquals(10, actual)",
        "Removed: org.assertj.core.api.Assertions.assertThat(actual).isEqualTo(10)",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type: assertEquals"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 0",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_class_level_configuration_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_class_level_configuration",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        60.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        110.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_class_level_configuration",
        "methodNameAfter": "test_with_class_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_class_level_configuration",
      "methodNameAfter": "test_with_class_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_class_level_configuration_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_class_level_configuration",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        110.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        59.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_class_level_configuration",
        "methodNameAfter": "test_with_class_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_class_level_configuration",
      "methodNameAfter": "test_with_class_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_class_level_configuration_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_class_level_configuration",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        59.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        92.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_class_level_configuration",
        "methodNameAfter": "test_with_class_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_class_level_configuration",
      "methodNameAfter": "test_with_class_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_class_level_configuration_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_class_level_configuration",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        92.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        57.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_class_level_configuration",
        "methodNameAfter": "test_with_class_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_class_level_configuration",
      "methodNameAfter": "test_with_class_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_class_level_configuration_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_class_level_configuration",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        57.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        89.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_class_level_configuration",
        "methodNameAfter": "test_with_class_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_class_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test_with_class_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_class_level_configuration",
      "methodNameAfter": "test_with_class_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"CET\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"fr\").build())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_method_level_configuration_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_method_level_configuration",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        66.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(language \u003d \"en\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        116.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_method_level_configuration",
        "methodNameAfter": "test_with_method_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultTimeZone(\"Africa/Juba\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_method_level_configuration",
      "methodNameAfter": "test_with_method_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_method_level_configuration_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_method_level_configuration",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        116.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultTimeZone(\"Africa/Juba\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        65.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_method_level_configuration",
        "methodNameAfter": "test_with_method_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(language \u003d \"en\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_method_level_configuration",
      "methodNameAfter": "test_with_method_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_method_level_configuration_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_method_level_configuration",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        65.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(language \u003d \"en\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_method_level_configuration",
        "methodNameAfter": "test_with_method_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultTimeZone(\"Africa/Juba\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_method_level_configuration",
      "methodNameAfter": "test_with_method_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_method_level_configuration_504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_method_level_configuration",
    "beforeCommit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "504c77aaf3fc93eb35dfcc7e6abc9e4b2058cb3a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultTimeZone(\"Africa/Juba\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        63.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_method_level_configuration",
        "methodNameAfter": "test_with_method_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(language \u003d \"en\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_method_level_configuration",
      "methodNameAfter": "test_with_method_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_with_method_level_configuration_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/demo/java/org/junitpioneer/jupiter/DefaultLocaleTimezoneExtensionDemo.java",
    "methodName": "test_with_method_level_configuration",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        63.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(language \u003d \"en\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build());\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        95.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test_with_method_level_configuration",
        "methodNameAfter": "test_with_method_level_configuration",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test_with_method_level_configuration[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultTimeZone(\"Africa/Juba\")\nvoid test_with_method_level_configuration() {\n    org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test_with_method_level_configuration",
      "methodNameAfter": "test_with_method_level_configuration",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(java.util.TimeZone.getDefault()).isEqualTo(java.util.TimeZone.getTimeZone(\"Africa/Juba\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(java.util.Locale.getDefault()).isEqualTo(new java.util.Locale.Builder().setLanguage(\"en\").build())"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "mutuallyExclusiveWithValue_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DefaultLocaleTests.java",
    "methodName": "mutuallyExclusiveWithValue",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        396.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "mutuallyExclusiveWithValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReadsDefaultLocale\n@org.junit.jupiter.api.DisplayName(\"throws an ExtensionConfigurationException if any other option is present\")\nvoid mutuallyExclusiveWithValue() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DefaultLocaleTests.BadProviderTestCases.class, \"mutuallyExclusiveWithValue\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with language tag if language, country, variant and provider are not set\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with language tag if language, country, variant and provider are not set\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "mutuallyExclusiveWithValue",
        "methodNameAfter": "mutuallyExclusiveWithValue",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with language tag if language, country, variant and provider are not set\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 1",
          "Control flow \u0027if\u0027 usage changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "mutuallyExclusiveWithValue[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(value \u003d \"en\", localeProvider \u003d org.junitpioneer.jupiter.DefaultLocaleTests.BasicLocaleProvider.class)\nvoid mutuallyExclusiveWithValue() {\n    // can\u0027t have both a value and a provider\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "mutuallyExclusiveWithValue",
      "methodNameAfter": "mutuallyExclusiveWithValue",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with language tag if language, country, variant and provider are not set\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 1",
        "Control flow \u0027if\u0027 usage changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "mutuallyExclusiveWithLanguage_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DefaultLocaleTests.java",
    "methodName": "mutuallyExclusiveWithLanguage",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        409.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "mutuallyExclusiveWithLanguage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReadsDefaultLocale\n@org.junit.jupiter.api.DisplayName(\"throws an ExtensionConfigurationException if any other option is present\")\nvoid mutuallyExclusiveWithLanguage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DefaultLocaleTests.BadProviderTestCases.class, \"mutuallyExclusiveWithLanguage\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with language tag if provider is not set\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with language tag if provider is not set\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "mutuallyExclusiveWithLanguage",
        "methodNameAfter": "mutuallyExclusiveWithLanguage",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with language tag if provider is not set\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 1",
          "Control flow \u0027if\u0027 usage changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "mutuallyExclusiveWithLanguage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(language \u003d \"en\", localeProvider \u003d org.junitpioneer.jupiter.DefaultLocaleTests.BasicLocaleProvider.class)\nvoid mutuallyExclusiveWithLanguage() {\n    // can\u0027t have both a language property and a provider\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "mutuallyExclusiveWithLanguage",
      "methodNameAfter": "mutuallyExclusiveWithLanguage",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with language tag if provider is not set\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 1",
        "Control flow \u0027if\u0027 usage changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "mutuallyExclusiveWithCountry_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DefaultLocaleTests.java",
    "methodName": "mutuallyExclusiveWithCountry",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        421.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "mutuallyExclusiveWithCountry[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReadsDefaultLocale\n@org.junit.jupiter.api.DisplayName(\"throws an ExtensionConfigurationException if any other option is present\")\nvoid mutuallyExclusiveWithCountry() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DefaultLocaleTests.BadProviderTestCases.class, \"mutuallyExclusiveWithCountry\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with a provider if value, language, country and variant are not set.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with a provider if value, language, country and variant are not set.\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "mutuallyExclusiveWithCountry",
        "methodNameAfter": "mutuallyExclusiveWithCountry",
        "diffSummary": "3 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with a provider if value, language, country and variant are not set.\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 1",
          "Control flow \u0027if\u0027 usage changed from 2 to 0",
          "Control flow \u0027try\u0027 usage changed from 1 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "mutuallyExclusiveWithCountry[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(country \u003d \"EN\", localeProvider \u003d org.junitpioneer.jupiter.DefaultLocaleTests.BasicLocaleProvider.class)\nvoid mutuallyExclusiveWithCountry() {\n    // can\u0027t have both a country property and a provider\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "mutuallyExclusiveWithCountry",
      "methodNameAfter": "mutuallyExclusiveWithCountry",
      "diffSummary": "3 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with a provider if value, language, country and variant are not set.\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 1",
        "Control flow \u0027if\u0027 usage changed from 2 to 0",
        "Control flow \u0027try\u0027 usage changed from 1 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "mutuallyExclusiveWithVariant_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DefaultLocaleTests.java",
    "methodName": "mutuallyExclusiveWithVariant",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        434.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "mutuallyExclusiveWithVariant[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReadsDefaultLocale\n@org.junit.jupiter.api.DisplayName(\"throws an ExtensionConfigurationException if any other option is present\")\nvoid mutuallyExclusiveWithVariant() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DefaultLocaleTests.BadProviderTestCases.class, \"mutuallyExclusiveWithVariant\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with a provider if value, language, country and variant are not set.\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with a provider if value, language, country and variant are not set.\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "mutuallyExclusiveWithVariant",
        "methodNameAfter": "mutuallyExclusiveWithVariant",
        "diffSummary": "3 assertion changes, import usage changes, 3 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with a provider if value, language, country and variant are not set.\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 1",
          "Control flow \u0027if\u0027 usage changed from 2 to 0",
          "Control flow \u0027try\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "mutuallyExclusiveWithVariant[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(variant \u003d \"japanese\", localeProvider \u003d org.junitpioneer.jupiter.DefaultLocaleTests.BasicLocaleProvider.class)\nvoid mutuallyExclusiveWithVariant() {\n    // can\u0027t have both a variant property and a provider\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "mutuallyExclusiveWithVariant",
      "methodNameAfter": "mutuallyExclusiveWithVariant",
      "diffSummary": "3 assertion changes, import usage changes, 3 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"can only be used with a provider if value, language, country and variant are not set.\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 1",
        "Control flow \u0027if\u0027 usage changed from 2 to 0",
        "Control flow \u0027try\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "badConstructor_105aa991c4c2a146c8d5d0e84a004b72ef843772_to_105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DefaultLocaleTests.java",
    "methodName": "badConstructor",
    "beforeCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "afterCommit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        447.0
      ],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "badConstructor[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReadsDefaultLocale\n@org.junit.jupiter.api.DisplayName(\"throws an ExtensionConfigurationException if localeProvider can\u0027t be constructed\")\nvoid badConstructor() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.DefaultLocaleTests.BadProviderTestCases.class, \"badConstructor\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"could not be constructed because of an exception\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"could not be constructed because of an exception\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "105aa991c4c2a146c8d5d0e84a004b72ef843772",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "badConstructor",
        "methodNameAfter": "badConstructor",
        "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"could not be constructed because of an exception\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 1",
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "badConstructor[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.DefaultLocale(localeProvider \u003d org.junitpioneer.jupiter.DefaultLocaleTests.BadConstructorLocaleProvider.class)\nvoid badConstructor() {\n    // provider has to have a no-args constructor\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "badConstructor",
      "methodNameAfter": "badConstructor",
      "diffSummary": "3 assertion changes, import usage changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(org.junit.jupiter.api.extension.ExtensionConfigurationException.class).hasMessageContaining(\"could not be constructed because of an exception\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 1",
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        53.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        281.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        281.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        371.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        371.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        405.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interface of enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        405.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interface of enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        53.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        53.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        281.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        281.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        371.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        371.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        405.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interface of enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        405.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interface of enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        53.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        53.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        281.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        281.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        371.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent().map(NotInheritedAnnotation::value).hasValue(\"Not inherited 1\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnInterface_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnInterface",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        371.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interfaces implemented by enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        405.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnInterface",
        "methodNameAfter": "notInheritedOnInterface",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnInterface[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds not inherited annotations on interface of enclosing class\")\nvoid notInheritedOnInterface() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Implementer.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnInterface",
      "methodNameAfter": "notInheritedOnInterface",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).map(NotInheritedAnnotation::value).containsExactlyInAnyOrder(\"Not inherited 1\", \"Not inherited 2\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(3).map(NotInheritedRepeatableAnnotation::value).containsExactlyInAnyOrder(\"Not inherited repeatable 1\", \"Not inherited repeatable 2\", \"Not inherited repeatable 3\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnSuperclass_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnSuperclass",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        139.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isFalse();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isFalse()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        293.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnSuperclass",
        "methodNameAfter": "notInheritedOnSuperclass",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isFalse()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnSuperclass",
      "methodNameAfter": "notInheritedOnSuperclass",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isFalse()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnSuperclass_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnSuperclass",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        293.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        387.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnSuperclass",
        "methodNameAfter": "notInheritedOnSuperclass",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnSuperclass",
      "methodNameAfter": "notInheritedOnSuperclass",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnSuperclass_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnSuperclass",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        420.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        65.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnSuperclass",
        "methodNameAfter": "notInheritedOnSuperclass",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isFalse()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isFalse();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isFalse()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnSuperclass",
      "methodNameAfter": "notInheritedOnSuperclass",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isFalse()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnSuperclass_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnSuperclass",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        139.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isFalse();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isFalse()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        293.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnSuperclass",
        "methodNameAfter": "notInheritedOnSuperclass",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isFalse()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnSuperclass",
      "methodNameAfter": "notInheritedOnSuperclass",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isFalse()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnSuperclass_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnSuperclass",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        293.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        387.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnSuperclass",
        "methodNameAfter": "notInheritedOnSuperclass",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnSuperclass",
      "methodNameAfter": "notInheritedOnSuperclass",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnSuperclass_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnSuperclass",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        420.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        65.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnSuperclass",
        "methodNameAfter": "notInheritedOnSuperclass",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isFalse()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isFalse();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isFalse()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnSuperclass",
      "methodNameAfter": "notInheritedOnSuperclass",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isFalse()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnSuperclass_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnSuperclass",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        139.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isFalse();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isFalse()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        293.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnSuperclass",
        "methodNameAfter": "notInheritedOnSuperclass",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isFalse()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnSuperclass",
      "methodNameAfter": "notInheritedOnSuperclass",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isFalse()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notInheritedOnSuperclass_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notInheritedOnSuperclass",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        293.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        387.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notInheritedOnSuperclass",
        "methodNameAfter": "notInheritedOnSuperclass",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notInheritedOnSuperclass[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not inherited annotations on superclass of enclosing class\")\nvoid notInheritedOnSuperclass() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Extender.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NotInheritedRepeatableAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notInheritedOnSuperclass",
      "methodNameAfter": "notInheritedOnSuperclass",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "directlyPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "directlyPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        163.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present annotations\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"direct\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        229.0,
        230.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "directlyPresent",
        "methodNameAfter": "directlyPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "directlyPresent",
      "methodNameAfter": "directlyPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "directlyPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "directlyPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        229.0,
        230.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        323.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "directlyPresent",
        "methodNameAfter": "directlyPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "directlyPresent",
      "methodNameAfter": "directlyPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "directlyPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "directlyPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        323.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        76.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "directlyPresent",
        "methodNameAfter": "directlyPresent",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present annotations\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"direct\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "directlyPresent",
      "methodNameAfter": "directlyPresent",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "directlyPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "directlyPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        163.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present annotations\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"direct\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        229.0,
        230.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "directlyPresent",
        "methodNameAfter": "directlyPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "directlyPresent",
      "methodNameAfter": "directlyPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "directlyPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "directlyPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        229.0,
        230.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        323.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "directlyPresent",
        "methodNameAfter": "directlyPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "directlyPresent",
      "methodNameAfter": "directlyPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "directlyPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "directlyPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        323.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        76.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "directlyPresent",
        "methodNameAfter": "directlyPresent",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present annotations\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"direct\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "directlyPresent",
      "methodNameAfter": "directlyPresent",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "directlyPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "directlyPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        163.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present annotations\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"direct\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        229.0,
        230.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "directlyPresent",
        "methodNameAfter": "directlyPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "directlyPresent",
      "methodNameAfter": "directlyPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "directlyPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "directlyPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        229.0,
        230.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        323.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "directlyPresent",
        "methodNameAfter": "directlyPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "directlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds directly present even if all other types are present\")\nvoid directlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"direct\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "directlyPresent",
      "methodNameAfter": "directlyPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"directly present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"directly present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "indirectlyPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "indirectlyPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        175.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present annotations\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        269.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "indirectlyPresent",
        "methodNameAfter": "indirectlyPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "indirectlyPresent",
      "methodNameAfter": "indirectlyPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "indirectlyPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "indirectlyPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        269.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        359.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "indirectlyPresent",
        "methodNameAfter": "indirectlyPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "indirectlyPresent",
      "methodNameAfter": "indirectlyPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "indirectlyPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "indirectlyPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        359.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        87.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "indirectlyPresent",
        "methodNameAfter": "indirectlyPresent",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present annotations\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "indirectlyPresent",
      "methodNameAfter": "indirectlyPresent",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "indirectlyPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "indirectlyPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        175.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present annotations\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        269.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "indirectlyPresent",
        "methodNameAfter": "indirectlyPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "indirectlyPresent",
      "methodNameAfter": "indirectlyPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "indirectlyPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "indirectlyPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        269.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        359.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "indirectlyPresent",
        "methodNameAfter": "indirectlyPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "indirectlyPresent",
      "methodNameAfter": "indirectlyPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "indirectlyPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "indirectlyPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        359.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        87.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "indirectlyPresent",
        "methodNameAfter": "indirectlyPresent",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present annotations\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "indirectlyPresent",
      "methodNameAfter": "indirectlyPresent",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "indirectlyPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "indirectlyPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        175.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present annotations\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        269.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "indirectlyPresent",
        "methodNameAfter": "indirectlyPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "indirectlyPresent",
      "methodNameAfter": "indirectlyPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "indirectlyPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "indirectlyPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        268.0,
        269.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        359.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "indirectlyPresent",
        "methodNameAfter": "indirectlyPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "indirectlyPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds indirectly present if no directly present, meta present or enclosing present annotation was found\")\nvoid indirectlyPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Child.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "indirectlyPresent",
      "methodNameAfter": "indirectlyPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"indirectly present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"indirectly present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "metaPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        187.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present annotations\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"meta\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        242.0,
        243.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "metaPresent",
        "methodNameAfter": "metaPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "metaPresent",
      "methodNameAfter": "metaPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "metaPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        242.0,
        243.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "metaPresent",
        "methodNameAfter": "metaPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "metaPresent",
      "methodNameAfter": "metaPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "metaPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "metaPresent",
        "methodNameAfter": "metaPresent",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present annotations\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"meta\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "metaPresent",
      "methodNameAfter": "metaPresent",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "metaPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        187.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present annotations\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"meta\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        242.0,
        243.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "metaPresent",
        "methodNameAfter": "metaPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "metaPresent",
      "methodNameAfter": "metaPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "metaPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        242.0,
        243.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "metaPresent",
        "methodNameAfter": "metaPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "metaPresent",
      "methodNameAfter": "metaPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "metaPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        98.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "metaPresent",
        "methodNameAfter": "metaPresent",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present annotations\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"meta\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "metaPresent",
      "methodNameAfter": "metaPresent",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "metaPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        187.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present annotations\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"meta\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        242.0,
        243.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "metaPresent",
        "methodNameAfter": "metaPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "metaPresent",
      "methodNameAfter": "metaPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "metaPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        242.0,
        243.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        335.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "metaPresent",
        "methodNameAfter": "metaPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds meta-present if no directly present annotation was found\")\nvoid metaPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"meta\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "metaPresent",
      "methodNameAfter": "metaPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allMatch(annotation -\u003e annotation.value().contains(\"meta present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"meta present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "enclosingPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "enclosingPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present annotations\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        255.0,
        256.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "enclosingPresent",
        "methodNameAfter": "enclosingPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "enclosingPresent",
      "methodNameAfter": "enclosingPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "enclosingPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "enclosingPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        255.0,
        256.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        347.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "enclosingPresent",
        "methodNameAfter": "enclosingPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "enclosingPresent",
      "methodNameAfter": "enclosingPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "enclosingPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "enclosingPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        347.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        109.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "enclosingPresent",
        "methodNameAfter": "enclosingPresent",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present annotations\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "enclosingPresent",
      "methodNameAfter": "enclosingPresent",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "enclosingPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "enclosingPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present annotations\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        255.0,
        256.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "enclosingPresent",
        "methodNameAfter": "enclosingPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "enclosingPresent",
      "methodNameAfter": "enclosingPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "enclosingPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "enclosingPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        255.0,
        256.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        347.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "enclosingPresent",
        "methodNameAfter": "enclosingPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "enclosingPresent",
      "methodNameAfter": "enclosingPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "enclosingPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "enclosingPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        347.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        109.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "enclosingPresent",
        "methodNameAfter": "enclosingPresent",
        "diffSummary": "2 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Control flow \u0027if\u0027 usage changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present annotations\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "enclosingPresent",
      "methodNameAfter": "enclosingPresent",
      "diffSummary": "2 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Control flow \u0027if\u0027 usage changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "enclosingPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "enclosingPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present annotations\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.Enclosing.class.getMethod(\"notAnnotated\"));\n    boolean result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.isAnyRepeatableAnnotationPresent(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isTrue();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isTrue()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        255.0,
        256.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "enclosingPresent",
        "methodNameAfter": "enclosingPresent",
        "diffSummary": "5 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 4",
          "Control flow \u0027if\u0027 usage changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "enclosingPresent",
      "methodNameAfter": "enclosingPresent",
      "diffSummary": "5 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Added: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isTrue()",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 4",
        "Control flow \u0027if\u0027 usage changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 7,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "enclosingPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "enclosingPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        255.0,
        256.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isPresent();\n    org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isPresent(), org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        347.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "enclosingPresent",
        "methodNameAfter": "enclosingPresent",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "enclosingPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds enclosing present if no directly present or meta annotation was found\")\nvoid enclosingPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCluster.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "enclosingPresent",
      "methodNameAfter": "enclosingPresent",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(2).allMatch(annotation -\u003e annotation.value().contains(\"enclosing present\"))",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result.get().value()).contains(\"enclosing present\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        217.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        311.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notPresent",
        "methodNameAfter": "notPresent",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notPresent",
      "methodNameAfter": "notPresent",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notPresent_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notPresent",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        468.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        217.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notPresent",
        "methodNameAfter": "notPresent",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notPresent",
      "methodNameAfter": "notPresent",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        217.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        311.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notPresent",
        "methodNameAfter": "notPresent",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notPresent",
      "methodNameAfter": "notPresent",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notPresent_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notPresent",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        468.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        217.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notPresent",
        "methodNameAfter": "notPresent",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notPresent",
      "methodNameAfter": "notPresent",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "notPresent_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "notPresent",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        217.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.Optional\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingAnnotation(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isNotPresent();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        311.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "notPresent",
        "methodNameAfter": "notPresent",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "notPresent[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not find not present annotations\")\nvoid notPresent() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.AnnotationCheck.class.getMethod(\"notAnnotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findClosestEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).isEmpty();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).isEmpty()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "notPresent",
      "methodNameAfter": "notPresent",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).isEmpty()",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).isNotPresent()"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "allEnclosing_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "allEnclosing",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        445.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        481.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "allEnclosing",
        "methodNameAfter": "allEnclosing",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "allEnclosing",
      "methodNameAfter": "allEnclosing",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "allEnclosing_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "allEnclosing",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        481.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        445.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "allEnclosing",
        "methodNameAfter": "allEnclosing",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "allEnclosing",
      "methodNameAfter": "allEnclosing",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "allEnclosing_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "allEnclosing",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        445.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        481.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "allEnclosing",
        "methodNameAfter": "allEnclosing",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "allEnclosing",
      "methodNameAfter": "allEnclosing",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "allEnclosing_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "allEnclosing",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        481.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        445.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "allEnclosing",
        "methodNameAfter": "allEnclosing",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "allEnclosing",
      "methodNameAfter": "allEnclosing",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "allEnclosing_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "allEnclosing",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        445.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        481.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "allEnclosing",
        "methodNameAfter": "allEnclosing",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "allEnclosing[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds all enclosing annotations\")\nvoid allEnclosing() throws java.lang.NoSuchMethodException {\n    org.junitpioneer.internal.TestExtensionContext testContext \u003d new org.junitpioneer.internal.TestExtensionContext(AnnotationCluster.NestedClass.NestedNestedClass.class, AnnotationCluster.NestedClass.NestedNestedClass.class.getMethod(\"annotated\"));\n    java.util.stream.Stream\u003corg.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAllEnclosingRepeatableAnnotations(testContext, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "allEnclosing",
      "methodNameAfter": "allEnclosing",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(8).extracting(RepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"This annotation is also enclosing present\", \"Repeatable nested 1\", \"Repeatable nested 2\", \"Repeatable nested 3\", \"Repeatable nested 4\", \"Repeatable nested 5\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(5).extracting(NonRepeatableTestAnnotation::value).containsExactlyInAnyOrder(\"This annotation is indirectly present (inherited) on any method of an implementing class.\", \"This annotation is enclosing present\", \"Nested 1\", \"Nested 2\", \"Nested 3\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "onMethods_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "onMethods",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        504.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "onMethods[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds annotated annotations on a method\")\nvoid onMethods() throws java.lang.NoSuchMethodException {\n    java.lang.reflect.Method method \u003d PioneerAnnotationUtilsTestCases.AnnotatedAnnotations.class.getMethod(\"annotated\");\n    java.util.List\u003cjava.lang.annotation.Annotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAnnotatedAnnotations(method, java.lang.annotation.Inherited.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Inherited 4\", \"Inherited 5\", \"Inherited 6\", \"Annotated with repeatable 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Inherited 4\", \"Inherited 5\", \"Inherited 6\", \"Annotated with repeatable 2\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        504.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "onMethods",
        "methodNameAfter": "onMethods",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Inherited 4\", \"Inherited 5\", \"Inherited 6\", \"Annotated with repeatable 2\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Inherited 4\", \"Inherited 5\", \"Inherited 6\", \"Annotated with repeatable 2\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "onMethods[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds annotated annotations on a method\")\nvoid onMethods() throws java.lang.NoSuchMethodException {\n    java.lang.reflect.Method method \u003d PioneerAnnotationUtilsTestCases.AnnotatedAnnotations.class.getMethod(\"annotated\");\n    java.util.List\u003cjava.lang.annotation.Annotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAnnotatedAnnotations(method, java.lang.annotation.Inherited.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Inherited 4\", \"Inherited 5\", \"Inherited 6\", \"Annotated with repeatable 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Inherited 4\", \"Inherited 5\", \"Inherited 6\", \"Annotated with repeatable 2\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "onMethods",
      "methodNameAfter": "onMethods",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Inherited 4\", \"Inherited 5\", \"Inherited 6\", \"Annotated with repeatable 2\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Inherited 4\", \"Inherited 5\", \"Inherited 6\", \"Annotated with repeatable 2\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "onClassNotRepeated_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "onClassNotRepeated",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        521.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "onClassNotRepeated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds annotated annotations on a class\")\nvoid onClassNotRepeated() {\n    java.util.List\u003cjava.lang.annotation.Annotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAnnotatedAnnotations(PioneerAnnotationUtilsTestCases.AnnotatedAnnotations.class, java.lang.annotation.Inherited.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Inherited 1\", \"Inherited 2\", \"Inherited 3\", \"Annotated with repeatable 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Inherited 1\", \"Inherited 2\", \"Inherited 3\", \"Annotated with repeatable 1\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        521.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "onClassNotRepeated",
        "methodNameAfter": "onClassNotRepeated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Inherited 1\", \"Inherited 2\", \"Inherited 3\", \"Annotated with repeatable 1\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Inherited 1\", \"Inherited 2\", \"Inherited 3\", \"Annotated with repeatable 1\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "onClassNotRepeated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds annotated annotations on a class\")\nvoid onClassNotRepeated() {\n    java.util.List\u003cjava.lang.annotation.Annotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAnnotatedAnnotations(PioneerAnnotationUtilsTestCases.AnnotatedAnnotations.class, java.lang.annotation.Inherited.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Inherited 1\", \"Inherited 2\", \"Inherited 3\", \"Annotated with repeatable 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Inherited 1\", \"Inherited 2\", \"Inherited 3\", \"Annotated with repeatable 1\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "onClassNotRepeated",
      "methodNameAfter": "onClassNotRepeated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Inherited 1\", \"Inherited 2\", \"Inherited 3\", \"Annotated with repeatable 1\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(4).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOfAny(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.NonRepeatableTestAnnotation.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Inherited 1\", \"Inherited 2\", \"Inherited 3\", \"Annotated with repeatable 1\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "onMethodRepeated_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "onMethodRepeated",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        539.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "onMethodRepeated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds annotated annotations on a method if annotation is repeatable\")\nvoid onMethodRepeated() throws java.lang.NoSuchMethodException {\n    java.lang.reflect.Method method \u003d PioneerAnnotationUtilsTestCases.AnnotatedAnnotations.class.getMethod(\"annotated\");\n    java.util.List\u003cjava.lang.annotation.Annotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAnnotatedAnnotations(method, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Annotated with repeatable 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Annotated with repeatable 2\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        539.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "onMethodRepeated",
        "methodNameAfter": "onMethodRepeated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Annotated with repeatable 2\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Annotated with repeatable 2\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "onMethodRepeated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds annotated annotations on a method if annotation is repeatable\")\nvoid onMethodRepeated() throws java.lang.NoSuchMethodException {\n    java.lang.reflect.Method method \u003d PioneerAnnotationUtilsTestCases.AnnotatedAnnotations.class.getMethod(\"annotated\");\n    java.util.List\u003cjava.lang.annotation.Annotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAnnotatedAnnotations(method, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Annotated with repeatable 2\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Annotated with repeatable 2\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "onMethodRepeated",
      "methodNameAfter": "onMethodRepeated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Annotated with repeatable 2\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Annotated with repeatable 2\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "onClassRepeated_01713d7bebc8aabf3e54e8d971dbc93c3d58d0af_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/internal/PioneerAnnotationUtilsTests.java",
    "methodName": "onClassRepeated",
    "beforeCommit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        553.0
      ],
      "commit": "01713d7bebc8aabf3e54e8d971dbc93c3d58d0af",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "onClassRepeated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds annotated annotations on a class if annotation is repeatable\")\nvoid onClassRepeated() {\n    java.util.List\u003cjava.lang.annotation.Annotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAnnotatedAnnotations(PioneerAnnotationUtilsTestCases.AnnotatedAnnotations.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Annotated with repeatable 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Annotated with repeatable 1\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        553.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "onClassRepeated",
        "methodNameAfter": "onClassRepeated",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Annotated with repeatable 1\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Annotated with repeatable 1\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "onClassRepeated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"finds annotated annotations on a class if annotation is repeatable\")\nvoid onClassRepeated() {\n    java.util.List\u003cjava.lang.annotation.Annotation\u003e result \u003d org.junitpioneer.internal.PioneerAnnotationUtils.findAnnotatedAnnotations(PioneerAnnotationUtilsTestCases.AnnotatedAnnotations.class, org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.RepeatableTestAnnotation.class);\n    org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Annotated with repeatable 1\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Annotated with repeatable 1\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "onClassRepeated",
      "methodNameAfter": "onClassRepeated",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extractingResultOf(\"value\").containsExactlyInAnyOrder(\"Annotated with repeatable 1\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(result).hasSize(1).allSatisfy(annotation -\u003e assertThat(annotation).isInstanceOf(org.junitpioneer.internal.PioneerAnnotationUtilsTestCases.MetaAnnotatedTestAnnotation.class)).extracting(this::resultOfValue).containsExactlyInAnyOrder(\"Annotated with repeatable 1\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "issueTestCasesCreated_125159303a7165411f24e378273969de0c415754_to_35e8d0522450e023d02cb907c6ae2d65bcaa7702",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/issue/IssueExtensionExecutionListenerTests.java",
    "methodName": "issueTestCasesCreated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        66.0,
        69.0,
        70.0,
        72.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "issueTestCasesCreated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid issueTestCasesCreated() {\n    org.junit.platform.engine.reporting.ReportEntry issueEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.REPORT_ENTRY_KEY, \"#123\");\n    org.junit.platform.engine.reporting.ReportEntry timeEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.TIME_REPORT_KEY, \"6\");\n    org.junit.platform.launcher.TestIdentifier successfulTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"successful-test\");\n    executionListener.testPlanExecutionStarted(testPlan);\n    executionListener.reportingEntryPublished(successfulTest, issueEntry);\n    executionListener.reportingEntryPublished(successfulTest, timeEntry);\n    executionListener.executionStarted(successfulTest);\n    executionListener.executionFinished(successfulTest, org.junit.platform.engine.TestExecutionResult.successful());\n    executionListener.testPlanExecutionFinished(testPlan);\n    // Verify result\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e allTests \u003d executionListener.createIssueTestSuites();\n    org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1);\n    org.junitpioneer.jupiter.IssueTestSuite issueTestSuite \u003d allTests.get(0);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\");\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(1);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL, 6L));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1), org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(1), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL, 6L))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        67.0,
        70.0,
        73.0
      ],
      "commit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "issueTestCasesCreated",
        "methodNameAfter": "issueTestCasesCreated",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 3",
          "Added: org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1))",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(1)",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\")",
          "Assertion type unknown count changed from 4 to 3"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 15 to 14"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "issueTestCasesCreated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid issueTestCasesCreated() {\n    org.junit.platform.engine.reporting.ReportEntry issueEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.REPORT_ENTRY_KEY, \"#123\");\n    org.junit.platform.engine.reporting.ReportEntry timeEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.TIME_REPORT_KEY, \"6\");\n    org.junit.platform.launcher.TestIdentifier successfulTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"successful-test\");\n    executionListener.testPlanExecutionStarted(testPlan);\n    executionListener.reportingEntryPublished(successfulTest, issueEntry);\n    executionListener.reportingEntryPublished(successfulTest, timeEntry);\n    executionListener.executionStarted(successfulTest);\n    executionListener.executionFinished(successfulTest, org.junit.platform.engine.TestExecutionResult.successful());\n    executionListener.testPlanExecutionFinished(testPlan);\n    // Verify result\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e allTests \u003d executionListener.createIssueTestSuites();\n    org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1);\n    org.junitpioneer.jupiter.IssueTestSuite issueTestSuite \u003d allTests.get(0);\n    org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1));\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL, 6L));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1), org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1)), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL, 6L))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "issueTestCasesCreated",
      "methodNameAfter": "issueTestCasesCreated",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 3",
        "Added: org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1))",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(1)",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\")",
        "Assertion type unknown count changed from 4 to 3"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 15 to 14"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 4 to 3",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 3"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "issueTestCasesCreated_35e8d0522450e023d02cb907c6ae2d65bcaa7702_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/issue/IssueExtensionExecutionListenerTests.java",
    "methodName": "issueTestCasesCreated",
    "beforeCommit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        67.0,
        70.0,
        73.0
      ],
      "commit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "issueTestCasesCreated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid issueTestCasesCreated() {\n    org.junit.platform.engine.reporting.ReportEntry issueEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.REPORT_ENTRY_KEY, \"#123\");\n    org.junit.platform.engine.reporting.ReportEntry timeEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.TIME_REPORT_KEY, \"6\");\n    org.junit.platform.launcher.TestIdentifier successfulTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"successful-test\");\n    executionListener.testPlanExecutionStarted(testPlan);\n    executionListener.reportingEntryPublished(successfulTest, issueEntry);\n    executionListener.reportingEntryPublished(successfulTest, timeEntry);\n    executionListener.executionStarted(successfulTest);\n    executionListener.executionFinished(successfulTest, org.junit.platform.engine.TestExecutionResult.successful());\n    executionListener.testPlanExecutionFinished(testPlan);\n    // Verify result\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e allTests \u003d executionListener.createIssueTestSuites();\n    org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1);\n    org.junitpioneer.jupiter.IssueTestSuite issueTestSuite \u003d allTests.get(0);\n    org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1));\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL, 6L));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1), org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1)), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL, 6L))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        64.0,
        67.0,
        70.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "issueTestCasesCreated",
        "methodNameAfter": "issueTestCasesCreated",
        "diffSummary": "2 assertion changes, 2 logic changes",
        "assertionChanges": [
          "Added: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL))",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL, 6L))"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 14 to 12",
          "Control flow \u0027try\u0027 usage changed from 4 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "issueTestCasesCreated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid issueTestCasesCreated() {\n    org.junit.platform.engine.reporting.ReportEntry issueEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.REPORT_ENTRY_KEY, \"#123\");\n    org.junit.platform.launcher.TestIdentifier successfulTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"successful-test\");\n    executionListener.testPlanExecutionStarted(testPlan);\n    executionListener.reportingEntryPublished(successfulTest, issueEntry);\n    executionListener.executionStarted(successfulTest);\n    executionListener.executionFinished(successfulTest, org.junit.platform.engine.TestExecutionResult.successful());\n    executionListener.testPlanExecutionFinished(testPlan);\n    // Verify result\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e allTests \u003d executionListener.createIssueTestSuites();\n    org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1);\n    org.junitpioneer.jupiter.IssueTestSuite issueTestSuite \u003d allTests.get(0);\n    org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1));\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1), org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1)), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "issueTestCasesCreated",
      "methodNameAfter": "issueTestCasesCreated",
      "diffSummary": "2 assertion changes, 2 logic changes",
      "assertionChanges": [
        "Added: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL))",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL, 6L))"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 14 to 12",
        "Control flow \u0027try\u0027 usage changed from 4 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortedIssueTestCaseCreated_125159303a7165411f24e378273969de0c415754_to_35e8d0522450e023d02cb907c6ae2d65bcaa7702",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/issue/IssueExtensionExecutionListenerTests.java",
    "methodName": "abortedIssueTestCaseCreated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        89.0,
        92.0,
        93.0,
        95.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortedIssueTestCaseCreated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid abortedIssueTestCaseCreated() {\n    org.junit.platform.engine.reporting.ReportEntry issueEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.REPORT_ENTRY_KEY, \"#123\");\n    org.junit.platform.launcher.TestIdentifier abortedTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"aborted-test\");\n    executionListener.testPlanExecutionStarted(testPlan);\n    executionListener.reportingEntryPublished(abortedTest, issueEntry);\n    executionListener.executionStarted(abortedTest);\n    executionListener.executionFinished(abortedTest, org.junit.platform.engine.TestExecutionResult.aborted(new java.lang.RuntimeException()));\n    executionListener.testPlanExecutionFinished(testPlan);\n    // Verify result\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e allTests \u003d executionListener.createIssueTestSuites();\n    org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1);\n    org.junitpioneer.jupiter.IssueTestSuite issueTestSuite \u003d allTests.get(0);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\");\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(1);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:aborted-test]\", org.junit.platform.engine.TestExecutionResult.Status.ABORTED));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1), org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(1), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:aborted-test]\", org.junit.platform.engine.TestExecutionResult.Status.ABORTED))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        90.0,
        93.0,
        96.0
      ],
      "commit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "abortedIssueTestCaseCreated",
        "methodNameAfter": "abortedIssueTestCaseCreated",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 3",
          "Added: org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1))",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(1)",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\")",
          "Assertion type unknown count changed from 4 to 3"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 13 to 12"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortedIssueTestCaseCreated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid abortedIssueTestCaseCreated() {\n    org.junit.platform.engine.reporting.ReportEntry issueEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.REPORT_ENTRY_KEY, \"#123\");\n    org.junit.platform.launcher.TestIdentifier abortedTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"aborted-test\");\n    executionListener.testPlanExecutionStarted(testPlan);\n    executionListener.reportingEntryPublished(abortedTest, issueEntry);\n    executionListener.executionStarted(abortedTest);\n    executionListener.executionFinished(abortedTest, org.junit.platform.engine.TestExecutionResult.aborted(new java.lang.RuntimeException()));\n    executionListener.testPlanExecutionFinished(testPlan);\n    // Verify result\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e allTests \u003d executionListener.createIssueTestSuites();\n    org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1);\n    org.junitpioneer.jupiter.IssueTestSuite issueTestSuite \u003d allTests.get(0);\n    org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1));\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:aborted-test]\", org.junit.platform.engine.TestExecutionResult.Status.ABORTED));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1), org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1)), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactly(new org.junitpioneer.jupiter.IssueTestCase(\"[test:aborted-test]\", org.junit.platform.engine.TestExecutionResult.Status.ABORTED))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "abortedIssueTestCaseCreated",
      "methodNameAfter": "abortedIssueTestCaseCreated",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 3",
        "Added: org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(1))",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(1)",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\")",
        "Assertion type unknown count changed from 4 to 3"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 13 to 12"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 4 to 3",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 3"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "multipleIssueTestCasesCreated_125159303a7165411f24e378273969de0c415754_to_35e8d0522450e023d02cb907c6ae2d65bcaa7702",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/issue/IssueExtensionExecutionListenerTests.java",
    "methodName": "multipleIssueTestCasesCreated",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        115.0,
        118.0,
        119.0,
        121.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "multipleIssueTestCasesCreated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid multipleIssueTestCasesCreated() {\n    org.junit.platform.engine.reporting.ReportEntry issueEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.REPORT_ENTRY_KEY, \"#123\");\n    org.junit.platform.launcher.TestIdentifier successfulTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"successful-test\");\n    org.junit.platform.launcher.TestIdentifier abortedTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"aborted-test\");\n    executionListener.testPlanExecutionStarted(testPlan);\n    executionListener.reportingEntryPublished(successfulTest, issueEntry);\n    executionListener.executionStarted(successfulTest);\n    executionListener.executionFinished(successfulTest, org.junit.platform.engine.TestExecutionResult.successful());\n    executionListener.reportingEntryPublished(abortedTest, issueEntry);\n    executionListener.executionStarted(abortedTest);\n    executionListener.executionFinished(abortedTest, org.junit.platform.engine.TestExecutionResult.aborted(new java.lang.RuntimeException()));\n    executionListener.testPlanExecutionFinished(testPlan);\n    // Verify result\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e allTests \u003d executionListener.createIssueTestSuites();\n    org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1);\n    org.junitpioneer.jupiter.IssueTestSuite issueTestSuite \u003d allTests.get(0);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\");\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(2);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactlyInAnyOrder(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL), new org.junitpioneer.jupiter.IssueTestCase(\"[test:aborted-test]\", org.junit.platform.engine.TestExecutionResult.Status.ABORTED));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1), org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(2), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactlyInAnyOrder(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL), new org.junitpioneer.jupiter.IssueTestCase(\"[test:aborted-test]\", org.junit.platform.engine.TestExecutionResult.Status.ABORTED))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        116.0,
        119.0,
        122.0
      ],
      "commit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "multipleIssueTestCasesCreated",
        "methodNameAfter": "multipleIssueTestCasesCreated",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 3",
          "Added: org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(2))",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(2)",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\")",
          "Assertion type unknown count changed from 4 to 3"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 17 to 16"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "multipleIssueTestCasesCreated[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid multipleIssueTestCasesCreated() {\n    org.junit.platform.engine.reporting.ReportEntry issueEntry \u003d org.junit.platform.engine.reporting.ReportEntry.from(org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener.REPORT_ENTRY_KEY, \"#123\");\n    org.junit.platform.launcher.TestIdentifier successfulTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"successful-test\");\n    org.junit.platform.launcher.TestIdentifier abortedTest \u003d org.junitpioneer.jupiter.issue.TestPlanHelper.createTestIdentifier(\"aborted-test\");\n    executionListener.testPlanExecutionStarted(testPlan);\n    executionListener.reportingEntryPublished(successfulTest, issueEntry);\n    executionListener.executionStarted(successfulTest);\n    executionListener.executionFinished(successfulTest, org.junit.platform.engine.TestExecutionResult.successful());\n    executionListener.reportingEntryPublished(abortedTest, issueEntry);\n    executionListener.executionStarted(abortedTest);\n    executionListener.executionFinished(abortedTest, org.junit.platform.engine.TestExecutionResult.aborted(new java.lang.RuntimeException()));\n    executionListener.testPlanExecutionFinished(testPlan);\n    // Verify result\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e allTests \u003d executionListener.createIssueTestSuites();\n    org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1);\n    org.junitpioneer.jupiter.IssueTestSuite issueTestSuite \u003d allTests.get(0);\n    org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(2));\n    org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactlyInAnyOrder(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL), new org.junitpioneer.jupiter.IssueTestCase(\"[test:aborted-test]\", org.junit.platform.engine.TestExecutionResult.Status.ABORTED));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(allTests.size()).isEqualTo(1), org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(2)), org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).containsExactlyInAnyOrder(new org.junitpioneer.jupiter.IssueTestCase(\"[test:successful-test]\", org.junit.platform.engine.TestExecutionResult.Status.SUCCESSFUL), new org.junitpioneer.jupiter.IssueTestCase(\"[test:aborted-test]\", org.junit.platform.engine.TestExecutionResult.Status.ABORTED))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "multipleIssueTestCasesCreated",
      "methodNameAfter": "multipleIssueTestCasesCreated",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 3",
        "Added: org.junit.jupiter.api.Assertions.assertAll(() -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\"), () -\u003e org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests().size()).isEqualTo(2))",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.tests()).hasSize(2)",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuite.issueId()).isEqualTo(\"#123\")",
        "Assertion type unknown count changed from 4 to 3"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 17 to 16"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 4 to 3",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 3"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "invalidConfigurationWithTest_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "invalidConfigurationWithTest",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        47.0,
        48.0
      ],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid invalidConfigurationWithTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"invalidConfigurationWithTest\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "invalidConfigurationWithTest",
        "methodNameAfter": "invalidConfigurationWithTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 0",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
          "Assertion type unknown count changed from 2 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.RetryingTest(3)\nvoid invalidConfigurationWithTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "invalidConfigurationWithTest",
      "methodNameAfter": "invalidConfigurationWithTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 0",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 0",
        "Removed",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "invalidConfigurationWithTest_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "invalidConfigurationWithTest",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.RetryingTest(3)\nvoid invalidConfigurationWithTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        44.0,
        45.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "invalidConfigurationWithTest",
        "methodNameAfter": "invalidConfigurationWithTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid invalidConfigurationWithTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"invalidConfigurationWithTest\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "invalidConfigurationWithTest",
      "methodNameAfter": "invalidConfigurationWithTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 0 to 2",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "invalidConfigurationWithTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "invalidConfigurationWithTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        44.0,
        45.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid invalidConfigurationWithTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"invalidConfigurationWithTest\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "invalidConfigurationWithTest",
        "methodNameAfter": "invalidConfigurationWithTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 0",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
          "Assertion type unknown count changed from 2 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.RetryingTest(3)\nvoid invalidConfigurationWithTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "invalidConfigurationWithTest",
      "methodNameAfter": "invalidConfigurationWithTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 0",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 0",
        "Removed",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "invalidConfigurationWithTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_bfb2d02188b77009c2958a9035345b3d081e214a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "invalidConfigurationWithTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "bfb2d02188b77009c2958a9035345b3d081e214a",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.RetryingTest(3)\nvoid invalidConfigurationWithTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        44.0,
        45.0
      ],
      "commit": "bfb2d02188b77009c2958a9035345b3d081e214a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "invalidConfigurationWithTest",
        "methodNameAfter": "invalidConfigurationWithTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid invalidConfigurationWithTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"invalidConfigurationWithTest\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "invalidConfigurationWithTest",
      "methodNameAfter": "invalidConfigurationWithTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 0 to 2",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "invalidConfigurationWithTest_bfb2d02188b77009c2958a9035345b3d081e214a_to_bfb2d02188b77009c2958a9035345b3d081e214a",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "invalidConfigurationWithTest",
    "beforeCommit": "bfb2d02188b77009c2958a9035345b3d081e214a",
    "afterCommit": "bfb2d02188b77009c2958a9035345b3d081e214a",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        44.0,
        45.0
      ],
      "commit": "bfb2d02188b77009c2958a9035345b3d081e214a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid invalidConfigurationWithTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"invalidConfigurationWithTest\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "bfb2d02188b77009c2958a9035345b3d081e214a",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "invalidConfigurationWithTest",
        "methodNameAfter": "invalidConfigurationWithTest",
        "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 0",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
          "Assertion type unknown count changed from 2 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 3 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "invalidConfigurationWithTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.RetryingTest(3)\nvoid invalidConfigurationWithTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "invalidConfigurationWithTest",
      "methodNameAfter": "invalidConfigurationWithTest",
      "diffSummary": "4 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 0",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleDynamicallyRegisteredTest()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfStartedTests(2).hasNumberOfSucceededTests(2)",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 3 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 0",
        "Removed",
        "Assertion type unknown count changed from 2 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        116.0,
        117.0
      ],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failsOnlyOnFirstInvocationWithUnexpectedException\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(1).hasNumberOfFailedTests(1);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.NullPointerException.class);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(1).hasNumberOfFailedTests(1), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.NullPointerException.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        113.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails",
        "methodNameAfter": "failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.NullPointerException.class)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failsOnlyOnFirstInvocationWithUnexpectedException\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(1).hasNumberOfFailedTests(1);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(1).hasNumberOfFailedTests(1)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails",
      "methodNameAfter": "failsOnlyOnFirstInvocationWithUnexpectedException_executedOnce_fails",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.NullPointerException.class)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        125.0,
        130.0
      ],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failsFirstWithExpectedThenWithUnexpectedException\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(2).hasNumberOfAbortedTests(1).hasNumberOfFailedTests(1);\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.NullPointerException.class);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(2).hasNumberOfAbortedTests(1).hasNumberOfFailedTests(1), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.NullPointerException.class)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        121.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails",
        "methodNameAfter": "failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.NullPointerException.class)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failsFirstWithExpectedThenWithUnexpectedException\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(2).hasNumberOfAbortedTests(1).hasNumberOfFailedTests(1);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(2).hasNumberOfAbortedTests(1).hasNumberOfFailedTests(1)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails",
      "methodNameAfter": "failsOnlyOnFirstInvocationWithUnexpectedException_executedTwice_fails",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.NullPointerException.class)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "failsAlways_executedThreeTimes_fails_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "failsAlways_executedThreeTimes_fails",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        137.0,
        142.0
      ],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "failsAlways_executedThreeTimes_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failsAlways_executedThreeTimes_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failsAlways\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1);\n    assertFailedTest(results);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1), assertFailedTest(results)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        131.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "failsAlways_executedThreeTimes_fails",
        "methodNameAfter": "failsAlways_executedThreeTimes_fails",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: assertFailedTest(results)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "failsAlways_executedThreeTimes_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failsAlways_executedThreeTimes_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failsAlways\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "failsAlways_executedThreeTimes_fails",
      "methodNameAfter": "failsAlways_executedThreeTimes_fails",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: assertFailedTest(results)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "executesOnceWithThreeFails_fails_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "executesOnceWithThreeFails_fails",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        190.0,
        196.0
      ],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "executesOnceWithThreeFails_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid executesOnceWithThreeFails_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"executesOnceWithThreeFails\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(4).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(1);\n    assertFailedTest(results);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(4).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(1), assertFailedTest(results)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        182.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "executesOnceWithThreeFails_fails",
        "methodNameAfter": "executesOnceWithThreeFails_fails",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: assertFailedTest(results)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "executesOnceWithThreeFails_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid executesOnceWithThreeFails_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"executesOnceWithThreeFails\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(4).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(1);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(4).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(1)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "executesOnceWithThreeFails_fails",
      "methodNameAfter": "executesOnceWithThreeFails_fails",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: assertFailedTest(results)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "failsThreeTimes_fails_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "failsThreeTimes_fails",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        204.0,
        210.0
      ],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "failsThreeTimes_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failsThreeTimes_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failsThreeTimes\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0);\n    assertFailedTest(results);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0), assertFailedTest(results)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        193.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "failsThreeTimes_fails",
        "methodNameAfter": "failsThreeTimes_fails",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Removed: assertFailedTest(results)",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "failsThreeTimes_fails[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failsThreeTimes_fails() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failsThreeTimes\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "failsThreeTimes_fails",
      "methodNameAfter": "failsThreeTimes_fails",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Removed: assertFailedTest(results)",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "failThreeTimesWithSuspend_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "failThreeTimesWithSuspend",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        288.0,
        294.0,
        295.0
      ],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "failThreeTimesWithSuspend[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failThreeTimesWithSuspend() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failThreeTimesWithSuspend\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0);\n    assertSuspendedFor(results, org.junitpioneer.jupiter.RetryingTestExtensionTests.SUSPEND_FOR);\n    assertFailedTest(results);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0), assertSuspendedFor(results, org.junitpioneer.jupiter.RetryingTestExtensionTests.SUSPEND_FOR), assertFailedTest(results)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        275.0,
        281.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "failThreeTimesWithSuspend",
        "methodNameAfter": "failThreeTimesWithSuspend",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 3 to 2",
          "Removed: assertFailedTest(results)",
          "Assertion type unknown count changed from 3 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "failThreeTimesWithSuspend[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failThreeTimesWithSuspend() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failThreeTimesWithSuspend\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0);\n    assertSuspendedFor(results, org.junitpioneer.jupiter.RetryingTestExtensionTests.SUSPEND_FOR);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0), assertSuspendedFor(results, org.junitpioneer.jupiter.RetryingTestExtensionTests.SUSPEND_FOR)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "failThreeTimesWithSuspend",
      "methodNameAfter": "failThreeTimesWithSuspend",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 3 to 2",
        "Removed: assertFailedTest(results)",
        "Assertion type unknown count changed from 3 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 3 to 2",
        "Removed",
        "Assertion type unknown count changed from 3 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "failThreeTimesWithoutSuspend_98cef28462c8b7ab66231cc5b7e8daef3b329f67_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/RetryingTestExtensionTests.java",
    "methodName": "failThreeTimesWithoutSuspend",
    "beforeCommit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        303.0,
        309.0,
        310.0
      ],
      "commit": "98cef28462c8b7ab66231cc5b7e8daef3b329f67",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "failThreeTimesWithoutSuspend[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failThreeTimesWithoutSuspend() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failThreeTimesWithoutSuspend\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0);\n    assertSuspendedFor(results, 0);\n    assertFailedTest(results);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0), assertSuspendedFor(results, 0), assertFailedTest(results)"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        289.0,
        295.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "failThreeTimesWithoutSuspend",
        "methodNameAfter": "failThreeTimesWithoutSuspend",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 3 to 2",
          "Removed: assertFailedTest(results)",
          "Assertion type unknown count changed from 3 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 4 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "failThreeTimesWithoutSuspend[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid failThreeTimesWithoutSuspend() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.RetryingTestExtensionTests.RetryingTestTestCases.class, \"failThreeTimesWithoutSuspend\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0);\n    assertSuspendedFor(results, 0);\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasNumberOfDynamicallyRegisteredTests(3).hasNumberOfAbortedTests(2).hasNumberOfFailedTests(1).hasNumberOfSucceededTests(0), assertSuspendedFor(results, 0)"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "failThreeTimesWithoutSuspend",
      "methodNameAfter": "failThreeTimesWithoutSuspend",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 3 to 2",
        "Removed: assertFailedTest(results)",
        "Assertion type unknown count changed from 3 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 4 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 3 to 2",
        "Removed",
        "Assertion type unknown count changed from 3 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.InterruptedException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.InterruptedException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException",
          "Removed usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException",
        "Removed usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.InterruptedException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.InterruptedException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException",
          "Removed usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException",
        "Removed usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.InterruptedException"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.InterruptedException"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.io.IOException",
          "Removed usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.io.IOException",
        "Removed usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test1_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test1",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(1)\nvoid test1() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test1",
        "methodNameAfter": "test1",
        "diffSummary": "import usage changes, 1 logic changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test1[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test1() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test1",
      "methodNameAfter": "test1",
      "diffSummary": "import usage changes, 1 logic changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        156.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.assertj.core.api.Assertions.fail(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        179.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: // fail test with assertion org.assertj.core.api.Assertions.fail(\"\")",
          "Removed: org.assertj.core.api.Assertions.fail(\"\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fail test with assertion\n    org.assertj.core.api.Assertions.fail(\"\");\n}",
      "assertion_type": "// fail test with assertion\norg.assertj.core.api.Assertions.fail(\"\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: // fail test with assertion org.assertj.core.api.Assertions.fail(\"\")",
        "Removed: org.assertj.core.api.Assertions.fail(\"\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        179.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fail test with assertion\n    org.assertj.core.api.Assertions.fail(\"\");\n}",
      "assertion_type": "// fail test with assertion\norg.assertj.core.api.Assertions.fail(\"\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes, import usage changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: // fail test with assertion org.assertj.core.api.Assertions.fail(\"\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes, import usage changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: // fail test with assertion org.assertj.core.api.Assertions.fail(\"\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.InterruptedException",
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.InterruptedException",
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junitpioneer.testkit.PioneerTestKit.abort();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junitpioneer.testkit.PioneerTestKit.abort();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test2() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        179.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: // fail test with assertion org.junit.jupiter.api.Assertions.fail()",
          "New assertion type: unknown"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fail test with assertion\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "// fail test with assertion\norg.junit.jupiter.api.Assertions.fail()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: // fail test with assertion org.junit.jupiter.api.Assertions.fail()",
        "New assertion type: unknown"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        179.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fail test with assertion\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "// fail test with assertion\norg.junit.jupiter.api.Assertions.fail()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes, import usage changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: // fail test with assertion org.junit.jupiter.api.Assertions.fail()",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes, import usage changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: // fail test with assertion org.junit.jupiter.api.Assertions.fail()",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.InterruptedException",
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.InterruptedException",
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junitpioneer.testkit.PioneerTestKit.abort();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junitpioneer.testkit.PioneerTestKit.abort();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid test2() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        179.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: // fail test with assertion org.junit.jupiter.api.Assertions.fail()",
          "New assertion type: unknown"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fail test with assertion\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "// fail test with assertion\norg.junit.jupiter.api.Assertions.fail()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: // fail test with assertion org.junit.jupiter.api.Assertions.fail()",
        "New assertion type: unknown"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        179.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    // fail test with assertion\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "// fail test with assertion\norg.junit.jupiter.api.Assertions.fail()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "3 assertion changes, import usage changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: // fail test with assertion org.junit.jupiter.api.Assertions.fail()",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "New usage: java.io.IOException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "3 assertion changes, import usage changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: // fail test with assertion org.junit.jupiter.api.Assertions.fail()",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "New usage: java.io.IOException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.io.IOException {\n    throw new java.io.IOException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "New usage: java.lang.InterruptedException",
          "Removed usage: java.io.IOException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "New usage: java.lang.InterruptedException",
        "Removed usage: java.io.IOException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 2,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() throws java.lang.InterruptedException {\n    throw new java.lang.InterruptedException();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "import refactoring",
        "refactoringType": "IMPORT_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "import usage changes",
        "assertionChanges": [],
        "importChanges": [
          "Removed usage: java.lang.InterruptedException"
        ],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junitpioneer.testkit.PioneerTestKit.abort();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "import refactoring",
      "refactoringType": "IMPORT_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "import usage changes",
      "assertionChanges": [],
      "importChanges": [
        "Removed usage: java.lang.InterruptedException"
      ],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "IMPORT_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": false,
      "has_import_changes": true,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test2_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DisableIfTestFailsTests.java",
    "methodName": "test2",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n    org.junitpioneer.testkit.PioneerTestKit.abort();\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test2",
        "methodNameAfter": "test2",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test2[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.Order(2)\nvoid test2() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test2",
      "methodNameAfter": "test2",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "simpleTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisableIfArgumentExtensionTests.java",
    "methodName": "simpleTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        121.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not intercept non-parameterized tests\")\nvoid simpleTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.params.DisableIfArgumentExtensionTests.BadConfigTestCases.class, \"simpleTest\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "simpleTest",
        "methodNameAfter": "simpleTest",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.params.DisableIfAnyArgument(contains \u003d \"A\")\nvoid simpleTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "simpleTest",
      "methodNameAfter": "simpleTest",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "simpleTest_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisableIfArgumentExtensionTests.java",
    "methodName": "simpleTest",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.params.DisableIfAnyArgument(contains \u003d \"A\")\nvoid simpleTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        121.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "simpleTest",
        "methodNameAfter": "simpleTest",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not intercept non-parameterized tests\")\nvoid simpleTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.params.DisableIfArgumentExtensionTests.BadConfigTestCases.class, \"simpleTest\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "simpleTest",
      "methodNameAfter": "simpleTest",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "simpleTest_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisableIfArgumentExtensionTests.java",
    "methodName": "simpleTest",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        121.0
      ],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not intercept non-parameterized tests\")\nvoid simpleTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.params.DisableIfArgumentExtensionTests.BadConfigTestCases.class, \"simpleTest\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "simpleTest",
        "methodNameAfter": "simpleTest",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.params.DisableIfAnyArgument(contains \u003d \"A\")\nvoid simpleTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "simpleTest",
      "methodNameAfter": "simpleTest",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "simpleTest_0a8d9fc5308c0f69ce0110461bb95fd9e61e551b_to_b49ff0a82081530681aba7c7a3071d65f14d0ad2",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisableIfArgumentExtensionTests.java",
    "methodName": "simpleTest",
    "beforeCommit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
    "afterCommit": "b49ff0a82081530681aba7c7a3071d65f14d0ad2",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "0a8d9fc5308c0f69ce0110461bb95fd9e61e551b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.params.DisableIfAnyArgument(contains \u003d \"A\")\nvoid simpleTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        121.0
      ],
      "commit": "b49ff0a82081530681aba7c7a3071d65f14d0ad2",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "simpleTest",
        "methodNameAfter": "simpleTest",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
          "New assertion type: unknown"
        ],
        "importChanges": [
          "New usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 0 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not intercept non-parameterized tests\")\nvoid simpleTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.params.DisableIfArgumentExtensionTests.BadConfigTestCases.class, \"simpleTest\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "simpleTest",
      "methodNameAfter": "simpleTest",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
        "New assertion type: unknown"
      ],
      "importChanges": [
        "New usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 0 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "simpleTest_b49ff0a82081530681aba7c7a3071d65f14d0ad2_to_b49ff0a82081530681aba7c7a3071d65f14d0ad2",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/DisableIfArgumentExtensionTests.java",
    "methodName": "simpleTest",
    "beforeCommit": "b49ff0a82081530681aba7c7a3071d65f14d0ad2",
    "afterCommit": "b49ff0a82081530681aba7c7a3071d65f14d0ad2",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        121.0
      ],
      "commit": "b49ff0a82081530681aba7c7a3071d65f14d0ad2",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"does not intercept non-parameterized tests\")\nvoid simpleTest() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.params.DisableIfArgumentExtensionTests.BadConfigTestCases.class, \"simpleTest\");\n    org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest();\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "b49ff0a82081530681aba7c7a3071d65f14d0ad2",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "simpleTest",
        "methodNameAfter": "simpleTest",
        "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.testkit.ExecutionResults"
        ],
        "logicChanges": [
          "Statement count changed from 2 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "simpleTest[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.params.DisableIfAnyArgument(contains \u003d \"A\")\nvoid simpleTest() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "simpleTest",
      "methodNameAfter": "simpleTest",
      "diffSummary": "3 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.assertThat(results).hasSingleSucceededTest()",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.testkit.ExecutionResults"
      ],
      "logicChanges": [
        "Statement count changed from 2 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 5,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortsOnTestFailure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "abortsOnTestFailure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        39.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortsOnTestFailure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid abortsOnTestFailure() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailTestCases.class, \"failure\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\"));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        40.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "abortsOnTestFailure",
        "methodNameAfter": "abortsOnTestFailure",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortsOnTestFailure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid abortsOnTestFailure() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailTestCases.class, \"failure\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "abortsOnTestFailure",
      "methodNameAfter": "abortsOnTestFailure",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortsOnTestFailureWithMetaAnnotation_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "abortsOnTestFailureWithMetaAnnotation",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        51.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortsOnTestFailureWithMetaAnnotation[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid abortsOnTestFailureWithMetaAnnotation() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailTestCases.class, \"metaAnnotationFailure\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\"));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        52.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "abortsOnTestFailureWithMetaAnnotation",
        "methodNameAfter": "abortsOnTestFailureWithMetaAnnotation",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortsOnTestFailureWithMetaAnnotation[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid abortsOnTestFailureWithMetaAnnotation() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailTestCases.class, \"metaAnnotationFailure\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "abortsOnTestFailureWithMetaAnnotation",
      "methodNameAfter": "abortsOnTestFailureWithMetaAnnotation",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortsOnTestFailureWithMessage_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "abortsOnTestFailureWithMessage",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        63.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortsOnTestFailureWithMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid abortsOnTestFailureWithMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailTestCases.class, \"failureWithMessage\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Custom message\").hasCause(new java.lang.AssertionError(\"failed\"));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Custom message\").hasCause(new java.lang.AssertionError(\"failed\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        64.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "abortsOnTestFailureWithMessage",
        "methodNameAfter": "abortsOnTestFailureWithMessage",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Custom message\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Custom message\").hasCause(new java.lang.AssertionError(\"failed\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortsOnTestFailureWithMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid abortsOnTestFailureWithMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailTestCases.class, \"failureWithMessage\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Custom message\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"));\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Custom message\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "abortsOnTestFailureWithMessage",
      "methodNameAfter": "abortsOnTestFailureWithMessage",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Custom message\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\"))",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Custom message\").hasCause(new java.lang.AssertionError(\"failed\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "doesNotAbortOnAfterEachTestFailure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "doesNotAbortOnAfterEachTestFailure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        117.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "doesNotAbortOnAfterEachTestFailure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid doesNotAbortOnAfterEachTestFailure() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailFailureAfterEachTestCases.class, \"test\");\n    // Note: This check for suppressed exception actually tests JUnit platform behavior\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.AssertionError.class).hasMessage(\"Test marked as \u0027expected to fail\u0027 succeeded; remove @ExpectedToFail from it\").hasSuppressedException(new java.lang.AssertionError(\"after each\"));\n}",
      "assertion_type": "// Note: This check for suppressed exception actually tests JUnit platform behavior\norg.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.AssertionError.class).hasMessage(\"Test marked as \u0027expected to fail\u0027 succeeded; remove @ExpectedToFail from it\").hasSuppressedException(new java.lang.AssertionError(\"after each\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        118.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "doesNotAbortOnAfterEachTestFailure",
        "methodNameAfter": "doesNotAbortOnAfterEachTestFailure",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: // Note: This check for suppressed exception actually tests JUnit platform behavior org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.AssertionError.class).hasMessage(\"Test marked as \u0027expected to fail\u0027 succeeded; remove @ExpectedToFail from it\").hasSuppressedException(new org.opentest4j.AssertionFailedError(\"after each\"))",
          "Removed: // Note: This check for suppressed exception actually tests JUnit platform behavior org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.AssertionError.class).hasMessage(\"Test marked as \u0027expected to fail\u0027 succeeded; remove @ExpectedToFail from it\").hasSuppressedException(new java.lang.AssertionError(\"after each\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "doesNotAbortOnAfterEachTestFailure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid doesNotAbortOnAfterEachTestFailure() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailFailureAfterEachTestCases.class, \"test\");\n    // Note: This check for suppressed exception actually tests JUnit platform behavior\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.AssertionError.class).hasMessage(\"Test marked as \u0027expected to fail\u0027 succeeded; remove @ExpectedToFail from it\").hasSuppressedException(new org.opentest4j.AssertionFailedError(\"after each\"));\n}",
      "assertion_type": "// Note: This check for suppressed exception actually tests JUnit platform behavior\norg.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.AssertionError.class).hasMessage(\"Test marked as \u0027expected to fail\u0027 succeeded; remove @ExpectedToFail from it\").hasSuppressedException(new org.opentest4j.AssertionFailedError(\"after each\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "doesNotAbortOnAfterEachTestFailure",
      "methodNameAfter": "doesNotAbortOnAfterEachTestFailure",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: // Note: This check for suppressed exception actually tests JUnit platform behavior org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.AssertionError.class).hasMessage(\"Test marked as \u0027expected to fail\u0027 succeeded; remove @ExpectedToFail from it\").hasSuppressedException(new org.opentest4j.AssertionFailedError(\"after each\"))",
        "Removed: // Note: This check for suppressed exception actually tests JUnit platform behavior org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleFailedTest().withExceptionInstanceOf(java.lang.AssertionError.class).hasMessage(\"Test marked as \u0027expected to fail\u0027 succeeded; remove @ExpectedToFail from it\").hasSuppressedException(new java.lang.AssertionError(\"after each\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "afterEachAbortAfterTestFailure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "afterEachAbortAfterTestFailure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        139.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "afterEachAbortAfterTestFailure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid afterEachAbortAfterTestFailure() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailFailureThenAbortAfterEachTestCases.class, \"test\");\n    // Note: This check for suppressed exception actually tests JUnit platform behavior\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\")).has(new org.assertj.core.api.Condition\u003c\u003e((java.lang.Throwable throwable) -\u003e {\n        java.lang.Throwable[] suppressed \u003d throwable.getSuppressed();\n        return ((suppressed.length \u003d\u003d 1) \u0026\u0026 (suppressed[0] instanceof org.opentest4j.TestAbortedException)) \u0026\u0026 // Ignore message prefix generated by JUnit\n        suppressed[0].getMessage().endsWith(\"custom assumption message\");\n    }, \"suppressed JUnit abort exception\"));\n}",
      "assertion_type": "// Note: This check for suppressed exception actually tests JUnit platform behavior\norg.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\")).has(new org.assertj.core.api.Condition\u003c\u003e((java.lang.Throwable throwable) -\u003e {\n    java.lang.Throwable[] suppressed \u003d throwable.getSuppressed();\n    return ((suppressed.length \u003d\u003d 1) \u0026\u0026 (suppressed[0] instanceof org.opentest4j.TestAbortedException)) \u0026\u0026 // Ignore message prefix generated by JUnit\n    suppressed[0].getMessage().endsWith(\"custom assumption message\");\n}, \"suppressed JUnit abort exception\"))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        140.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "afterEachAbortAfterTestFailure",
        "methodNameAfter": "afterEachAbortAfterTestFailure",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: // Note: This check for suppressed exception actually tests JUnit platform behavior org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\")).has(new org.assertj.core.api.Condition((java.lang.Throwable throwable) -\u003e { suppressed \u003d throwable.getSuppressed(); return ((suppressed.length \u003d\u003d 1) \u0026\u0026 (suppressed[0] instanceof org.opentest4j.TestAbortedException))// Ignore message prefix generated by JUnit \u0026\u0026 suppressed[0].getMessage().endsWith(\"custom assumption message\"); }, \"suppressed JUnit abort exception\"))",
          "Removed: // Note: This check for suppressed exception actually tests JUnit platform behavior org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\")).has(new org.assertj.core.api.Condition((java.lang.Throwable throwable) -\u003e { suppressed \u003d throwable.getSuppressed(); return ((suppressed.length \u003d\u003d 1) \u0026\u0026 (suppressed[0] instanceof org.opentest4j.TestAbortedException))// Ignore message prefix generated by JUnit \u0026\u0026 suppressed[0].getMessage().endsWith(\"custom assumption message\"); }, \"suppressed JUnit abort exception\"))"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "afterEachAbortAfterTestFailure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid afterEachAbortAfterTestFailure() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailFailureThenAbortAfterEachTestCases.class, \"test\");\n    // Note: This check for suppressed exception actually tests JUnit platform behavior\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\")).has(new org.assertj.core.api.Condition\u003c\u003e((java.lang.Throwable throwable) -\u003e {\n        java.lang.Throwable[] suppressed \u003d throwable.getSuppressed();\n        return ((suppressed.length \u003d\u003d 1) \u0026\u0026 (suppressed[0] instanceof org.opentest4j.TestAbortedException)) \u0026\u0026 // Ignore message prefix generated by JUnit\n        suppressed[0].getMessage().endsWith(\"custom assumption message\");\n    }, \"suppressed JUnit abort exception\"));\n}",
      "assertion_type": "// Note: This check for suppressed exception actually tests JUnit platform behavior\norg.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\")).has(new org.assertj.core.api.Condition\u003c\u003e((java.lang.Throwable throwable) -\u003e {\n    java.lang.Throwable[] suppressed \u003d throwable.getSuppressed();\n    return ((suppressed.length \u003d\u003d 1) \u0026\u0026 (suppressed[0] instanceof org.opentest4j.TestAbortedException)) \u0026\u0026 // Ignore message prefix generated by JUnit\n    suppressed[0].getMessage().endsWith(\"custom assumption message\");\n}, \"suppressed JUnit abort exception\"))"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "afterEachAbortAfterTestFailure",
      "methodNameAfter": "afterEachAbortAfterTestFailure",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: // Note: This check for suppressed exception actually tests JUnit platform behavior org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new org.opentest4j.AssertionFailedError(\"failed\")).has(new org.assertj.core.api.Condition((java.lang.Throwable throwable) -\u003e { suppressed \u003d throwable.getSuppressed(); return ((suppressed.length \u003d\u003d 1) \u0026\u0026 (suppressed[0] instanceof org.opentest4j.TestAbortedException))// Ignore message prefix generated by JUnit \u0026\u0026 suppressed[0].getMessage().endsWith(\"custom assumption message\"); }, \"suppressed JUnit abort exception\"))",
        "Removed: // Note: This check for suppressed exception actually tests JUnit platform behavior org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleStartedTest().whichAborted().withExceptionInstanceOf(org.opentest4j.TestAbortedException.class).hasMessage(\"Test marked as temporarily \u0027expected to fail\u0027 failed as expected\").hasCause(new java.lang.AssertionError(\"failed\")).has(new org.assertj.core.api.Condition((java.lang.Throwable throwable) -\u003e { suppressed \u003d throwable.getSuppressed(); return ((suppressed.length \u003d\u003d 1) \u0026\u0026 (suppressed[0] instanceof org.opentest4j.TestAbortedException))// Ignore message prefix generated by JUnit \u0026\u0026 suppressed[0].getMessage().endsWith(\"custom assumption message\"); }, \"suppressed JUnit abort exception\"))"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "failure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "failure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        187.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid failure() {\n    org.assertj.core.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"failed\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "failure",
        "methodNameAfter": "failure",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid failure() {\n    org.junit.jupiter.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "failure",
      "methodNameAfter": "failure",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "metaAnnotationFailure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "metaAnnotationFailure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        193.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "metaAnnotationFailure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailTestCases.ExpectedToFailMetaAnnotation\nvoid metaAnnotationFailure() {\n    org.assertj.core.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"failed\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "metaAnnotationFailure",
        "methodNameAfter": "metaAnnotationFailure",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "metaAnnotationFailure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFailExtensionTests.ExpectedToFailTestCases.ExpectedToFailMetaAnnotation\nvoid metaAnnotationFailure() {\n    org.junit.jupiter.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "metaAnnotationFailure",
      "methodNameAfter": "metaAnnotationFailure",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "failureWithMessage_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "failureWithMessage",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        199.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "failureWithMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail(\"Custom message\")\nvoid failureWithMessage() {\n    org.assertj.core.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"failed\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "failureWithMessage",
        "methodNameAfter": "failureWithMessage",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "failureWithMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail(\"Custom message\")\nvoid failureWithMessage() {\n    org.junit.jupiter.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "failureWithMessage",
      "methodNameAfter": "failureWithMessage",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_6ecdc91036aa9fd161ada94dbe418989d69d830c_to_6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "test",
    "beforeCommit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "afterCommit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.junit.jupiter.api.Assumptions.assumeTrue(false, \"custom assumption message\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_6ecdc91036aa9fd161ada94dbe418989d69d830c_to_6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "test",
    "beforeCommit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "afterCommit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.junit.jupiter.api.Assumptions.assumeTrue(false, \"custom assumption message\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        357.0
      ],
      "commit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.fail(\"failed\")",
          "New assertion type: unknown"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.assertj.core.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"failed\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.fail(\"failed\")",
        "New assertion type: unknown"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_6ecdc91036aa9fd161ada94dbe418989d69d830c_to_6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "test",
    "beforeCommit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "afterCommit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        357.0
      ],
      "commit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.assertj.core.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"failed\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "6ecdc91036aa9fd161ada94dbe418989d69d830c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.junit.jupiter.api.Assumptions.assumeTrue(false, \"custom assumption message\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.junit.jupiter.api.Assumptions.assumeTrue(false, \"custom assumption message\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        288.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 0 to 1",
          "Added: org.assertj.core.api.Assertions.fail(\"failed\")",
          "New assertion type: unknown"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.assertj.core.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"failed\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 0 to 1",
        "Added: org.assertj.core.api.Assertions.fail(\"failed\")",
        "New assertion type: unknown"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 0 to 1",
        "Added",
        "New assertion type"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "test",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        288.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.assertj.core.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"failed\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "3 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "3 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"failed\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 4,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "test",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 0 to 1"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.junit.jupiter.api.Assumptions.assumeTrue(false, \"custom assumption message\");\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 0 to 1"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "test_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ExpectedToFailExtensionTests.java",
    "methodName": "test",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n    org.junit.jupiter.api.Assertions.fail(\"failed\");\n}",
      "assertion_type": "No Assertions"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "logic refactoring",
        "refactoringType": "LOGIC_REFACTORING",
        "methodNameBefore": "test",
        "methodNameAfter": "test",
        "diffSummary": "1 logic changes",
        "assertionChanges": [],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 1 to 0"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "test[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ExpectedToFail\nvoid test() {\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "logic refactoring",
      "refactoringType": "LOGIC_REFACTORING",
      "methodNameBefore": "test",
      "methodNameAfter": "test",
      "diffSummary": "1 logic changes",
      "assertionChanges": [],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 1 to 0"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "LOGIC_REFACTORING",
      "has_logic_changes": true,
      "has_assertion_changes": false,
      "has_import_changes": false,
      "change_count": 1,
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "testIssueCases_35e8d0522450e023d02cb907c6ae2d65bcaa7702_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/issue/IssueExtensionIntegrationTests.java",
    "methodName": "testIssueCases",
    "beforeCommit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        49.0,
        50.0,
        59.0,
        60.0
      ],
      "commit": "35e8d0522450e023d02cb907c6ae2d65bcaa7702",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 4.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "testIssueCases[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid testIssueCases() {\n    org.junit.platform.launcher.core.LauncherFactory.create().execute(org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request().selectors(org.junit.platform.engine.discovery.DiscoverySelectors.selectClass(org.junitpioneer.jupiter.issue.IssueExtensionIntegrationTests.IssueIntegrationTestCases.class)).build());\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e issueTestSuites \u003d StoringIssueProcessor.ISSUE_TEST_SUITES;\n    org.assertj.core.api.Assertions.assertThat(issueTestSuites).hasSize(4);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuites).extracting(IssueTestSuite::issueId).containsExactlyInAnyOrder(\"Poem #1\", \"Poem #2\", \"Poem #3\", \"Poem #5\");\n    org.junitpioneer.jupiter.IssueTestSuite firstSuite \u003d issueTestSuites.stream().filter(issueTestSuite -\u003e issueTestSuite.issueId().equals(\"Poem #1\")).findFirst().orElseThrow(org.opentest4j.AssertionFailedError::new);\n    org.assertj.core.api.Assertions.assertThat(firstSuite.tests()).hasSize(2);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuites).allSatisfy(issueTestSuite -\u003e assertThat(issueTestSuite.tests()).allSatisfy(org.junitpioneer.jupiter.issue.IssueExtensionIntegrationTests::assertStatus));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(issueTestSuites).hasSize(4), org.assertj.core.api.Assertions.assertThat(issueTestSuites).extracting(IssueTestSuite::issueId).containsExactlyInAnyOrder(\"Poem #1\", \"Poem #2\", \"Poem #3\", \"Poem #5\"), org.assertj.core.api.Assertions.assertThat(firstSuite.tests()).hasSize(2), org.assertj.core.api.Assertions.assertThat(issueTestSuites).allSatisfy(issueTestSuite -\u003e assertThat(issueTestSuite.tests()).allSatisfy(org.junitpioneer.jupiter.issue.IssueExtensionIntegrationTests::assertStatus))"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        47.0,
        48.0,
        51.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 3.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "testIssueCases",
        "methodNameAfter": "testIssueCases",
        "diffSummary": "7 assertion changes, import usage changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 4 to 3",
          "Added: org.assertj.core.api.Assertions.assertThat(issueTestSuites).extracting(IssueTestSuite::issueId).containsExactlyInAnyOrder(\"Poem #1\", \"Poem #2\", \"Poem #3\")",
          "Added: org.assertj.core.api.Assertions.assertThat(issueTestSuites).hasSize(3)",
          "Removed: org.assertj.core.api.Assertions.assertThat(firstSuite.tests()).hasSize(2)",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuites).extracting(IssueTestSuite::issueId).containsExactlyInAnyOrder(\"Poem #1\", \"Poem #2\", \"Poem #3\", \"Poem #5\")",
          "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuites).hasSize(4)",
          "Assertion type unknown count changed from 4 to 3"
        ],
        "importChanges": [
          "Removed usage: org.junitpioneer.jupiter.IssueTestSuite"
        ],
        "logicChanges": [
          "Statement count changed from 7 to 5"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "testIssueCases[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\nvoid testIssueCases() {\n    org.junit.platform.launcher.core.LauncherFactory.create().execute(org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request().selectors(org.junit.platform.engine.discovery.DiscoverySelectors.selectClass(org.junitpioneer.jupiter.issue.IssueExtensionIntegrationTests.IssueIntegrationTestCases.class)).build());\n    java.util.List\u003corg.junitpioneer.jupiter.IssueTestSuite\u003e issueTestSuites \u003d StoringIssueProcessor.ISSUE_TEST_SUITES;\n    org.assertj.core.api.Assertions.assertThat(issueTestSuites).hasSize(3);\n    org.assertj.core.api.Assertions.assertThat(issueTestSuites).extracting(IssueTestSuite::issueId).containsExactlyInAnyOrder(\"Poem #1\", \"Poem #2\", \"Poem #3\");\n    org.assertj.core.api.Assertions.assertThat(issueTestSuites).allSatisfy(issueTestSuite -\u003e assertThat(issueTestSuite.tests()).allSatisfy(org.junitpioneer.jupiter.issue.IssueExtensionIntegrationTests::assertStatus));\n}",
      "assertion_type": "org.assertj.core.api.Assertions.assertThat(issueTestSuites).hasSize(3), org.assertj.core.api.Assertions.assertThat(issueTestSuites).extracting(IssueTestSuite::issueId).containsExactlyInAnyOrder(\"Poem #1\", \"Poem #2\", \"Poem #3\"), org.assertj.core.api.Assertions.assertThat(issueTestSuites).allSatisfy(issueTestSuite -\u003e assertThat(issueTestSuite.tests()).allSatisfy(org.junitpioneer.jupiter.issue.IssueExtensionIntegrationTests::assertStatus))"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "testIssueCases",
      "methodNameAfter": "testIssueCases",
      "diffSummary": "7 assertion changes, import usage changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 4 to 3",
        "Added: org.assertj.core.api.Assertions.assertThat(issueTestSuites).extracting(IssueTestSuite::issueId).containsExactlyInAnyOrder(\"Poem #1\", \"Poem #2\", \"Poem #3\")",
        "Added: org.assertj.core.api.Assertions.assertThat(issueTestSuites).hasSize(3)",
        "Removed: org.assertj.core.api.Assertions.assertThat(firstSuite.tests()).hasSize(2)",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuites).extracting(IssueTestSuite::issueId).containsExactlyInAnyOrder(\"Poem #1\", \"Poem #2\", \"Poem #3\", \"Poem #5\")",
        "Removed: org.assertj.core.api.Assertions.assertThat(issueTestSuites).hasSize(4)",
        "Assertion type unknown count changed from 4 to 3"
      ],
      "importChanges": [
        "Removed usage: org.junitpioneer.jupiter.IssueTestSuite"
      ],
      "logicChanges": [
        "Statement count changed from 7 to 5"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": true,
      "change_count": 9,
      "assertion_change_types": [
        "Assertion count changed from 4 to 3",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 4 to 3"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "successfulTest_logsMessage_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "successfulTest_logsMessage",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        122.0,
        123.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        168.0,
        169.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "successfulTest_logsMessage",
        "methodNameAfter": "successfulTest_logsMessage",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onSuccess_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "successfulTest_logsMessage",
      "methodNameAfter": "successfulTest_logsMessage",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "successfulTest_logsMessage_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "successfulTest_logsMessage",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        168.0,
        169.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onSuccess_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        122.0,
        123.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "successfulTest_logsMessage",
        "methodNameAfter": "successfulTest_logsMessage",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "successfulTest_logsMessage",
      "methodNameAfter": "successfulTest_logsMessage",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "successfulTest_logsMessage_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "successfulTest_logsMessage",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        122.0,
        123.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        168.0,
        169.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "successfulTest_logsMessage",
        "methodNameAfter": "successfulTest_logsMessage",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onSuccess_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "successfulTest_logsMessage",
      "methodNameAfter": "successfulTest_logsMessage",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "successfulTest_logsMessage_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "successfulTest_logsMessage",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        168.0,
        169.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onSuccess_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        122.0,
        123.0
      ],
      "commit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "successfulTest_logsMessage",
        "methodNameAfter": "successfulTest_logsMessage",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "successfulTest_logsMessage",
      "methodNameAfter": "successfulTest_logsMessage",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "successfulTest_logsMessage_63c82ed9c417048f88c334aad5678fe1148b3d4b_to_63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "successfulTest_logsMessage",
    "beforeCommit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "afterCommit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        122.0,
        123.0
      ],
      "commit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        168.0,
        169.0
      ],
      "commit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion refactoring",
        "refactoringType": "ASSERTION_REFACTORING",
        "methodNameBefore": "successfulTest_logsMessage",
        "methodNameAfter": "successfulTest_logsMessage",
        "diffSummary": "2 assertion changes",
        "assertionChanges": [
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "successfulTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for successful test\")\nvoid successfulTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onSuccess_success\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleSucceededTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")"
    },
    "changes": {
      "changeType": "assertion refactoring",
      "refactoringType": "ASSERTION_REFACTORING",
      "methodNameBefore": "successfulTest_logsMessage",
      "methodNameAfter": "successfulTest_logsMessage",
      "diffSummary": "2 assertion changes",
      "assertionChanges": [
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"it was in the bleak December\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Tis some visitor\u0027, I muttered\")"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_REFACTORING",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 2,
      "assertion_change_types": [
        "Added",
        "Removed"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortedTest_logsMessage_125159303a7165411f24e378273969de0c415754_to_125159303a7165411f24e378273969de0c415754",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "abortedTest_logsMessage",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "125159303a7165411f24e378273969de0c415754",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        280.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "abortedTest_logsMessage",
        "methodNameAfter": "abortedTest_logsMessage",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onAborted_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "abortedTest_logsMessage",
      "methodNameAfter": "abortedTest_logsMessage",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortedTest_logsMessage_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "abortedTest_logsMessage",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        280.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onAborted_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "abortedTest_logsMessage",
        "methodNameAfter": "abortedTest_logsMessage",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "abortedTest_logsMessage",
      "methodNameAfter": "abortedTest_logsMessage",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortedTest_logsMessage_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "abortedTest_logsMessage",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        280.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "abortedTest_logsMessage",
        "methodNameAfter": "abortedTest_logsMessage",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onAborted_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "abortedTest_logsMessage",
      "methodNameAfter": "abortedTest_logsMessage",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortedTest_logsMessage_8a4ad00b7d4e6d7847be646feca59b6937dc696c_to_63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "abortedTest_logsMessage",
    "beforeCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "afterCommit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        280.0
      ],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onAborted_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0
      ],
      "commit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "abortedTest_logsMessage",
        "methodNameAfter": "abortedTest_logsMessage",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 2",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
          "Assertion type unknown count changed from 1 to 2"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 2 to 3"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "abortedTest_logsMessage",
      "methodNameAfter": "abortedTest_logsMessage",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 2",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 2 to 3"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 1 to 2",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 1 to 2"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "abortedTest_logsMessage_63c82ed9c417048f88c334aad5678fe1148b3d4b_to_63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "abortedTest_logsMessage",
    "beforeCommit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "afterCommit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        142.0,
        143.0
      ],
      "commit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 2.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"always_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest();\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest(), org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")"
    },
    "afterState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        280.0
      ],
      "commit": "63c82ed9c417048f88c334aad5678fe1148b3d4b",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "abortedTest_logsMessage",
        "methodNameAfter": "abortedTest_logsMessage",
        "diffSummary": "5 assertion changes, 1 logic changes",
        "assertionChanges": [
          "Assertion count changed from 2 to 1",
          "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
          "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
          "Assertion type unknown count changed from 2 to 1"
        ],
        "importChanges": [],
        "logicChanges": [
          "Statement count changed from 3 to 2"
        ],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "abortedTest_logsMessage[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junit.jupiter.api.DisplayName(\"logs for aborted test\")\nvoid abortedTest_logsMessage() {\n    org.junitpioneer.testkit.ExecutionResults results \u003d org.junitpioneer.testkit.PioneerTestKit.executeTestMethod(org.junitpioneer.jupiter.ReportEntryExtensionTests.ReportEntryTestCases.class, \"onAborted_aborted\");\n    org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\");\n}",
      "assertion_type": "org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "abortedTest_logsMessage",
      "methodNameAfter": "abortedTest_logsMessage",
      "diffSummary": "5 assertion changes, 1 logic changes",
      "assertionChanges": [
        "Assertion count changed from 2 to 1",
        "Added: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"Some late visitor entreating entrance at my chamber door;—\")",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleAbortedTest()",
        "Removed: org.junitpioneer.testkit.assertion.PioneerAssert.assertThat(results).hasSingleReportEntry().withKeyAndValue(\"value\", \"\u0027Only this and nothing more.\u0027\")",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "importChanges": [],
      "logicChanges": [
        "Statement count changed from 3 to 2"
      ],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": true,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 6,
      "assertion_change_types": [
        "Assertion count changed from 2 to 1",
        "Added",
        "Removed",
        "Assertion type unknown count changed from 2 to 1"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "always_failure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "always_failure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        467.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "always_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"\u0027Tapping at my chamber door\u0027 -\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ALWAYS)\nvoid always_failure() {\n    org.assertj.core.api.Assertions.fail(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "always_failure",
        "methodNameAfter": "always_failure",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "always_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"\u0027Tapping at my chamber door\u0027 -\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ALWAYS)\nvoid always_failure() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "always_failure",
      "methodNameAfter": "always_failure",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "onSuccess_failure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "onSuccess_failure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        490.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "onSuccess_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"And each separate dying ember wrought its ghost upon the floor.\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_SUCCESS)\nvoid onSuccess_failure() {\n    org.assertj.core.api.Assertions.fail(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "onSuccess_failure",
        "methodNameAfter": "onSuccess_failure",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "onSuccess_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"And each separate dying ember wrought its ghost upon the floor.\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_SUCCESS)\nvoid onSuccess_failure() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "onSuccess_failure",
      "methodNameAfter": "onSuccess_failure",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "onFailure_failure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "onFailure_failure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        513.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "onFailure_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"Nameless here for evermore.\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_FAILURE)\nvoid onFailure_failure() {\n    org.assertj.core.api.Assertions.fail(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "onFailure_failure",
        "methodNameAfter": "onFailure_failure",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "onFailure_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"Nameless here for evermore.\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_FAILURE)\nvoid onFailure_failure() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "onFailure_failure",
      "methodNameAfter": "onFailure_failure",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "onAborted_failure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "onAborted_failure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        536.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "onAborted_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"Tis some visitor entreating entrance at my chamber door—\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_ABORTED)\nvoid onAborted_failure() {\n    org.assertj.core.api.Assertions.fail(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "onAborted_failure",
        "methodNameAfter": "onAborted_failure",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "onAborted_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"Tis some visitor entreating entrance at my chamber door—\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_ABORTED)\nvoid onAborted_failure() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "onAborted_failure",
      "methodNameAfter": "onAborted_failure",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  },
  {
    "chunkId": "repeated_failure_125159303a7165411f24e378273969de0c415754_to_8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "filePath": "/Users/jesusvaladez/Desktop/RefactoringMiner 2/src/main/resources/junit-pioneer/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java",
    "methodName": "repeated_failure",
    "beforeCommit": "125159303a7165411f24e378273969de0c415754",
    "afterCommit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
    "beforeState": {
      "has_assertions": true,
      "assertion_traces": [],
      "assertion_lines": [
        565.0
      ],
      "commit": "125159303a7165411f24e378273969de0c415754",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 1.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "method_signature": "repeated_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"And the only word there spoken was the whispered word, “Lenore?”\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ALWAYS)\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"This I whispered, and an echo\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_SUCCESS)\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"murmured back the word, “Lenore!”—\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_FAILURE)\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"Merely this and nothing more.\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_ABORTED)\nvoid repeated_failure() {\n    org.assertj.core.api.Assertions.fail(\"\");\n}",
      "assertion_type": "org.assertj.core.api.Assertions.fail(\"\")"
    },
    "afterState": {
      "has_assertions": false,
      "assertion_traces": [],
      "assertion_lines": [],
      "commit": "8a4ad00b7d4e6d7847be646feca59b6937dc696c",
      "annotations": "@org.junit.jupiter.api.Test",
      "assertion_amount": 0.0,
      "trace_statistics": {
        "passed_traces": 0.0,
        "assertion_type_breakdown": {},
        "avg_execution_time_ns": 0.0,
        "total_execution_time_ns": 0.0,
        "failed_traces": 0.0,
        "total_traces": 0.0
      },
      "diff_from_previous": {
        "changeType": "assertion type change",
        "refactoringType": "ASSERTION_TYPE_CHANGE",
        "methodNameBefore": "repeated_failure",
        "methodNameAfter": "repeated_failure",
        "diffSummary": "3 assertion changes",
        "assertionChanges": [
          "Assertion count changed from 1 to 0",
          "Removed: org.assertj.core.api.Assertions.fail(\"\")",
          "Assertion type unknown count changed from 1 to 0"
        ],
        "importChanges": [],
        "logicChanges": [],
        "hasSignatureChange": false,
        "metadata": {}
      },
      "method_signature": "repeated_failure[]",
      "runtime_behavior": {
        "most_common_assertion": "none",
        "success_rate_percent": 0.0
      },
      "body": "@org.junit.jupiter.api.Test\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"And the only word there spoken was the whispered word, “Lenore?”\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ALWAYS)\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"This I whispered, and an echo\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_SUCCESS)\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"murmured back the word, “Lenore!”—\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_FAILURE)\n@org.junitpioneer.jupiter.ReportEntry(value \u003d \"Merely this and nothing more.\", when \u003d org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_ABORTED)\nvoid repeated_failure() {\n    org.junit.jupiter.api.Assertions.fail();\n}",
      "assertion_type": "No Assertions"
    },
    "changes": {
      "changeType": "assertion type change",
      "refactoringType": "ASSERTION_TYPE_CHANGE",
      "methodNameBefore": "repeated_failure",
      "methodNameAfter": "repeated_failure",
      "diffSummary": "3 assertion changes",
      "assertionChanges": [
        "Assertion count changed from 1 to 0",
        "Removed: org.assertj.core.api.Assertions.fail(\"\")",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "importChanges": [],
      "logicChanges": [],
      "hasSignatureChange": false,
      "metadata": {}
    },
    "metadata": {
      "has_signature_changes": false,
      "refactoring_type": "ASSERTION_TYPE_CHANGE",
      "has_logic_changes": false,
      "has_assertion_changes": true,
      "has_import_changes": false,
      "change_count": 3,
      "assertion_change_types": [
        "Assertion count changed from 1 to 0",
        "Removed",
        "Assertion type unknown count changed from 1 to 0"
      ],
      "change_significance": "significant"
    }
  }
]